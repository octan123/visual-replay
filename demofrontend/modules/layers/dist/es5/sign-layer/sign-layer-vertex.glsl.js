"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;
var _default = "#define SHADER_NAME sign-layer-vertex-shader\n\nattribute vec3 positions;\n\nattribute vec3 instancePositions;\nattribute vec3 instancePositions64Low;\nattribute float instanceAngles;\nattribute float instanceSizes;\nattribute vec4 instanceColors;\nattribute vec3 instancePickingColors;\nattribute vec4 instanceIconFrames;\nattribute float instanceColorModes;\nattribute vec2 instanceOffsets;\n\nuniform float sizeScale;\nuniform vec2 iconsTextureDim;\nuniform float render3D;\n\nvarying vec4 vColor;\nvarying vec2 vTextureCoords;\n\nvoid main(void) {\n  // rotation\n  float angle = instanceAngles + PI / 2.0;\n  mat2 rotationMatrix = mat2(\n    cos(angle), sin(angle),\n    -sin(angle), cos(angle)\n  );\n\n  vec2 iconSize = instanceIconFrames.zw;\n  vec2 texCoords = positions.xy;\n  vec2 vertex_offset = (texCoords / 2.0 + instanceOffsets / iconSize) * sizeScale * instanceSizes;\n  vec3 vertex = vec3(\n    vertex_offset.x,\n    vertex_offset.y * (render3D - 1.0),\n    -vertex_offset.y * render3D\n  );\n\n  vec3 offset = project_size(vec3(rotationMatrix * vertex.xy, vertex.z));\n  gl_Position = project_position_to_clipspace(instancePositions, instancePositions64Low, offset);\n\n  vTextureCoords = mix(\n    instanceIconFrames.xy,\n    instanceIconFrames.xy + iconSize,\n    (texCoords + 1.0) / 2.0\n  ) / iconsTextureDim;\n\n  vColor = instanceColors;\n\n  picking_setPickingColor(instancePickingColors);\n}\n";
exports["default"] = _default;
//# sourceMappingURL=sign-layer-vertex.glsl.js.map