{"version":3,"sources":["../../../src/imagery-layer/imagery-layer.js"],"names":["Layer","picking","project32","Model","Texture2D","loadImage","IMAGERY_VERTEX_SHADER","IMAGERY_FRAGMENT_SHADER","GridGeometry","getTexture","gl","src","then","data","getTextureFromData","catch","error","Error","Promise","resolve","parameters","TEXTURE_MIN_FILTER","LINEAR_MIPMAP_LINEAR","TEXTURE_MAG_FILTER","LINEAR","TEXTURE_WRAP_S","CLAMP_TO_EDGE","TEXTURE_WRAP_T","defaultProps","heightMap","heightMapBounds","type","value","compare","heightRange","imagery","imageryBounds","uCount","min","vCount","desaturate","max","transparentColor","tintColor","ImageryLayer","initializeState","context","getExtension","setState","model","getModel","updateState","props","oldProps","changeFlags","state","texture","setUniforms","heightMapTexture","hasHeightMap","imageLoaded","imageryTexture","geometry","setGeometry","propsChanged","draw","opts","id","vs","fs","modules","shaderCache","vertexCount","isIndexed","layerName"],"mappings":"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","sourcesContent":["// Copyright (c) 2019 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\nimport {Layer, picking, project32} from '@deck.gl/core';\nimport {Model, Texture2D} from '@luma.gl/core';\nimport {loadImage} from '@loaders.gl/images';\n\nimport IMAGERY_VERTEX_SHADER from './imagery-layer-vertex';\nimport IMAGERY_FRAGMENT_SHADER from './imagery-layer-fragment';\n\nimport GridGeometry from './grid-geometry';\n\n/*\n * Load image data into luma.gl Texture2D objects\n * @param {WebGLContext} gl\n * @param {String|Texture2D|HTMLImageElement|Uint8ClampedArray} src - source of image data\n *   can be url string, Texture2D object, HTMLImageElement or pixel array\n * @returns {Promise} resolves to an object with name -> texture mapping\n */\nfunction getTexture(gl, src) {\n  if (typeof src === 'string') {\n    // Url, load the image\n    return loadImage(src)\n      .then(data => getTextureFromData(gl, data))\n      .catch(error => {\n        throw new Error(`Could not load texture from ${src}: ${error}`);\n      });\n  }\n  return new Promise(resolve => resolve(getTextureFromData(gl, src)));\n}\n\n/*\n * Convert image data into texture\n * @returns {Texture2D} texture\n */\nfunction getTextureFromData(gl, data) {\n  if (data instanceof Texture2D) {\n    return data;\n  }\n  return new Texture2D(gl, {\n    data,\n    parameters: {\n      [gl.TEXTURE_MIN_FILTER]: gl.LINEAR_MIPMAP_LINEAR,\n      // GL.LINEAR is the default value but explicitly set it here\n      [gl.TEXTURE_MAG_FILTER]: gl.LINEAR,\n      [gl.TEXTURE_WRAP_S]: gl.CLAMP_TO_EDGE,\n      [gl.TEXTURE_WRAP_T]: gl.CLAMP_TO_EDGE\n    }\n  });\n}\n\nconst defaultProps = {\n  heightMap: null,\n  heightMapBounds: {type: 'array', value: [0, 0, 1, 1], compare: true},\n  heightRange: {type: 'array', value: [0, 1], compare: true},\n  imagery: null,\n  imageryBounds: {type: 'array', value: [0, 0, 1, 1], compare: true},\n  uCount: {type: 'number', value: 1, min: 1},\n  vCount: {type: 'number', value: 1, min: 1},\n  desaturate: {type: 'number', value: 0, min: 0, max: 1},\n  // More context: because of the blending mode we're using for ground imagery,\n  // alpha is not effective when blending the bitmap layers with the base map.\n  // Instead we need to manually dim/blend rgb values with a background color.\n  transparentColor: {type: 'color', value: [0, 0, 0, 0]},\n  tintColor: {type: 'color', value: [255, 255, 255]}\n};\n\n/*\n * @class\n * @param {object} props\n * @param {number} props.transparentColor - color to interpret transparency to\n * @param {number} props.tintColor - color bias\n */\nexport default class ImageryLayer extends Layer {\n  initializeState() {\n    const {gl} = this.context;\n    // TODO/ib - Enabled to allow debugging of heightmaps, not perfect but really helps\n    gl.getExtension('OES_standard_derivatives');\n    this.setState({model: this.getModel(gl)});\n  }\n\n  updateState({props, oldProps, changeFlags}) {\n    const {gl} = this.context;\n    const {model} = this.state;\n\n    const {heightMap, imagery, uCount, vCount} = props;\n    if (heightMap && heightMap !== oldProps.heightMap) {\n      getTexture(gl, heightMap).then(texture => {\n        model.setUniforms({heightMapTexture: texture, hasHeightMap: true});\n      });\n    }\n    if (imagery !== oldProps.imagery) {\n      this.setState({imageLoaded: false});\n      getTexture(gl, imagery).then(texture => {\n        this.setState({imageLoaded: true});\n        model.setUniforms({imageryTexture: texture});\n      });\n    }\n    if (uCount !== oldProps.uCount || vCount !== oldProps.vCount) {\n      const geometry = new GridGeometry({uCount, vCount});\n      model.setGeometry(geometry);\n    }\n    if (changeFlags.propsChanged) {\n      const {\n        heightMapBounds,\n        heightRange,\n        imageryBounds,\n        desaturate,\n        transparentColor,\n        tintColor\n      } = props;\n      model.setUniforms({\n        heightMapBounds,\n        heightRange,\n        imageryBounds,\n        desaturate,\n        transparentColor,\n        tintColor\n      });\n    }\n  }\n\n  draw(opts) {\n    if (this.state.imageLoaded) {\n      this.state.model.draw(opts);\n    }\n  }\n\n  getModel(gl) {\n    // 3d surface\n    return new Model(gl, {\n      id: this.props.id,\n      vs: IMAGERY_VERTEX_SHADER,\n      fs: IMAGERY_FRAGMENT_SHADER,\n      modules: [picking, project32],\n      shaderCache: this.context.shaderCache,\n      vertexCount: 0,\n      isIndexed: true\n    });\n  }\n}\n\nImageryLayer.layerName = 'ImageryLayer';\nImageryLayer.defaultProps = defaultProps;\n"],"file":"imagery-layer.js"}