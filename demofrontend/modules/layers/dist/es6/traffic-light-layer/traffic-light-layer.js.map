{"version":3,"sources":["../../../src/traffic-light-layer/traffic-light-layer.js"],"names":["Layer","project32","gouraudLighting","picking","CubeGeometry","SphereGeometry","Model","GL","vs","fs","makeLightShapeTexture","LIGHT_COLOR","invalid","green","yellow","red","LIGHT_SHAPE","circular","left_arrow","right_arrow","defaultProps","getPosition","type","value","x","position","getAngle","getShape","getColor","getState","sizeScale","min","material","shininess","specularColor","TrafficLightLayer","getShaders","modules","initializeState","gl","context","modelsByName","_getModels","setState","models","box","lights","attributeManager","getAttributeManager","addInstanced","instancePositions","size","DOUBLE","fp64","use64bitPositions","accessor","instanceAngles","instanceShapes","UNSIGNED_BYTE","transform","shape","instanceColors","color","instanceStates","draw","uniforms","props","state","setUniforms","Object","assign","modelScale","shaders","id","shaderCache","geometry","isInstanced","modelTranslate","useInstanceColor","lightShapeTexture","updateAttributes","changedAttributes","model","getModels","setInstanceCount","data","length","setAttributes","layerName"],"mappings":"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","sourcesContent":["// Copyright (c) 2019 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\nimport {Layer, project32, gouraudLighting, picking} from '@deck.gl/core';\nimport {CubeGeometry, SphereGeometry, Model} from '@luma.gl/core';\nimport GL from '@luma.gl/constants';\n\nimport vs from './traffic-light-layer-vertex.glsl';\nimport fs from './traffic-light-layer-fragment.glsl';\n\nimport {makeLightShapeTexture} from './traffic-light-utils';\n\nconst LIGHT_COLOR = {\n  invalid: [0, 0, 0],\n  green: [0, 255, 128],\n  yellow: [255, 250, 0],\n  red: [255, 16, 16]\n};\n\n/* eslint-disable camelcase */\nconst LIGHT_SHAPE = {\n  circular: 0,\n  left_arrow: 1,\n  right_arrow: 2\n};\n/* eslint-enable camelcase */\n\nconst defaultProps = {\n  getPosition: {type: 'accessor', value: x => x.position},\n  getAngle: {type: 'accessor', value: 0},\n  getShape: {type: 'accessor', value: x => 'circular'},\n  getColor: {type: 'accessor', value: x => 'green'},\n  getState: {type: 'accessor', value: 1},\n\n  sizeScale: {type: 'number', value: 0.15, min: 0},\n\n  material: {\n    shininess: 0,\n    specularColor: [0, 0, 0]\n  }\n};\n\nexport default class TrafficLightLayer extends Layer {\n  getShaders() {\n    return {vs, fs, modules: [project32, gouraudLighting, picking]};\n  }\n\n  initializeState() {\n    const {gl} = this.context;\n    const modelsByName = this._getModels(gl);\n    this.setState({\n      models: [modelsByName.box, modelsByName.lights],\n      modelsByName\n    });\n\n    const attributeManager = this.getAttributeManager();\n    /* eslint-disable max-len */\n    attributeManager.addInstanced({\n      instancePositions: {\n        size: 3,\n        type: GL.DOUBLE,\n        fp64: this.use64bitPositions(),\n        accessor: 'getPosition'\n      },\n      instanceAngles: {size: 1, accessor: 'getAngle'},\n      instanceShapes: {\n        size: 1,\n        type: GL.UNSIGNED_BYTE,\n        accessor: 'getShape',\n        transform: shape => LIGHT_SHAPE[shape] || 0\n      },\n      instanceColors: {\n        size: 3,\n        type: GL.UNSIGNED_BYTE,\n        accessor: 'getColor',\n        transform: color => LIGHT_COLOR[color] || LIGHT_COLOR.invalid\n      },\n      instanceStates: {\n        size: 1,\n        type: GL.UNSIGNED_BYTE,\n        accessor: 'getState'\n      }\n    });\n    /* eslint-enable max-len */\n  }\n\n  draw({uniforms}) {\n    const {sizeScale} = this.props;\n    const {modelsByName} = this.state;\n\n    modelsByName.box\n      .setUniforms(\n        Object.assign({}, uniforms, {\n          modelScale: [sizeScale * 0.8, sizeScale * 1.6, sizeScale * 1.6]\n        })\n      )\n      .draw();\n    modelsByName.lights\n      .setUniforms(\n        Object.assign({}, uniforms, {\n          modelScale: [sizeScale, sizeScale, sizeScale]\n        })\n      )\n      .draw();\n  }\n\n  _getModels(gl) {\n    const shaders = this.getShaders();\n\n    const box = new Model(gl, {\n      id: `${this.props.id}-box`,\n      ...shaders,\n      shaderCache: this.context.shaderCache,\n      geometry: new CubeGeometry(),\n      isInstanced: true,\n      uniforms: {\n        modelTranslate: [0, 0, 0],\n        useInstanceColor: false\n      }\n    });\n\n    const lights = new Model(gl, {\n      id: `${this.props.id}-light`,\n      ...shaders,\n      shaderCache: this.context.shaderCache,\n      geometry: new SphereGeometry(),\n      isInstanced: true,\n      uniforms: {\n        lightShapeTexture: makeLightShapeTexture(gl),\n        modelTranslate: [-0.4, 0, 0],\n        useInstanceColor: true\n      }\n    });\n\n    return {box, lights};\n  }\n\n  updateAttributes(changedAttributes) {\n    super.updateAttributes(changedAttributes);\n\n    for (const model of this.getModels()) {\n      model.setInstanceCount(this.props.data.length);\n      model.setAttributes(changedAttributes);\n    }\n  }\n}\n\nTrafficLightLayer.layerName = 'TrafficLightLayer';\nTrafficLightLayer.defaultProps = defaultProps;\n"],"file":"traffic-light-layer.js"}