{"version":3,"sources":["../../../src/table/tree-table.js"],"names":["React","PropTypes","withTheme","Table","TreeTableRow","TreeTable","constructor","props","id","state","expanded","rootId","rows","formatRows","sortFunc","rootRowIndex","findIndex","row","_cache","clear","_list","recomputeRowHeights","_renderRow","key","index","style","indentSize","renderCell","theme","userStyle","_isRowExpanded","_toggleRowExpansion","columns","propTypes","number","defaultProps"],"mappings":";;;;;;AAmBA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,SAAP,MAAsB,YAAtB;AAEA,SAAQC,SAAR,QAAwB,iBAAxB;AAEA,SAAQC,KAAR,QAAoB,SAApB;AACA,OAAOC,YAAP,MAAyB,kBAAzB;;AAEA,MAAMC,SAAN,SAAwBF,KAAxB,CAA8B;AAW5BG,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACjB,UAAMA,KAAN;;AADiB,4CAMFC,EAAE,IAAI;AACrB,aAAO,KAAKC,KAAL,CAAWC,QAAX,CAAoBF,EAApB,CAAP;AACD,KARkB;;AAAA,iDAUG,CAACA,EAAD,EAAKG,MAAL,KAAgB;AACpC,YAAM;AAACD,QAAAA;AAAD,UAAa,KAAKD,KAAxB;AACA,YAAMG,IAAI,GAAG,KAAKC,UAAL,CAAgB,KAAKN,KAAL,CAAWK,IAA3B,EAAiC,KAAKH,KAAL,CAAWK,QAA5C,CAAb;AAEAJ,MAAAA,QAAQ,CAACF,EAAD,CAAR,GAAe,CAACE,QAAQ,CAACF,EAAD,CAAxB;AAEA,YAAMO,YAAY,GAAGH,IAAI,CAACI,SAAL,CAAeC,GAAG,IAAIA,GAAG,CAACT,EAAJ,KAAWG,MAAjC,CAArB;;AAEA,WAAKO,MAAL,CAAYC,KAAZ,CAAkBJ,YAAlB;;AACA,WAAKK,KAAL,CAAWC,mBAAX,CAA+BN,YAA/B;AACD,KApBkB;;AAGjB,SAAKN,KAAL,CAAWC,QAAX,GAAsB,EAAtB;AACD;;AAkBDY,EAAAA,UAAU,CAAC;AAACC,IAAAA,GAAD;AAAMC,IAAAA,KAAN;AAAaC,IAAAA;AAAb,GAAD,EAAsB;AAC9B,UAAM;AAACC,MAAAA,UAAD;AAAaC,MAAAA,UAAb;AAAyBC,MAAAA,KAAzB;AAAgCH,MAAAA,KAAK,EAAEI;AAAvC,QAAoD,KAAKtB,KAA/D;AACA,UAAMK,IAAI,GAAG,KAAKC,UAAL,CAAgB,KAAKN,KAAL,CAAWK,IAA3B,EAAiC,KAAKH,KAAL,CAAWK,QAA5C,CAAb;AACA,UAAMG,GAAG,GAAGL,IAAI,CAACY,KAAD,CAAhB;AAEA,WACE,oBAAC,YAAD;AACE,MAAA,GAAG,EAAED,GADP;AAEE,MAAA,EAAE,EAAEN,GAAG,CAACT,EAFV;AAGE,MAAA,KAAK,EAAEgB,KAHT;AAIE,MAAA,IAAI,EAAEP,GAJR;AAKE,MAAA,KAAK,EAAEQ,KALT;AAME,MAAA,KAAK,EAAEG,KANT;AAOE,MAAA,SAAS,EAAEC,SAPb;AAQE,MAAA,UAAU,EAAEH,UARd;AASE,MAAA,UAAU,EAAEC,UATd;AAUE,MAAA,aAAa,EAAE,KAAKG,cAVtB;AAWE,MAAA,eAAe,EAAE,KAAKC,mBAXxB;AAYE,MAAA,OAAO,EAAE,KAAKtB,KAAL,CAAWuB;AAZtB,MADF;AAgBD;;AAtD2B;;gBAAxB3B,S,+CAECF,KAAK,CAAC8B,S;AACTP,EAAAA,UAAU,EAAEzB,SAAS,CAACiC;;;gBAHpB7B,S,kDAOCF,KAAK,CAACgC,Y;AACTT,EAAAA,UAAU,EAAE;;;AAiDhB,eAAexB,SAAS,CAACG,SAAD,CAAxB","sourcesContent":["// Copyright (c) 2019 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\nimport React from 'react';\nimport PropTypes from 'prop-types';\n\nimport {withTheme} from '../shared/theme';\n\nimport {Table} from './table';\nimport TreeTableRow from './tree-table-row';\n\nclass TreeTable extends Table {\n  static propTypes = {\n    ...Table.propTypes,\n    indentSize: PropTypes.number\n  };\n\n  static defaultProps = {\n    ...Table.defaultProps,\n    indentSize: 12\n  };\n\n  constructor(props) {\n    super(props);\n\n    this.state.expanded = {};\n  }\n\n  _isRowExpanded = id => {\n    return this.state.expanded[id];\n  };\n\n  _toggleRowExpansion = (id, rootId) => {\n    const {expanded} = this.state;\n    const rows = this.formatRows(this.props.rows, this.state.sortFunc);\n\n    expanded[id] = !expanded[id];\n\n    const rootRowIndex = rows.findIndex(row => row.id === rootId);\n\n    this._cache.clear(rootRowIndex);\n    this._list.recomputeRowHeights(rootRowIndex);\n  };\n\n  _renderRow({key, index, style}) {\n    const {indentSize, renderCell, theme, style: userStyle} = this.props;\n    const rows = this.formatRows(this.props.rows, this.state.sortFunc);\n    const row = rows[index];\n\n    return (\n      <TreeTableRow\n        key={key}\n        id={row.id}\n        index={index}\n        data={row}\n        style={style}\n        theme={theme}\n        userStyle={userStyle}\n        indentSize={indentSize}\n        renderCell={renderCell}\n        getIsExpanded={this._isRowExpanded}\n        toggleExpansion={this._toggleRowExpansion}\n        columns={this.state.columns}\n      />\n    );\n  }\n}\n\nexport default withTheme(TreeTable);\n"],"file":"tree-table.js"}