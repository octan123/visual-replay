{"version":3,"sources":["../../../src/playback-control/utils.js"],"names":["formatTimeCode","value","format","formatters","h","match","m","s","S","parts","x","Math","floor","len","pow","result","key","f","digits","length","replace","String","padStart","getTimelineTicks","scale","spacing","range","domain","ticksCount","ticks","map","t","label"],"mappings":"AAyBA,OAAO,SAASA,cAAT,CAAwBC,KAAxB,EAA+BC,MAAM,GAAG,sBAAxC,EAAgE;AACrE,QAAMC,UAAU,GAAG;AACjBC,IAAAA,CAAC,EAAE,CAACF,MAAM,CAACG,KAAP,CAAa,UAAb,KAA4B,EAA7B,EAAiC,CAAjC,CADc;AAEjBC,IAAAA,CAAC,EAAE,CAACJ,MAAM,CAACG,KAAP,CAAa,UAAb,KAA4B,EAA7B,EAAiC,CAAjC,CAFc;AAGjBE,IAAAA,CAAC,EAAE,CAACL,MAAM,CAACG,KAAP,CAAa,UAAb,KAA4B,EAA7B,EAAiC,CAAjC,CAHc;AAIjBG,IAAAA,CAAC,EAAE,CAACN,MAAM,CAACG,KAAP,CAAa,UAAb,KAA4B,EAA7B,EAAiC,CAAjC;AAJc,GAAnB;AAOA,QAAMI,KAAK,GAAG;AACZL,IAAAA,CAAC,EAAEM,CAAC,IAAIC,IAAI,CAACC,KAAL,CAAWF,CAAC,GAAG,IAAf,CADI;AAEZJ,IAAAA,CAAC,EAAEI,CAAC,IAAIC,IAAI,CAACC,KAAL,CAAWF,CAAC,GAAG,EAAf,IAAqB,EAFjB;AAGZH,IAAAA,CAAC,EAAEG,CAAC,IAAIC,IAAI,CAACC,KAAL,CAAWF,CAAC,GAAG,EAAf,CAHI;AAIZF,IAAAA,CAAC,EAAE,CAACE,CAAD,EAAIG,GAAJ,KAAYF,IAAI,CAACC,KAAL,CAAYF,CAAC,GAAG,CAAL,GAAUC,IAAI,CAACG,GAAL,CAAS,EAAT,EAAaD,GAAb,CAArB;AAJH,GAAd;AAOA,MAAIE,MAAM,GAAGb,MAAb;;AACA,OAAK,MAAMc,GAAX,IAAkBP,KAAlB,EAAyB;AACvB,UAAMQ,CAAC,GAAGd,UAAU,CAACa,GAAD,CAAV,IAAmB,EAA7B;;AACA,QAAIC,CAAJ,EAAO;AACL,YAAMC,MAAM,GAAGD,CAAC,CAACE,MAAjB;AACAJ,MAAAA,MAAM,GAAGA,MAAM,CAACK,OAAP,YAAmBH,CAAnB,QAAyBI,MAAM,CAACZ,KAAK,CAACO,GAAD,CAAL,CAAWf,KAAX,EAAkBiB,MAAlB,CAAD,CAAN,CAAkCI,QAAlC,CAA2CJ,MAA3C,EAAmD,GAAnD,CAAzB,CAAT;AACD;AACF;;AACD,SAAOH,MAAP;AACD;AAQD,OAAO,SAASQ,gBAAT,CAA0BC,KAA1B,EAAiCC,OAAO,GAAG,EAA3C,EAA+CvB,MAA/C,EAAuD;AAC5D,QAAMwB,KAAK,GAAGF,KAAK,CAACE,KAAN,EAAd;AACA,QAAMC,MAAM,GAAGH,KAAK,CAACG,MAAN,EAAf;AACA,QAAMC,UAAU,GAAGjB,IAAI,CAACC,KAAL,CAAW,CAACc,KAAK,CAAC,CAAD,CAAL,GAAWA,KAAK,CAAC,CAAD,CAAjB,IAAwBD,OAAnC,IAA8C,CAAjE;AAEAD,EAAAA,KAAK,CAACG,MAAN,CAAa,CAAC,CAAD,EAAIA,MAAM,CAAC,CAAD,CAAN,GAAYA,MAAM,CAAC,CAAD,CAAtB,CAAb;AACA,QAAME,KAAK,GAAGL,KAAK,CAACK,KAAN,CAAYD,UAAZ,CAAd;AACAJ,EAAAA,KAAK,CAACG,MAAN,CAAaA,MAAb;AAEA,SAAOE,KAAK,CAACC,GAAN,CAAUC,CAAC,KAAK;AACrBrB,IAAAA,CAAC,EAAEc,KAAK,CAACO,CAAC,GAAGJ,MAAM,CAAC,CAAD,CAAX,CADa;AAErBK,IAAAA,KAAK,EAAE9B,MAAM,CAAC6B,CAAC,GAAGJ,MAAM,CAAC,CAAD,CAAX;AAFQ,GAAL,CAAX,CAAP;AAID","sourcesContent":["// Copyright (c) 2019 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n/**\n * convert number of seconds to time code format\n * @params {Number} value - number of seconds\n * @params {Integer} precision - number of decimal places to round to\n * @params {String} format - h: hours, m: minutes, s: seconds, S: fractional seconds\n */\nexport function formatTimeCode(value, format = '{hh}:{mm}:{ss}.{SSS}') {\n  const formatters = {\n    h: (format.match(/\\{(h+)\\}/) || [])[1],\n    m: (format.match(/\\{(m+)\\}/) || [])[1],\n    s: (format.match(/\\{(s+)\\}/) || [])[1],\n    S: (format.match(/\\{(S+)\\}/) || [])[1]\n  };\n\n  const parts = {\n    h: x => Math.floor(x / 3600),\n    m: x => Math.floor(x / 60) % 60,\n    s: x => Math.floor(x % 60),\n    S: (x, len) => Math.floor((x % 1) * Math.pow(10, len))\n  };\n\n  let result = format;\n  for (const key in parts) {\n    const f = formatters[key] || '';\n    if (f) {\n      const digits = f.length;\n      result = result.replace(`{${f}}`, String(parts[key](value, digits)).padStart(digits, '0'));\n    }\n  }\n  return result;\n}\n\n/*\n * Get ticks for a timeline\n * @params {d3.Scale} scale - a scale that maps domain (time, seconds) to range (x, pixels)\n * @params {Number} spacing - spacing between ticks in pixels\n * @returns {Array} ticks in the shape of {x, label}\n */\nexport function getTimelineTicks(scale, spacing = 50, format) {\n  const range = scale.range();\n  const domain = scale.domain();\n  const ticksCount = Math.floor((range[1] - range[0]) / spacing) + 1;\n\n  scale.domain([0, domain[1] - domain[0]]);\n  const ticks = scale.ticks(ticksCount);\n  scale.domain(domain);\n\n  return ticks.map(t => ({\n    x: scale(t + domain[0]),\n    label: format(t + domain[0])\n  }));\n}\n"],"file":"utils.js"}