{"version":3,"sources":["../../../src/table/tree-table.js"],"names":["React","PropTypes","withTheme","Table","TreeTableRow","TreeTable","props","id","state","expanded","rootId","rows","formatRows","sortFunc","rootRowIndex","findIndex","row","_cache","clear","_list","recomputeRowHeights","key","index","style","indentSize","renderCell","theme","userStyle","_isRowExpanded","_toggleRowExpansion","columns","propTypes","number","defaultProps"],"mappings":";;;;;;;;;;;;;;;;AAmBA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,SAAP,MAAsB,YAAtB;AAEA,SAAQC,SAAR,QAAwB,iBAAxB;AAEA,SAAQC,KAAR,QAAoB,SAApB;AACA,OAAOC,YAAP,MAAyB,kBAAzB;;IAEMC,S;;;;;AAWJ,qBAAYC,KAAZ,EAAmB;AAAA;;AAAA;;AACjB,8BAAMA,KAAN;;AADiB,qEAMF,UAAAC,EAAE,EAAI;AACrB,aAAO,MAAKC,KAAL,CAAWC,QAAX,CAAoBF,EAApB,CAAP;AACD,KARkB;;AAAA,0EAUG,UAACA,EAAD,EAAKG,MAAL,EAAgB;AAAA,UAC7BD,QAD6B,GACjB,MAAKD,KADY,CAC7BC,QAD6B;;AAEpC,UAAME,IAAI,GAAG,MAAKC,UAAL,CAAgB,MAAKN,KAAL,CAAWK,IAA3B,EAAiC,MAAKH,KAAL,CAAWK,QAA5C,CAAb;;AAEAJ,MAAAA,QAAQ,CAACF,EAAD,CAAR,GAAe,CAACE,QAAQ,CAACF,EAAD,CAAxB;AAEA,UAAMO,YAAY,GAAGH,IAAI,CAACI,SAAL,CAAe,UAAAC,GAAG;AAAA,eAAIA,GAAG,CAACT,EAAJ,KAAWG,MAAf;AAAA,OAAlB,CAArB;;AAEA,YAAKO,MAAL,CAAYC,KAAZ,CAAkBJ,YAAlB;;AACA,YAAKK,KAAL,CAAWC,mBAAX,CAA+BN,YAA/B;AACD,KApBkB;;AAGjB,UAAKN,KAAL,CAAWC,QAAX,GAAsB,EAAtB;AAHiB;AAIlB;;;;qCAkB+B;AAAA,UAApBY,GAAoB,QAApBA,GAAoB;AAAA,UAAfC,KAAe,QAAfA,KAAe;AAAA,UAARC,KAAQ,QAARA,KAAQ;AAAA,wBAC4B,KAAKjB,KADjC;AAAA,UACvBkB,UADuB,eACvBA,UADuB;AAAA,UACXC,UADW,eACXA,UADW;AAAA,UACCC,KADD,eACCA,KADD;AAAA,UACeC,SADf,eACQJ,KADR;AAE9B,UAAMZ,IAAI,GAAG,KAAKC,UAAL,CAAgB,KAAKN,KAAL,CAAWK,IAA3B,EAAiC,KAAKH,KAAL,CAAWK,QAA5C,CAAb;AACA,UAAMG,GAAG,GAAGL,IAAI,CAACW,KAAD,CAAhB;AAEA,aACE,oBAAC,YAAD;AACE,QAAA,GAAG,EAAED,GADP;AAEE,QAAA,EAAE,EAAEL,GAAG,CAACT,EAFV;AAGE,QAAA,KAAK,EAAEe,KAHT;AAIE,QAAA,IAAI,EAAEN,GAJR;AAKE,QAAA,KAAK,EAAEO,KALT;AAME,QAAA,KAAK,EAAEG,KANT;AAOE,QAAA,SAAS,EAAEC,SAPb;AAQE,QAAA,UAAU,EAAEH,UARd;AASE,QAAA,UAAU,EAAEC,UATd;AAUE,QAAA,aAAa,EAAE,KAAKG,cAVtB;AAWE,QAAA,eAAe,EAAE,KAAKC,mBAXxB;AAYE,QAAA,OAAO,EAAE,KAAKrB,KAAL,CAAWsB;AAZtB,QADF;AAgBD;;;;EAtDqB3B,K;;gBAAlBE,S,+CAECF,KAAK,CAAC4B,S;AACTP,EAAAA,UAAU,EAAEvB,SAAS,CAAC+B;;;gBAHpB3B,S,kDAOCF,KAAK,CAAC8B,Y;AACTT,EAAAA,UAAU,EAAE;;;AAiDhB,eAAetB,SAAS,CAACG,SAAD,CAAxB","sourcesContent":["// Copyright (c) 2019 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\nimport React from 'react';\nimport PropTypes from 'prop-types';\n\nimport {withTheme} from '../shared/theme';\n\nimport {Table} from './table';\nimport TreeTableRow from './tree-table-row';\n\nclass TreeTable extends Table {\n  static propTypes = {\n    ...Table.propTypes,\n    indentSize: PropTypes.number\n  };\n\n  static defaultProps = {\n    ...Table.defaultProps,\n    indentSize: 12\n  };\n\n  constructor(props) {\n    super(props);\n\n    this.state.expanded = {};\n  }\n\n  _isRowExpanded = id => {\n    return this.state.expanded[id];\n  };\n\n  _toggleRowExpansion = (id, rootId) => {\n    const {expanded} = this.state;\n    const rows = this.formatRows(this.props.rows, this.state.sortFunc);\n\n    expanded[id] = !expanded[id];\n\n    const rootRowIndex = rows.findIndex(row => row.id === rootId);\n\n    this._cache.clear(rootRowIndex);\n    this._list.recomputeRowHeights(rootRowIndex);\n  };\n\n  _renderRow({key, index, style}) {\n    const {indentSize, renderCell, theme, style: userStyle} = this.props;\n    const rows = this.formatRows(this.props.rows, this.state.sortFunc);\n    const row = rows[index];\n\n    return (\n      <TreeTableRow\n        key={key}\n        id={row.id}\n        index={index}\n        data={row}\n        style={style}\n        theme={theme}\n        userStyle={userStyle}\n        indentSize={indentSize}\n        renderCell={renderCell}\n        getIsExpanded={this._isRowExpanded}\n        toggleExpansion={this._toggleRowExpansion}\n        columns={this.state.columns}\n      />\n    );\n  }\n}\n\nexport default withTheme(TreeTable);\n"],"file":"tree-table.js"}