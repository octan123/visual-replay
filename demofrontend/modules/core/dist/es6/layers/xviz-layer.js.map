{"version":3,"sources":["../../../src/layers/xviz-layer.js"],"names":["CompositeLayer","ScatterplotLayer","PathLayer","PolygonLayer","TextLayer","PointCloudLayer","XVIZObject","deepExtend","LAYER_TYPES","SCATTERPLOT","PATH","POINTCLOUD","STADIUM","POLYGON","TEXT","XVIZ_TO_LAYER_TYPE","points2d","points3d","point2d","circle2d","line2d","path2d","polygon2d","point","circle","polyline","polygon","text","stadium","STYLE_TO_LAYER_PROP","opacity","radius_min_pixels","radius_max_pixels","radius","stroked","filled","stroke_width_min_pixels","stroke_width_max_pixels","stroke_width","stroke_color","fill_color","radius_pixels","point_color_mode","point_color_domain","extruded","height","font_family","font_weight","text_size","text_rotation","text_anchor","text_baseline","LAYER_HANDLERS","layerType","layerClass","preprocessData","props","data","vertices","Array","isArray","processedData","reduce","arr","multiPoints","forEach","pt","push","getLayerTypeProps","xvizLayerProps","layerProps","updateTriggers","getPosition","f","center","getFillColor","useSemanticColor","getPath","start","end","rounded","getColor","state","length","points","attributes","colors","vehicleRelativeTransform","p","lightSettings","wireframe","getPolygon","getLineColor","getText","EMPTY_OBJECT","getInlineProperty","context","propertyName","objectState","inlineProp","undefined","getStylesheetProperty","style","getProperty","get","id","altPropertyName","property","disableInlineStyling","getPropertyDefault","toLowerCase","XVIZLayer","_getProperty","_getPropertyAccessor","_getDefaultLayerProps","styleToLayerProp","stylePropName","layerPropName","isAccessor","startsWith","dependencies","getPropertyDependencies","_getLayerProps","objectStates","key","trigger","stateName","_getLayerType","type","updateState","oldProps","changeFlags","dataChanged","dataType","layerHandler","setState","renderLayers","linkTitle","streamName","streamMetadata","objectType","forwardProps","customXvizLayerMatch","customXVIZLayers","find","streamMatch","primitiveLayerProps","primitive","parentLayerHandler","LayerClass","getSubLayerProps","getSubProps","layerName"],"mappings":"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","sourcesContent":["// Copyright (c) 2019 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\n/* eslint-disable camelcase */\nimport {CompositeLayer} from '@deck.gl/core';\nimport {ScatterplotLayer, PathLayer, PolygonLayer, TextLayer} from '@deck.gl/layers';\nimport PointCloudLayer from './point-cloud-layer/point-cloud-layer';\n// TODO/ib - Uncomment to enable binary/flat polygon arrays\n// import PathLayer from './binary-path-layer/binary-path-layer';\n// import PolygonLayer from './binary-polygon-layer/binary-polygon-layer';\n\nimport {XVIZObject} from '@xviz/parser';\n\nimport deepExtend from 'lodash.merge';\n\n// not sure if necessary, just to have enums for existing primitives\nconst LAYER_TYPES = {\n  SCATTERPLOT: 'scatterplot',\n  PATH: 'path',\n  POINTCLOUD: 'pointcloud',\n  STADIUM: 'stadium',\n  POLYGON: 'polygon',\n  TEXT: 'text'\n};\n\nconst XVIZ_TO_LAYER_TYPE = {\n  // V1\n  points2d: LAYER_TYPES.SCATTERPLOT,\n  points3d: LAYER_TYPES.POINTCLOUD,\n  point2d: LAYER_TYPES.SCATTERPLOT,\n  circle2d: LAYER_TYPES.SCATTERPLOT,\n  line2d: LAYER_TYPES.PATH,\n  path2d: LAYER_TYPES.PATH,\n  polygon2d: LAYER_TYPES.POLYGON,\n\n  // V2\n  point: LAYER_TYPES.POINTCLOUD,\n  circle: LAYER_TYPES.SCATTERPLOT,\n  polyline: LAYER_TYPES.PATH,\n  polygon: LAYER_TYPES.POLYGON,\n  text: LAYER_TYPES.TEXT,\n  stadium: LAYER_TYPES.STADIUM\n};\n\nconst STYLE_TO_LAYER_PROP = {\n  [LAYER_TYPES.SCATTERPLOT]: {\n    opacity: 'opacity',\n    radius_min_pixels: 'radiusMinPixels',\n    radius_max_pixels: 'radiusMaxPixels',\n    radius: 'getRadius',\n    stroked: 'stroked',\n    filled: 'filled',\n    stroke_width_min_pixels: 'lineWidthMinPixels',\n    stroke_width_max_pixels: 'lineWidthMaxPixels',\n    stroke_width: 'getLineWidth',\n    stroke_color: 'getLineColor',\n    fill_color: 'getFillColor'\n  },\n  [LAYER_TYPES.POINTCLOUD]: {\n    opacity: 'opacity',\n    radius_pixels: 'pointSize',\n    fill_color: 'getColor',\n    point_color_mode: 'colorMode',\n    point_color_domain: 'colorDomain'\n  },\n  [LAYER_TYPES.PATH]: {\n    opacity: 'opacity',\n    stroke_width_min_pixels: 'widthMinPixels',\n    stroke_width_max_pixels: 'widthMaxPixels',\n    stroke_color: 'getColor',\n    stroke_width: 'getWidth'\n  },\n  [LAYER_TYPES.STADIUM]: {\n    opacity: 'opacity',\n    radius_min_pixels: 'widthMinPixels',\n    radius_max_pixels: 'widthMaxPixels',\n    fill_color: 'getColor',\n    radius: 'getWidth'\n  },\n  [LAYER_TYPES.POLYGON]: {\n    opacity: 'opacity',\n    stroked: 'stroked',\n    filled: 'filled',\n    extruded: 'extruded',\n    stroke_color: 'getLineColor',\n    stroke_width: 'getLineWidth',\n    stroke_width_min_pixels: 'lineWidthMinPixels',\n    stroke_width_max_pixels: 'lineWidthMaxPixels',\n    fill_color: 'getFillColor',\n    height: 'getElevation'\n  },\n  [LAYER_TYPES.TEXT]: {\n    opacity: 'opacity',\n    fill_color: 'getColor',\n    font_family: 'fontFamily',\n    font_weight: 'fontWeight',\n    text_size: 'getSize',\n    text_rotation: 'getAngle',\n    text_anchor: 'getTextAnchor',\n    text_baseline: 'getAlignmentBaseline'\n  }\n};\n\n// Defines the way that each primitive layer type is handled in the application\nconst LAYER_HANDLERS = {\n  [LAYER_TYPES.SCATTERPLOT]: {\n    layerType: LAYER_TYPES.SCATTERPLOT,\n    layerClass: ScatterplotLayer,\n    // returns data to hold in state\n    // updateState calls `getState({data: preprocessData})`\n    preprocessData: props => {\n      const {data} = props;\n      if (data[0].vertices && Array.isArray(data[0].vertices[0])) {\n        const processedData = data.reduce((arr, multiPoints) => {\n          multiPoints.vertices.forEach(pt => {\n            arr.push({...multiPoints, vertices: pt});\n          });\n          return arr;\n        }, []);\n        return processedData;\n      }\n      return data;\n    },\n    getLayerTypeProps: ({xvizLayerProps, layerProps}) => {\n      const {updateTriggers} = layerProps;\n      return {\n        // `vertices` is used xviz V1 and `center` is used by xviz V2\n        getPosition: f => f.vertices || f.center,\n        updateTriggers: deepExtend(updateTriggers, {\n          getFillColor: {useSemanticColor: xvizLayerProps.useSemanticColor}\n        })\n      };\n    }\n  },\n  [LAYER_TYPES.STADIUM]: {\n    layerType: LAYER_TYPES.STADIUM,\n    layerClass: PathLayer,\n    getLayerTypeProps: ({xvizLayerProps, layerProps}) => {\n      const {updateTriggers} = layerProps;\n      return {\n        getPath: f => [f.start, f.end],\n        rounded: true,\n        updateTriggers: deepExtend(updateTriggers, {\n          getColor: {useSemanticColor: xvizLayerProps.useSemanticColor}\n        })\n      };\n    }\n  },\n  [LAYER_TYPES.POINTCLOUD]: {\n    layerType: LAYER_TYPES.POINTCLOUD,\n    layerClass: PointCloudLayer,\n    getLayerTypeProps: ({xvizLayerProps, state}) => {\n      const {data} = state;\n      return {\n        data: {\n          length: data[0].points.length / 3,\n          attributes: {\n            getPosition: data[0].points,\n            getColor: data[0].colors\n          }\n        },\n        vehicleRelativeTransform: xvizLayerProps.vehicleRelativeTransform,\n        getPosition: p => p\n      };\n    }\n  },\n  [LAYER_TYPES.PATH]: {\n    layerType: LAYER_TYPES.PATH,\n    layerClass: PathLayer,\n    getLayerTypeProps: ({xvizLayerProps, layerProps}) => {\n      const {updateTriggers} = layerProps;\n      return {\n        getPath: f => f.vertices,\n        updateTriggers: deepExtend(updateTriggers, {\n          getColor: {useSemanticColor: xvizLayerProps.useSemanticColor}\n        })\n      };\n    }\n  },\n  [LAYER_TYPES.POLYGON]: {\n    layerType: LAYER_TYPES.POLYGON,\n    layerClass: PolygonLayer,\n    getLayerTypeProps: ({xvizLayerProps, layerProps}) => {\n      const {updateTriggers} = layerProps;\n      const {lightSettings, useSemanticColor, opacity} = xvizLayerProps;\n      const {stroked} = layerProps;\n      return {\n        opacity: opacity || 1,\n        lightSettings,\n        wireframe: stroked,\n        getPolygon: f => f.vertices,\n        updateTriggers: deepExtend(updateTriggers, {\n          getLineColor: {useSemanticColor},\n          getFillColor: {useSemanticColor}\n        })\n      };\n    }\n  },\n  [LAYER_TYPES.TEXT]: {\n    layerType: LAYER_TYPES.TEXT,\n    layerClass: TextLayer,\n    getLayerTypeProps: ({xvizLayerProps, layerProps}) => {\n      const {updateTriggers} = layerProps;\n      const {useSemanticColor} = xvizLayerProps;\n      return {\n        getText: f => f.text,\n        updateTriggers: deepExtend(updateTriggers, {\n          getColor: {useSemanticColor}\n        })\n      };\n    }\n  }\n};\n\nconst EMPTY_OBJECT = {};\n\n// Access V1 style properties\nconst getInlineProperty = (context, propertyName, objectState) => {\n  const inlineProp = objectState[propertyName];\n  return inlineProp === undefined ? null : inlineProp;\n};\nconst getStylesheetProperty = (context, propertyName, objectState) =>\n  context.style.getProperty(propertyName, objectState);\n\n// Fetch layer property from XVIZ Stylesheet or object\n//\n// Current resolution of property to style attribute has to deal with\n//  - stylesheets taking precedence over inline style attributes\n//  - style attribute names used in the application do not match those of\n//    XVIZ v1\n//\n// TODO(twojtasz): Once XVIZ v1 is removed this logic can be simplified\n// by removing the `altPropertyName` and changing the order of resolution\n// to be inline, stylesheet, then default.\n//\n/* eslint-disable complexity */\nfunction getProperty(context, propertyName, f = EMPTY_OBJECT) {\n  let objectState = f;\n\n  // Handle XVIZ v1 color override where our semantic color mapping\n  // differs from current OCS colors.  In XVIZ v2 we should be aligned.\n  if (context.useSemanticColor) {\n    switch (propertyName) {\n      case 'stroke_color':\n      case 'fill_color':\n        objectState = XVIZObject.get(f.id) || f;\n        break;\n\n      default:\n      // ignore\n    }\n  }\n\n  // Handle XVIZ v1 style property name mismatches and\n  // setup validation function based on property name.\n  let altPropertyName = null;\n\n  switch (propertyName) {\n    case 'stroke_color':\n    case 'fill_color':\n      altPropertyName = 'color';\n      break;\n    case 'stroke_width':\n      altPropertyName = 'thickness';\n      break;\n    case 'radius':\n      // v2 circle inline style\n      if (f.radius) {\n        return f.radius;\n      }\n      break;\n    default:\n      break;\n  }\n\n  // 1a. Property from inline style (v2) or stylesheet\n  let property = getStylesheetProperty(context, propertyName, objectState);\n\n  // 1b. Alt property from inline style (v2) or stylesheet\n  if (property === null && altPropertyName) {\n    property = getStylesheetProperty(context, altPropertyName, objectState);\n  }\n\n  // Backward compatibility\n  if (property === null && !context.disableInlineStyling) {\n    // 2a. Property from inline style (v1)\n    property = getInlineProperty(context, propertyName, objectState);\n\n    // 2b. Alt property from inline style (v1)\n    if (property === null && altPropertyName) {\n      property = getInlineProperty(context, altPropertyName, objectState);\n    }\n  }\n\n  // 3. Property from default style\n  if (property === null) {\n    property = context.style.getPropertyDefault(propertyName);\n  }\n\n  if (propertyName === 'text_anchor' || propertyName === 'text_baseline') {\n    // These XVIZ enumerations map to Deck.gl as lowercase strings\n    property = property.toLowerCase();\n  }\n\n  return property;\n}\n/* eslint-enable complexity */\n\nexport default class XVIZLayer extends CompositeLayer {\n  _getProperty(propertyName) {\n    return getProperty(this.props, propertyName);\n  }\n\n  _getPropertyAccessor(propertyName) {\n    return f => getProperty(this.props, propertyName, f);\n  }\n\n  // These props are persistent unless data type and stylesheet change\n  _getDefaultLayerProps(style, styleToLayerProp) {\n    const layerProps = {\n      updateTriggers: {}\n    };\n\n    for (const stylePropName in styleToLayerProp) {\n      const layerPropName = styleToLayerProp[stylePropName];\n      const isAccessor = layerPropName.startsWith('get');\n      if (isAccessor) {\n        layerProps.updateTriggers[layerPropName] = {\n          style: stylePropName,\n          dependencies: style.getPropertyDependencies(stylePropName)\n        };\n      } else {\n        layerProps[layerPropName] = this._getProperty(stylePropName);\n      }\n    }\n\n    return layerProps;\n  }\n\n  _getLayerProps() {\n    const {objectStates} = this.props;\n    const {layerProps} = this.state;\n    const {updateTriggers} = layerProps;\n\n    for (const key in updateTriggers) {\n      const trigger = updateTriggers[key];\n\n      layerProps[key] = this._getPropertyAccessor(trigger.style);\n\n      updateTriggers[key] = {...trigger};\n      trigger.dependencies.forEach(stateName => {\n        updateTriggers[key][stateName] = objectStates[stateName];\n      });\n    }\n\n    return layerProps;\n  }\n\n  _getLayerType(data) {\n    if (data.length > 0) {\n      return data[0].type;\n    }\n    return null;\n  }\n\n  updateState({props, oldProps, changeFlags}) {\n    let {type} = this.state;\n\n    if (changeFlags.dataChanged) {\n      // Pre-process data\n      let data = props.data;\n      const dataType = this._getLayerType(data);\n      type = XVIZ_TO_LAYER_TYPE[dataType];\n      // Currently, preprocessing of data is not exposed to customXVIZLayers\n      // It's only available through internal primitives\n      const layerHandler = LAYER_HANDLERS[type];\n      if (layerHandler && layerHandler.preprocessData) {\n        data = layerHandler.preprocessData(props);\n      }\n\n      this.setState({data});\n    }\n\n    if (type !== this.state.type || props.style !== oldProps.style) {\n      const styleToLayerProp = STYLE_TO_LAYER_PROP[type];\n      const layerProps = this._getDefaultLayerProps(props.style, styleToLayerProp);\n      this.setState({type, layerProps});\n    }\n  }\n\n  renderLayers() {\n    const {type, data} = this.state;\n\n    if (!type) {\n      return null;\n    }\n\n    const {linkTitle, streamName, streamMetadata, objectType} = this.props;\n    const layerProps = this._getLayerProps();\n    const forwardProps = {\n      linkTitle,\n      streamName,\n      objectType\n    };\n    // Only allows for single match of a layer to a stream\n    const customXvizLayerMatch = this.props.customXVIZLayers.find(({streamMatch}) =>\n      streamMatch(streamName, streamMetadata)\n    );\n\n    if (customXvizLayerMatch) {\n      let primitiveLayerProps = {};\n      const layerType = XVIZ_TO_LAYER_TYPE[customXvizLayerMatch.primitive];\n      const parentLayerHandler = LAYER_HANDLERS[layerType];\n      if (parentLayerHandler) {\n        primitiveLayerProps = parentLayerHandler.getLayerTypeProps({\n          xvizLayerProps: this.props,\n          layerProps,\n          state: this.state\n        });\n      }\n\n      const LayerClass = customXvizLayerMatch.layerClass || parentLayerHandler?.layerClass;\n      return new LayerClass(\n        forwardProps,\n        layerProps,\n        this.getSubLayerProps({\n          id: `${layerType ? layerType : ''}-${customXvizLayerMatch.id}`,\n          data,\n          ...primitiveLayerProps,\n          ...customXvizLayerMatch.getSubProps({\n            xvizLayerProps: this.props,\n            primitiveLayerProps,\n            state: this.state\n          })\n        })\n      );\n    }\n    if (!LAYER_HANDLERS[type]) {\n      return null;\n    }\n\n    const {layerClass: LayerClass, getLayerTypeProps} = LAYER_HANDLERS[type];\n    return new LayerClass(\n      forwardProps,\n      layerProps,\n      this.getSubLayerProps({\n        id: type,\n        data,\n        ...getLayerTypeProps({\n          xvizLayerProps: this.props,\n          layerProps,\n          state: this.state\n        })\n      })\n    );\n  }\n}\n\nXVIZLayer.layerName = 'XVIZLayer';\n"],"file":"xviz-layer.js"}