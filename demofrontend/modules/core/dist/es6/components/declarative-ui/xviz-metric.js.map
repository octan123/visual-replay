{"version":3,"sources":["../../../../src/components/declarative-ui/xviz-metric.js"],"names":["React","PureComponent","PropTypes","MetricCard","MetricChart","Spinner","DEFAULT_COLOR_SERIES","connectToLog","getTimeSeries","MissingDataCard","defaultFormatValue","x","Number","isFinite","toFixed","String","XVIZMetricComponent","constructor","props","onClick","log","seek","state","timeSeries","_getTimeSeries","componentWillReceiveProps","nextProps","streams","streamsMetadata","logStreams","setState","streamNames","render","title","description","startTime","endTime","currentTime","width","height","style","xTicks","yTicks","formatXTick","formatYTick","formatValue","horizontalGridLines","verticalGridLines","getColor","isLoading","timeDomain","missingStreams","length","_onClick","object","oneOfType","string","number","func","arrayOf","isRequired","objectOf","array","margin","left","right","top","bottom","getLogState","getCurrentTime","getStreamsMetadata","getStreams","getBufferStartTime","getBufferEndTime","Component"],"mappings":"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","sourcesContent":["// Copyright (c) 2019 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\nimport React, {PureComponent} from 'react';\nimport PropTypes from 'prop-types';\nimport {MetricCard, MetricChart, Spinner} from '@streetscape.gl/monochrome';\n\nimport {DEFAULT_COLOR_SERIES} from './constants';\nimport connectToLog from '../connect';\nimport {getTimeSeries} from '../../utils/metrics-helper';\nimport {MissingDataCard} from './missing-data-card';\n\nconst defaultFormatValue = x => (Number.isFinite(x) ? x.toFixed(3) : String(x));\n\nclass XVIZMetricComponent extends PureComponent {\n  static propTypes = {\n    // User configuration\n    style: PropTypes.object,\n    width: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n    height: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n    getColor: PropTypes.oneOfType([PropTypes.func, PropTypes.string, PropTypes.object]),\n    xTicks: PropTypes.number,\n    yTicks: PropTypes.number,\n    formatXTick: PropTypes.func,\n    formatYTick: PropTypes.func,\n    formatValue: PropTypes.func,\n    horizontalGridLines: PropTypes.number,\n    verticalGridLines: PropTypes.number,\n    onClick: PropTypes.func,\n\n    // From declarative UI metric component\n    streams: PropTypes.arrayOf(PropTypes.string).isRequired,\n    title: PropTypes.string,\n    description: PropTypes.string,\n\n    // From connected log\n    currentTime: PropTypes.number,\n    streamsMetadata: PropTypes.object,\n    logStreams: PropTypes.objectOf(PropTypes.array),\n    startTime: PropTypes.number,\n    endTime: PropTypes.number\n  };\n\n  static defaultProps = {\n    timeSeries: {},\n    width: '100%',\n    height: 160,\n    style: {\n      margin: {left: 45, right: 10, top: 10, bottom: 20}\n    },\n    xTicks: 0,\n    yTicks: 3,\n    formatValue: defaultFormatValue,\n    horizontalGridLines: 3,\n    verticalGridLines: 0,\n    getColor: DEFAULT_COLOR_SERIES\n  };\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      timeSeries: this._getTimeSeries(props)\n    };\n  }\n\n  componentWillReceiveProps(nextProps) {\n    if (\n      this.props.streams !== nextProps.streams ||\n      this.props.streamsMetadata !== nextProps.streamsMetadata ||\n      this.props.logStreams !== nextProps.logStreams\n    ) {\n      this.setState({\n        timeSeries: this._getTimeSeries(nextProps)\n      });\n    }\n  }\n\n  _getTimeSeries(props) {\n    return getTimeSeries({\n      streamNames: props.streams,\n      streamsMetadata: props.streamsMetadata,\n      streams: props.logStreams\n    });\n  }\n\n  _onClick = x => {\n    const {onClick, log} = this.props;\n    if (onClick) {\n      onClick(x);\n    } else if (log) {\n      log.seek(x);\n    }\n  };\n\n  render() {\n    const {\n      title,\n      description,\n      startTime,\n      endTime,\n      currentTime,\n      width,\n      height,\n      style,\n      xTicks,\n      yTicks,\n      formatXTick,\n      formatYTick,\n      formatValue,\n      horizontalGridLines,\n      verticalGridLines,\n      getColor\n    } = this.props;\n    const isLoading = currentTime == null; /* eslint-disable-line no-eq-null, eqeqeq */\n    const timeDomain = Number.isFinite(startTime) ? [startTime, endTime] : null;\n    const {missingStreams} = this.state.timeSeries;\n\n    return (\n      <MetricCard title={title} description={description} isLoading={false} style={style}>\n        <>\n          {missingStreams.length > 0 && (\n            <MissingDataCard style={style} missingData={missingStreams} />\n          )}\n          {isLoading ? (\n            <Spinner />\n          ) : (\n            <MetricChart\n              {...this.state.timeSeries}\n              getColor={getColor}\n              highlightX={currentTime}\n              width={width}\n              height={height}\n              style={style}\n              xTicks={xTicks}\n              yTicks={yTicks}\n              formatXTick={formatXTick}\n              formatYTick={formatYTick}\n              formatValue={formatValue}\n              xDomain={timeDomain}\n              onClick={this._onClick}\n              horizontalGridLines={horizontalGridLines}\n              verticalGridLines={verticalGridLines}\n            />\n          )}\n        </>\n      </MetricCard>\n    );\n  }\n}\n\nconst getLogState = log => ({\n  currentTime: log.getCurrentTime(),\n  streamsMetadata: log.getStreamsMetadata(),\n  logStreams: log.getStreams(),\n  startTime: log.getBufferStartTime(),\n  endTime: log.getBufferEndTime()\n});\n\nexport default connectToLog({getLogState, Component: XVIZMetricComponent});\n"],"file":"xviz-metric.js"}