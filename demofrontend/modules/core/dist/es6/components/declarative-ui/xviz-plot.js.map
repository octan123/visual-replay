{"version":3,"sources":["../../../../src/components/declarative-ui/xviz-plot.js"],"names":["React","PureComponent","PropTypes","MetricCard","MetricChart","Spinner","DEFAULT_COLOR_SERIES","connectToLog","MissingDataCard","GET_X","d","GET_Y","DATA_LOADING","isLoading","XVIZPlotComponent","independentVariable","dependentVariables","missingStreams","props","x","onClick","log","streamName","componentWillReceiveProps","nextProps","variables","setState","independentVariableChanged","dependentVariablesChanged","updatedDependentVariable","state","variable","_formatDependentVariable","Object","keys","filter","dv","length","values","map","id","valueTuple","Array","forEach","v","k","_extractDataProps","data","i","getX","getY","xDomain","render","title","description","width","height","style","xTicks","yTicks","formatXTick","formatYTick","horizontalGridLines","verticalGridLines","getColor","dataProps","_onClick","_formatTitle","oneOfType","string","number","object","func","arrayOf","streamsMetadata","margin","left","right","top","bottom","getLogState","frame","getCurrentFrame","getStreamsMetadata","Component"],"mappings":";;;;;;;AAoBA,OAAOA,KAAP,IAAeC,aAAf,QAAmC,OAAnC;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,SAAQC,UAAR,EAAoBC,WAApB,EAAiCC,OAAjC,QAA+C,4BAA/C;AAEA,SAAQC,oBAAR,QAAmC,aAAnC;AACA,OAAOC,YAAP,MAAyB,YAAzB;AACA,SAAQC,eAAR,QAA8B,qBAA9B;;AAEA,MAAMC,KAAK,GAAGC,CAAC,IAAIA,CAAC,CAAC,CAAD,CAApB;;AACA,MAAMC,KAAK,GAAGD,CAAC,IAAIA,CAAC,CAAC,CAAD,CAApB;;AACA,MAAME,YAAY,GAAG;AAACC,EAAAA,SAAS,EAAE;AAAZ,CAArB;;AAEA,MAAMC,iBAAN,SAAgCb,aAAhC,CAA8C;AAAA;AAAA;;AAAA,mCAyCpC;AACNc,MAAAA,mBAAmB,EAAE,IADf;AAENC,MAAAA,kBAAkB,EAAE,EAFd;AAGNC,MAAAA,cAAc,EAAE,KAAKC,KAAL,CAAWF;AAHrB,KAzCoC;;AAAA,sCAuFjCG,CAAC,IAAI;AACd,YAAM;AAACC,QAAAA,OAAD;AAAUC,QAAAA;AAAV,UAAiB,KAAKH,KAA5B;;AACA,UAAIE,OAAJ,EAAa;AACXA,QAAAA,OAAO,CAACD,CAAD,CAAP;AACD,OAFD,MAEO,IAAIE,GAAJ,EAAS,CAEf;AACF,KA9F2C;;AAAA,0CAgG7BC,UAAU,IAAI;AAI3B,aAAOA,UAAP;AACD,KArG2C;AAAA;;AA+C5CC,EAAAA,yBAAyB,CAACC,SAAD,EAAY;AACnC,QAAI,CAACA,SAAS,CAACC,SAAf,EAA0B;AACxB,WAAKC,QAAL,CAAc;AAACX,QAAAA,mBAAmB,EAAE;AAAtB,OAAd;AACA;AACD;;AAED,UAAMA,mBAAmB,GAAGS,SAAS,CAACC,SAAV,CAAoBD,SAAS,CAACT,mBAA9B,CAA5B;AACA,QAAIY,0BAA0B,GAAG,KAAjC;AACA,QAAIC,yBAAyB,GAAG,KAAhC;AACA,UAAMC,wBAAwB,GAAG,EAAjC;;AAEA,QAAId,mBAAmB,KAAK,KAAKe,KAAL,CAAWf,mBAAvC,EAA4D;AAC1DY,MAAAA,0BAA0B,GAAG,IAA7B;AACD;;AACD,SAAK,MAAML,UAAX,IAAyBE,SAAS,CAACR,kBAAnC,EAAuD;AACrD,YAAMe,QAAQ,GAAGP,SAAS,CAACC,SAAV,CAAoBH,UAApB,CAAjB;;AACA,UACEK,0BAA0B,IAC1B,CAAC,KAAKT,KAAL,CAAWO,SADZ,IAEA,KAAKP,KAAL,CAAWO,SAAX,CAAqBH,UAArB,MAAqCS,QAHvC,EAIE;AACAF,QAAAA,wBAAwB,CAACP,UAAD,CAAxB,GAAuC,KAAKU,wBAAL,CACrCjB,mBADqC,EAErCgB,QAFqC,CAAvC;AAIAH,QAAAA,yBAAyB,GAAG,IAA5B;AACD;AACF;;AAED,QAAID,0BAA0B,IAAIC,yBAAlC,EAA6D;AAC3D,WAAKF,QAAL,CAAc;AACZX,QAAAA,mBADY;AAEZC,QAAAA,kBAAkB,kCAAM,KAAKc,KAAL,CAAWd,kBAAjB,GAAwCa,wBAAxC,CAFN;AAGZZ,QAAAA,cAAc,EAAEgB,MAAM,CAACC,IAAP,CAAYL,wBAAZ,EAAsCM,MAAtC,CACdC,EAAE,IAAI,CAACP,wBAAwB,CAACO,EAAD,CADjB;AAHJ,OAAd;AAOD;AACF;;AAkBDJ,EAAAA,wBAAwB,CAACjB,mBAAD,EAAsBgB,QAAtB,EAAgC;AACtD,QAAI,CAACA,QAAD,IAAa,CAAChB,mBAAd,IAAqCA,mBAAmB,CAACsB,MAApB,KAA+B,CAAxE,EAA2E;AACzE,aAAO,IAAP;AACD;;AACD,UAAMlB,CAAC,GAAGJ,mBAAmB,CAAC,CAAD,CAAnB,CAAuBuB,MAAjC;AAEA,WAAOP,QAAQ,CAACQ,GAAT,CAAa,CAAC;AAACC,MAAAA,EAAD;AAAKF,MAAAA;AAAL,KAAD,KAAkB;AAGpC,YAAMG,UAAU,GAAG,IAAIC,KAAJ,CAAUJ,MAAM,CAACD,MAAjB,CAAnB;AACAC,MAAAA,MAAM,CAACK,OAAP,CAAe,CAACC,CAAD,EAAIC,CAAJ,KAAWJ,UAAU,CAACI,CAAD,CAAV,GAAgB,CAAC1B,CAAC,CAAC0B,CAAD,CAAF,EAAOD,CAAP,CAA1C;AAEA,aAAO;AACLJ,QAAAA,EADK;AAELF,QAAAA,MAAM,EAAEG;AAFH,OAAP;AAID,KAVM,CAAP;AAWD;;AAEDK,EAAAA,iBAAiB,GAAG;AAClB,UAAM;AAAC/B,MAAAA,mBAAD;AAAsBC,MAAAA;AAAtB,QAA4C,KAAKc,KAAvD;;AAEA,QAAI,CAACf,mBAAL,EAA0B;AACxB,aAAOH,YAAP;AACD;;AAED,UAAMO,CAAC,GAAGJ,mBAAmB,CAAC,CAAD,CAAnB,CAAuBuB,MAAjC;AACA,UAAMS,IAAI,GAAG,EAAb;;AACA,SAAK,MAAMzB,UAAX,IAAyBN,kBAAzB,EAA6C;AAC3C,YAAMe,QAAQ,GAAGf,kBAAkB,CAACM,UAAD,CAAnC;;AACA,UAAIS,QAAJ,EAAc;AACZA,QAAAA,QAAQ,CAACY,OAAT,CAAiB,CAAC;AAACH,UAAAA,EAAD;AAAKF,UAAAA;AAAL,SAAD,EAAeU,CAAf,KAAqB;AACpCD,UAAAA,IAAI,WAAIzB,UAAJ,cAAkBkB,EAAE,IAAIQ,CAAxB,EAAJ,GAAmCV,MAAnC;AACD,SAFD;AAGD;AACF;;AAED,WAAO;AACLW,MAAAA,IAAI,EAAExC,KADD;AAELyC,MAAAA,IAAI,EAAEvC,KAFD;AAGLwC,MAAAA,OAAO,EAAE,CAAChC,CAAC,CAAC,CAAD,CAAF,EAAOA,CAAC,CAACA,CAAC,CAACkB,MAAF,GAAW,CAAZ,CAAR,CAHJ;AAILU,MAAAA;AAJK,KAAP;AAMD;;AAEDK,EAAAA,MAAM,GAAG;AACP,UAAM;AACJC,MAAAA,KADI;AAEJC,MAAAA,WAFI;AAGJC,MAAAA,KAHI;AAIJC,MAAAA,MAJI;AAKJC,MAAAA,KALI;AAMJC,MAAAA,MANI;AAOJC,MAAAA,MAPI;AAQJC,MAAAA,WARI;AASJC,MAAAA,WATI;AAUJC,MAAAA,mBAVI;AAWJC,MAAAA,iBAXI;AAYJC,MAAAA;AAZI,QAaF,KAAK9C,KAbT;;AAeA,UAAM+C,SAAS,GAAG,KAAKnB,iBAAL,EAAlB;;AACA,UAAM;AAAC7B,MAAAA;AAAD,QAAmB,KAAKa,KAA9B;AAEA,WACE,oBAAC,UAAD;AAAY,MAAA,KAAK,EAAEuB,KAAnB;AAA0B,MAAA,WAAW,EAAEC,WAAvC;AAAoD,MAAA,KAAK,EAAEG,KAA3D;AAAkE,MAAA,SAAS,EAAE;AAA7E,OACE,0CACGxC,cAAc,CAACoB,MAAf,GAAwB,CAAxB,IACC,oBAAC,eAAD;AAAiB,MAAA,KAAK,EAAEoB,KAAxB;AAA+B,MAAA,WAAW,EAAExC;AAA5C,MAFJ,EAIGgD,SAAS,CAACpD,SAAV,GACC,oBAAC,OAAD,OADD,GAGC,oBAAC,WAAD,eACMoD,SADN;AAEE,MAAA,QAAQ,EAAED,QAFZ;AAGE,MAAA,UAAU,EAAE,CAHd;AAIE,MAAA,KAAK,EAAET,KAJT;AAKE,MAAA,MAAM,EAAEC,MALV;AAME,MAAA,KAAK,EAAEC,KANT;AAOE,MAAA,MAAM,EAAEC,MAPV;AAQE,MAAA,MAAM,EAAEC,MARV;AASE,MAAA,WAAW,EAAEC,WATf;AAUE,MAAA,WAAW,EAAEC,WAVf;AAWE,MAAA,OAAO,EAAE,KAAKK,QAXhB;AAYE,MAAA,WAAW,EAAE,KAAKC,YAZpB;AAaE,MAAA,mBAAmB,EAAEL,mBAbvB;AAcE,MAAA,iBAAiB,EAAEC;AAdrB,OAPJ,CADF,CADF;AA6BD;;AApM2C;;gBAAxCjD,iB,eACe;AAEjByC,EAAAA,KAAK,EAAErD,SAAS,CAACkE,SAAV,CAAoB,CAAClE,SAAS,CAACmE,MAAX,EAAmBnE,SAAS,CAACoE,MAA7B,CAApB,CAFU;AAGjBd,EAAAA,MAAM,EAAEtD,SAAS,CAACkE,SAAV,CAAoB,CAAClE,SAAS,CAACmE,MAAX,EAAmBnE,SAAS,CAACoE,MAA7B,CAApB,CAHS;AAIjBb,EAAAA,KAAK,EAAEvD,SAAS,CAACqE,MAJA;AAKjBP,EAAAA,QAAQ,EAAE9D,SAAS,CAACkE,SAAV,CAAoB,CAAClE,SAAS,CAACsE,IAAX,EAAiBtE,SAAS,CAACqE,MAA3B,CAApB,CALO;AAMjBb,EAAAA,MAAM,EAAExD,SAAS,CAACoE,MAND;AAOjBX,EAAAA,MAAM,EAAEzD,SAAS,CAACoE,MAPD;AAQjBV,EAAAA,WAAW,EAAE1D,SAAS,CAACsE,IARN;AASjBX,EAAAA,WAAW,EAAE3D,SAAS,CAACsE,IATN;AAUjBV,EAAAA,mBAAmB,EAAE5D,SAAS,CAACoE,MAVd;AAWjBP,EAAAA,iBAAiB,EAAE7D,SAAS,CAACoE,MAXZ;AAYjBlD,EAAAA,OAAO,EAAElB,SAAS,CAACsE,IAZF;AAejBnB,EAAAA,KAAK,EAAEnD,SAAS,CAACmE,MAfA;AAgBjBf,EAAAA,WAAW,EAAEpD,SAAS,CAACmE,MAhBN;AAiBjBtD,EAAAA,mBAAmB,EAAEb,SAAS,CAACmE,MAjBd;AAkBjBrD,EAAAA,kBAAkB,EAAEd,SAAS,CAACuE,OAAV,CAAkBvE,SAAS,CAACmE,MAA5B,CAlBH;AAqBjBK,EAAAA,eAAe,EAAExE,SAAS,CAACqE,MArBV;AAsBjB9C,EAAAA,SAAS,EAAEvB,SAAS,CAACqE;AAtBJ,C;;gBADfzD,iB,kBA0BkB;AACpB4D,EAAAA,eAAe,EAAE,EADG;AAEpBjD,EAAAA,SAAS,EAAE,EAFS;AAGpB8B,EAAAA,KAAK,EAAE,MAHa;AAIpBC,EAAAA,MAAM,EAAE,GAJY;AAKpBC,EAAAA,KAAK,EAAE;AACLkB,IAAAA,MAAM,EAAE;AAACC,MAAAA,IAAI,EAAE,EAAP;AAAWC,MAAAA,KAAK,EAAE,EAAlB;AAAsBC,MAAAA,GAAG,EAAE,EAA3B;AAA+BC,MAAAA,MAAM,EAAE;AAAvC;AADH,GALa;AAQpBrB,EAAAA,MAAM,EAAE,CARY;AASpBC,EAAAA,MAAM,EAAE,CATY;AAUpBG,EAAAA,mBAAmB,EAAE,CAVD;AAWpBC,EAAAA,iBAAiB,EAAE,CAXC;AAYpBC,EAAAA,QAAQ,EAAE1D;AAZU,C;;AA6KxB,MAAM0E,WAAW,GAAG3D,GAAG,IAAI;AACzB,QAAM4D,KAAK,GAAG5D,GAAG,CAAC6D,eAAJ,EAAd;AACA,SAAO;AACLR,IAAAA,eAAe,EAAErD,GAAG,CAAC8D,kBAAJ,EADZ;AAEL1D,IAAAA,SAAS,EAAEwD,KAAK,IAAIA,KAAK,CAACxD;AAFrB,GAAP;AAID,CAND;;AAQA,eAAelB,YAAY,CAAC;AAACyE,EAAAA,WAAD;AAAcI,EAAAA,SAAS,EAAEtE;AAAzB,CAAD,CAA3B","sourcesContent":["// Copyright (c) 2019 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\nimport React, {PureComponent} from 'react';\nimport PropTypes from 'prop-types';\nimport {MetricCard, MetricChart, Spinner} from '@streetscape.gl/monochrome';\n\nimport {DEFAULT_COLOR_SERIES} from './constants';\nimport connectToLog from '../connect';\nimport {MissingDataCard} from './missing-data-card';\n\nconst GET_X = d => d[0];\nconst GET_Y = d => d[1];\nconst DATA_LOADING = {isLoading: true};\n\nclass XVIZPlotComponent extends PureComponent {\n  static propTypes = {\n    // User configuration\n    width: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n    height: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n    style: PropTypes.object,\n    getColor: PropTypes.oneOfType([PropTypes.func, PropTypes.object]),\n    xTicks: PropTypes.number,\n    yTicks: PropTypes.number,\n    formatXTick: PropTypes.func,\n    formatYTick: PropTypes.func,\n    horizontalGridLines: PropTypes.number,\n    verticalGridLines: PropTypes.number,\n    onClick: PropTypes.func,\n\n    // From declarative UI plot component\n    title: PropTypes.string,\n    description: PropTypes.string,\n    independentVariable: PropTypes.string,\n    dependentVariables: PropTypes.arrayOf(PropTypes.string),\n\n    // From connected log\n    streamsMetadata: PropTypes.object,\n    variables: PropTypes.object\n  };\n\n  static defaultProps = {\n    streamsMetadata: {},\n    variables: {},\n    width: '100%',\n    height: 300,\n    style: {\n      margin: {left: 45, right: 10, top: 10, bottom: 32}\n    },\n    xTicks: 0,\n    yTicks: 5,\n    horizontalGridLines: 5,\n    verticalGridLines: 0,\n    getColor: DEFAULT_COLOR_SERIES\n  };\n\n  state = {\n    independentVariable: null,\n    dependentVariables: {},\n    missingStreams: this.props.dependentVariables\n  };\n\n  componentWillReceiveProps(nextProps) {\n    if (!nextProps.variables) {\n      this.setState({independentVariable: null});\n      return;\n    }\n\n    const independentVariable = nextProps.variables[nextProps.independentVariable];\n    let independentVariableChanged = false;\n    let dependentVariablesChanged = false;\n    const updatedDependentVariable = {};\n\n    if (independentVariable !== this.state.independentVariable) {\n      independentVariableChanged = true;\n    }\n    for (const streamName of nextProps.dependentVariables) {\n      const variable = nextProps.variables[streamName];\n      if (\n        independentVariableChanged ||\n        !this.props.variables ||\n        this.props.variables[streamName] !== variable\n      ) {\n        updatedDependentVariable[streamName] = this._formatDependentVariable(\n          independentVariable,\n          variable\n        );\n        dependentVariablesChanged = true;\n      }\n    }\n\n    if (independentVariableChanged || dependentVariablesChanged) {\n      this.setState({\n        independentVariable,\n        dependentVariables: {...this.state.dependentVariables, ...updatedDependentVariable},\n        missingStreams: Object.keys(updatedDependentVariable).filter(\n          dv => !updatedDependentVariable[dv]\n        )\n      });\n    }\n  }\n\n  _onClick = x => {\n    const {onClick, log} = this.props;\n    if (onClick) {\n      onClick(x);\n    } else if (log) {\n      // TODO - set look ahead\n    }\n  };\n\n  _formatTitle = streamName => {\n    // TODO - use information from metadata\n    // const {metadata} = this.props;\n    // const streamInfo = metadata && metadata.streams[streamName];\n    return streamName;\n  };\n\n  _formatDependentVariable(independentVariable, variable) {\n    if (!variable || !independentVariable || independentVariable.length === 0) {\n      return null;\n    }\n    const x = independentVariable[0].values;\n\n    return variable.map(({id, values}) => {\n      // TypeArray.map() cannot return an array as the result so construct\n      // a new Array explicitly\n      const valueTuple = new Array(values.length);\n      values.forEach((v, k) => (valueTuple[k] = [x[k], v]));\n\n      return {\n        id,\n        values: valueTuple\n      };\n    });\n  }\n\n  _extractDataProps() {\n    const {independentVariable, dependentVariables} = this.state;\n\n    if (!independentVariable) {\n      return DATA_LOADING;\n    }\n\n    const x = independentVariable[0].values;\n    const data = {};\n    for (const streamName in dependentVariables) {\n      const variable = dependentVariables[streamName];\n      if (variable) {\n        variable.forEach(({id, values}, i) => {\n          data[`${streamName}-${id || i}`] = values;\n        });\n      }\n    }\n\n    return {\n      getX: GET_X,\n      getY: GET_Y,\n      xDomain: [x[0], x[x.length - 1]],\n      data\n    };\n  }\n\n  render() {\n    const {\n      title,\n      description,\n      width,\n      height,\n      style,\n      xTicks,\n      yTicks,\n      formatXTick,\n      formatYTick,\n      horizontalGridLines,\n      verticalGridLines,\n      getColor\n    } = this.props;\n\n    const dataProps = this._extractDataProps();\n    const {missingStreams} = this.state;\n\n    return (\n      <MetricCard title={title} description={description} style={style} isLoading={false}>\n        <>\n          {missingStreams.length > 0 && (\n            <MissingDataCard style={style} missingData={missingStreams} />\n          )}\n          {dataProps.isLoading ? (\n            <Spinner />\n          ) : (\n            <MetricChart\n              {...dataProps}\n              getColor={getColor}\n              highlightX={0}\n              width={width}\n              height={height}\n              style={style}\n              xTicks={xTicks}\n              yTicks={yTicks}\n              formatXTick={formatXTick}\n              formatYTick={formatYTick}\n              onClick={this._onClick}\n              formatTitle={this._formatTitle}\n              horizontalGridLines={horizontalGridLines}\n              verticalGridLines={verticalGridLines}\n            />\n          )}\n        </>\n      </MetricCard>\n    );\n  }\n}\n\nconst getLogState = log => {\n  const frame = log.getCurrentFrame();\n  return {\n    streamsMetadata: log.getStreamsMetadata(),\n    variables: frame && frame.variables\n  };\n};\n\nexport default connectToLog({getLogState, Component: XVIZPlotComponent});\n"],"file":"xviz-plot.js"}