{"version":3,"sources":["../../../../src/components/log-viewer/object-labels-overlay.js"],"names":["React","PureComponent","PropTypes","PerspectivePopup","resolveCoordinateTransform","positionToLngLat","renderDefaultObjectLabel","id","isSelected","ObjectLabelsOverlay","constructor","props","object","objectSelection","xvizStyleParser","style","renderObjectLabel","Boolean","styleProps","xvizStyles","labelContent","trackingPoint","objectHeight","streamName","streamNames","feature","getFeature","center","vertices","position","_getCoordinateProps","getStylesheet","getProperty","state","coordinateProps","componentWillReceiveProps","nextProps","frame","setState","result","streamsMetadata","getTransformMatrix","render","Object","values","objects","map","_renderPerspectivePopup","func"],"mappings":"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","sourcesContent":["// Copyright (c) 2019 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\n// @flow\nimport React, {PureComponent} from 'react';\nimport PropTypes from 'prop-types';\n\nimport PerspectivePopup from './perspective-popup';\n\nimport {resolveCoordinateTransform, positionToLngLat} from '../../utils/transform';\n\nconst renderDefaultObjectLabel = ({id, isSelected}) => isSelected && <div>ID: {id}</div>;\n\nexport default class ObjectLabelsOverlay extends PureComponent {\n  static propTypes = {\n    objectSelection: PropTypes.object,\n    frame: PropTypes.object,\n    streamsMetadata: PropTypes.object,\n    xvizStyleParser: PropTypes.object,\n\n    renderObjectLabel: PropTypes.func,\n    style: PropTypes.object,\n    getTransformMatrix: PropTypes.func\n  };\n\n  static defaultProps = {\n    objectSelection: {},\n    renderObjectLabel: renderDefaultObjectLabel,\n    style: {}\n  };\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      coordinateProps: {}\n    };\n  }\n\n  componentWillReceiveProps(nextProps) {\n    const {frame} = nextProps;\n\n    if (frame && frame !== this.props.frame) {\n      this.setState({\n        coordinateProps: {}\n      });\n    }\n  }\n\n  _getCoordinateProps(streamName) {\n    const {coordinateProps} = this.state;\n    let result = coordinateProps[streamName];\n\n    if (result) {\n      return result;\n    }\n\n    const {frame, streamsMetadata, getTransformMatrix} = this.props;\n    result = resolveCoordinateTransform(\n      frame,\n      streamName,\n      streamsMetadata[streamName],\n      getTransformMatrix\n    );\n    // cache calculated coordinate props by stream name\n    coordinateProps[streamName] = result;\n\n    return result;\n  }\n\n  _renderPerspectivePopup = object => {\n    const {objectSelection, xvizStyleParser, style, renderObjectLabel} = this.props;\n\n    const isSelected = Boolean(objectSelection[object.id]);\n    const styleProps = {\n      id: object.id,\n      isSelected,\n      object,\n      xvizStyles: xvizStyleParser\n    };\n\n    const labelContent = renderObjectLabel(styleProps);\n\n    if (!labelContent) {\n      return null;\n    }\n\n    let trackingPoint;\n    let objectHeight;\n\n    for (const streamName of object.streamNames) {\n      const feature = object.getFeature(streamName);\n      if (!trackingPoint && (feature.center || feature.vertices)) {\n        trackingPoint = positionToLngLat(object.position, this._getCoordinateProps(streamName));\n      }\n      if (!objectHeight && feature.vertices) {\n        objectHeight = xvizStyleParser.getStylesheet(streamName).getProperty('height', feature);\n      }\n    }\n\n    trackingPoint[2] += objectHeight || 0;\n\n    return (\n      <PerspectivePopup\n        key={object.id}\n        longitude={trackingPoint[0]}\n        latitude={trackingPoint[1]}\n        altitude={trackingPoint[2]}\n        anchor=\"bottom-left\"\n        dynamicPosition={true}\n        styleProps={styleProps}\n        style={style}\n        sortByDepth={true}\n        closeButton={false}\n        closeOnClick={false}\n      >\n        {labelContent}\n      </PerspectivePopup>\n    );\n  };\n\n  render() {\n    const {frame, renderObjectLabel} = this.props;\n\n    if (!frame || !renderObjectLabel) {\n      return null;\n    }\n\n    return Object.values(frame.objects).map(this._renderPerspectivePopup);\n  }\n}\n"],"file":"object-labels-overlay.js"}