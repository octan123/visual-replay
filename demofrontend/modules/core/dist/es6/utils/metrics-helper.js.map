{"version":3,"sources":["../../../src/utils/metrics-helper.js"],"names":["getX","d","time","variableNullFilter","value","undefined","getTimeSeriesForStream","streamName","metadata","stream","target","nograph","mapper","valueMap","scale","getY","variable","sampleDatum","find","Number","isFinite","isLoading","unit","data","filter","getTimeSeries","streamsMetadata","streamNames","streams","timeSeries","missingStreams","streamMetadata","streamToDisplay"],"mappings":"AAoBA,MAAMA,IAAI,GAAGC,CAAC,IAAIA,CAAC,CAACC,IAApB;;AACA,MAAMC,kBAAkB,GAAGC,KAAK,IAAIA,KAAK,KAAKC,SAA9C;;AAEA,SAASC,sBAAT,CAAgCC,UAAhC,EAA4CC,QAA5C,EAAsDC,MAAtD,EAA8DC,MAA9D,EAAsE;AACpE,MAAIF,QAAQ,CAACG,OAAb,EAAsB;AACpB;AACD;;AAED,QAAMC,MAAM,GAAGJ,QAAQ,CAACK,QAAxB;AACA,QAAMC,KAAK,GAAGN,QAAQ,CAACM,KAAT,IAAkB,CAAhC;AACA,QAAMC,IAAI,GAAGH,MAAM,GAAGX,CAAC,IAAIW,MAAM,CAACX,CAAC,CAACe,QAAH,CAAd,GAA6Bf,CAAC,IAAIA,CAAC,CAACe,QAAF,GAAaF,KAAlE;AAEA,QAAMG,WAAW,GAAGR,MAAM,CAACS,IAAP,CAAYf,kBAAZ,CAApB;;AACA,MAAI,CAACc,WAAD,IAAgB,CAACE,MAAM,CAACC,QAAP,CAAgBL,IAAI,CAACE,WAAD,CAApB,CAArB,EAAyD;AACvD;AACD;;AAEDP,EAAAA,MAAM,CAACW,SAAP,GAAmB,KAAnB;AACAX,EAAAA,MAAM,CAACV,IAAP,GAAcA,IAAd;AACAU,EAAAA,MAAM,CAACK,IAAP,GAAcA,IAAd;AACAL,EAAAA,MAAM,CAACY,IAAP,GAAcd,QAAQ,CAACc,IAAT,IAAiB,EAA/B;AACAZ,EAAAA,MAAM,CAACa,IAAP,CAAYhB,UAAZ,IAA0BE,MAAM,CAACe,MAAP,CAAcrB,kBAAd,CAA1B;AACD;;AAQD,OAAO,SAASsB,aAAT,CAAuB;AAACC,EAAAA,eAAe,GAAG,EAAnB;AAAuBC,EAAAA,WAAvB;AAAoCC,EAAAA;AAApC,CAAvB,EAAqE;AAC1E,QAAMC,UAAU,GAAG;AACjBR,IAAAA,SAAS,EAAE,IADM;AAEjBE,IAAAA,IAAI,EAAE,EAFW;AAGjBO,IAAAA,cAAc,EAAE;AAHC,GAAnB;;AAKA,OAAK,MAAMvB,UAAX,IAAyBoB,WAAzB,EAAsC;AAEpC,UAAMI,cAAc,GAAIL,eAAe,IAAIA,eAAe,CAACnB,UAAD,CAAnC,IAAoD,EAA3E;AACA,UAAME,MAAM,GAAGmB,OAAO,CAACrB,UAAD,CAAtB;;AACA,QAAIE,MAAJ,EAAY;AACVH,MAAAA,sBAAsB,CAACC,UAAD,EAAawB,cAAb,EAA6BtB,MAA7B,EAAqCoB,UAArC,CAAtB;AACD;AACF;;AAEDA,EAAAA,UAAU,CAACC,cAAX,GAA4BH,WAAW,CAACH,MAAZ,CAC1BQ,eAAe,IAAI,CAACH,UAAU,CAACN,IAAX,CAAgBS,eAAhB,CADM,CAA5B;AAIA,SAAOH,UAAP;AACD","sourcesContent":["// Copyright (c) 2019 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\nconst getX = d => d.time;\nconst variableNullFilter = value => value !== undefined;\n\nfunction getTimeSeriesForStream(streamName, metadata, stream, target) {\n  if (metadata.nograph) {\n    return;\n  }\n\n  const mapper = metadata.valueMap;\n  const scale = metadata.scale || 1;\n  const getY = mapper ? d => mapper[d.variable] : d => d.variable * scale;\n\n  const sampleDatum = stream.find(variableNullFilter);\n  if (!sampleDatum || !Number.isFinite(getY(sampleDatum))) {\n    return;\n  }\n\n  target.isLoading = false;\n  target.getX = getX;\n  target.getY = getY;\n  target.unit = metadata.unit || '';\n  target.data[streamName] = stream.filter(variableNullFilter);\n}\n\n/**\n * Get the time series for given streams\n * @param streamsMetadata {object} map from stream names to stream metadata\n * @param streams array of streams data\n * @returns {Array} array of time series data\n */\nexport function getTimeSeries({streamsMetadata = {}, streamNames, streams}) {\n  const timeSeries = {\n    isLoading: true,\n    data: {},\n    missingStreams: []\n  };\n  for (const streamName of streamNames) {\n    // ui configuration for this stream\n    const streamMetadata = (streamsMetadata && streamsMetadata[streamName]) || {};\n    const stream = streams[streamName];\n    if (stream) {\n      getTimeSeriesForStream(streamName, streamMetadata, stream, timeSeries);\n    }\n  }\n\n  timeSeries.missingStreams = streamNames.filter(\n    streamToDisplay => !timeSeries.data[streamToDisplay]\n  );\n\n  return timeSeries;\n}\n"],"file":"metrics-helper.js"}