{"version":3,"sources":["../../../src/loaders/xviz-stream-loader.js"],"names":["assert","getXVIZConfig","XVIZWebsocketLoader","rangeUtils","DEFAULT_LOG_PROFILE","DEFAULT_RETRY_ATTEMPTS","DEFAULT_BUFFER_LENGTH","seconds","milliseconds","getSocketRequestParams","options","logGuid","logProfile","duration","requestedDuration","timestamp","serverConfig","bufferLength","TIMESTAMP_FORMAT","maxConcurrency","WebSocketClass","passThroughOptions","defaultLogLength","queryParams","log","profile","retryAttempts","Number","isInteger","qs","Object","keys","map","key","join","url","serverUrl","updateSocketRequestParams","metadata","bufferRange","start_time","logStartTime","Infinity","end_time","logEndTime","totalDuration","chunkSize","isFinite","startTimestamp","endTimestamp","bufferStart","bufferEnd","Math","max","min","newBufferRange","subtract","length","start","end","XVIZStreamLoader","constructor","lastRequest","xvizHandler","transformLog","requestParams","retrySettings","retries","minTimeout","randomize","empty","seek","getCurrentTime","streamBuffer","isInBufferRange","getMetadata","params","updateFixedBuffer","intersect","isOpen","_getBufferedTimeRanges","_getBufferStartTime","_getBufferEndTime","_onXVIZTimeslice","message","bufferUpdated","add"],"mappings":"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","sourcesContent":["// Copyright (c) 2019 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\n/* eslint-disable camelcase */\nimport assert from 'assert';\nimport {getXVIZConfig} from '@xviz/parser';\n\nimport XVIZWebsocketLoader from './xviz-websocket-loader';\nimport * as rangeUtils from '../utils/buffer-range';\n\nconst DEFAULT_LOG_PROFILE = 'default';\nconst DEFAULT_RETRY_ATTEMPTS = 3;\nconst DEFAULT_BUFFER_LENGTH = {\n  seconds: 30,\n  milliseconds: 30000\n};\n\n/* eslint-disable no-unused-vars */\nfunction getSocketRequestParams(options) {\n  const {\n    logGuid,\n    logProfile = DEFAULT_LOG_PROFILE,\n    duration: requestedDuration,\n    timestamp,\n    serverConfig,\n    bufferLength = DEFAULT_BUFFER_LENGTH[getXVIZConfig().TIMESTAMP_FORMAT],\n    // These are parent class options we want to filter\n    maxConcurrency,\n    WebSocketClass,\n    ...passThroughOptions\n  } = options;\n\n  // set duration overrides & defaults\n  const duration = requestedDuration || serverConfig.defaultLogLength;\n\n  assert(logGuid && duration);\n\n  const queryParams = {\n    ...passThroughOptions,\n    ...serverConfig.queryParams,\n    log: logGuid,\n    profile: logProfile\n  };\n\n  if (duration) {\n    queryParams.duration = duration;\n  }\n  if (timestamp) {\n    queryParams.timestamp = timestamp;\n  }\n\n  const retryAttempts = Number.isInteger(serverConfig.retryAttempts)\n    ? serverConfig.retryAttempts\n    : DEFAULT_RETRY_ATTEMPTS;\n\n  const qs = Object.keys(queryParams)\n    .map(key => `${key}=${queryParams[key]}`)\n    .join('&');\n\n  return {\n    url: `${serverConfig.serverUrl}?${qs}`,\n    logGuid,\n    logProfile,\n    duration,\n    timestamp,\n    bufferLength,\n    retryAttempts,\n    serverConfig\n  };\n}\n/* eslint-enable no-unused-vars */\n\n// Determine timestamp & duration to reconnect after an interrupted connection.\n// Calculate based on current XVIZStreamBuffer data\n// Returns null if update is not needed\nexport function updateSocketRequestParams(timestamp, metadata, bufferLength, bufferRange) {\n  const {start_time: logStartTime = -Infinity, end_time: logEndTime = Infinity} = metadata;\n  const totalDuration = logEndTime - logStartTime;\n  const chunkSize = bufferLength || totalDuration;\n\n  if (!Number.isFinite(totalDuration)) {\n    // If there is no start/end time in metadata, buffer length must be supplied\n    assert(bufferLength, 'bufferLength is invalid');\n  }\n  if (chunkSize >= totalDuration) {\n    // Unlimited buffer\n    return {\n      startTimestamp: logStartTime,\n      endTimestamp: logEndTime,\n      bufferStart: logStartTime,\n      bufferEnd: logEndTime\n    };\n  }\n\n  const bufferStart = Math.max(timestamp - chunkSize / 2, logStartTime);\n  const bufferEnd = Math.min(bufferStart + chunkSize, logEndTime);\n  const newBufferRange = rangeUtils.subtract([bufferStart, bufferEnd], bufferRange);\n\n  if (newBufferRange.length === 0) {\n    return null;\n  }\n  const start = newBufferRange[0][0];\n  const end = newBufferRange[newBufferRange.length - 1][1];\n\n  return {\n    startTimestamp: start,\n    endTimestamp: end,\n    bufferStart,\n    bufferEnd\n  };\n}\n\nexport default class XVIZStreamLoader extends XVIZWebsocketLoader {\n  /**\n   * constructor\n   * @params serverConfig {object}\n   *   - serverConfig.serverUrl {string}\n   *   - serverConfig.defaultLogLength {number, optional} - default 30\n   *   - serverConfig.queryParams {object, optional}\n   *   - serverConfig.retryAttempts {number, optional} - default 3\n   * @params worker {string|function, optional}\n   * @params maxConcurrency {number, optional} - default 3\n   * @params logGuid {string}\n   * @params logProfile {string, optional}\n   * @params duration {number, optional}\n   * @params timestamp {number, optional}\n   * @params bufferLength {number, optional}\n   */\n  constructor(options = {}) {\n    super(options);\n\n    // Construct websocket connection details from parameters\n    this.requestParams = getSocketRequestParams(options);\n    assert(this.requestParams.bufferLength, 'bufferLength must be provided');\n\n    this.retrySettings = {\n      retries: this.requestParams.retryAttempts,\n      minTimeout: 500,\n      randomize: true\n    };\n\n    // Reconnection state\n    this.lastRequest = null;\n    this.bufferRange = rangeUtils.empty();\n  }\n\n  seek(timestamp) {\n    super.seek(timestamp);\n\n    // use clamped/rounded timestamp\n    timestamp = this.getCurrentTime();\n\n    if (this.lastRequest && this.streamBuffer.isInBufferRange(timestamp)) {\n      // Already loading\n      return;\n    }\n\n    const metadata = this.getMetadata();\n    if (!metadata) {\n      return;\n    }\n\n    const params = updateSocketRequestParams(\n      timestamp,\n      metadata,\n      this.requestParams.bufferLength,\n      this.bufferRange\n    );\n    if (!params) {\n      return;\n    }\n\n    this.lastRequest = params;\n\n    // prune buffer\n    this.streamBuffer.updateFixedBuffer(params.bufferStart, params.bufferEnd);\n    this.bufferRange = rangeUtils.intersect(\n      [params.bufferStart, params.bufferEnd],\n      this.bufferRange\n    );\n\n    if (this.isOpen()) {\n      this.xvizHandler.transformLog(params);\n    } else {\n      // Wait for socket to connect\n    }\n  }\n\n  /* Hook overrides */\n  _onOpen = () => {\n    if (this.lastRequest) {\n      this.xvizHandler.transformLog(this.lastRequest);\n    }\n  };\n\n  _getBufferedTimeRanges() {\n    return this.bufferRange;\n  }\n\n  _getBufferStartTime() {\n    return this.lastRequest && this.lastRequest.bufferStart;\n  }\n\n  _getBufferEndTime() {\n    return this.lastRequest && this.lastRequest.bufferEnd;\n  }\n\n  _onXVIZTimeslice(message) {\n    const bufferUpdated = super._onXVIZTimeslice(message);\n    if (bufferUpdated) {\n      this.bufferRange = rangeUtils.add(\n        [this.lastRequest.startTimestamp, message.timestamp],\n        this.bufferRange\n      );\n    }\n  }\n}\n"],"file":"xviz-stream-loader.js"}