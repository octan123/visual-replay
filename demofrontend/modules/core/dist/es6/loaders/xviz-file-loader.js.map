{"version":3,"sources":["../../../src/loaders/xviz-file-loader.js"],"names":["assert","parseStreamMessage","XVIZStreamBuffer","XVIZLoaderInterface","DEFAULT_BATCH_SIZE","XVIZFileLoader","constructor","options","timingsFilePath","getFilePath","_timingsFilePath","_getFilePath","_batchSize","maxConcurrency","streamBuffer","_isOpen","_lastLoadFrame","isOpen","connect","_loadTimings","then","data","_numberOfFrames","timing","length","_loadMetadata","_startLoad","seek","timestamp","close","fetch","resp","json","metadataPath","_loadFile","worker","i","_loadNextFrame","emit","filePath","Promise","resolve","fileFormat","toLowerCase","match","file","arrayBuffer","reject","message","onResult","onXVIZMessage","onError","debug","_debug","bind"],"mappings":"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","sourcesContent":["// Copyright (c) 2019 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\n/* global fetch */\nimport assert from 'assert';\nimport {parseStreamMessage, XVIZStreamBuffer} from '@xviz/parser';\n\nimport XVIZLoaderInterface from './xviz-loader-interface';\n\nconst DEFAULT_BATCH_SIZE = 4;\n\nexport default class XVIZFileLoader extends XVIZLoaderInterface {\n  constructor(options) {\n    super(options);\n\n    assert(options.timingsFilePath && options.getFilePath);\n\n    this._timingsFilePath = options.timingsFilePath;\n    this._getFilePath = options.getFilePath;\n    this._batchSize = options.maxConcurrency || DEFAULT_BATCH_SIZE;\n\n    this.streamBuffer = new XVIZStreamBuffer();\n    this._isOpen = false;\n\n    this._lastLoadFrame = -1;\n  }\n\n  isOpen() {\n    return this._isOpen;\n  }\n\n  connect() {\n    this._isOpen = true;\n    this._loadTimings().then(data => {\n      // Adding 1 is to account for the metadata file\n      this._numberOfFrames = data.timing.length + 1;\n      this._loadMetadata().then(() => this._startLoad());\n    });\n  }\n\n  seek(timestamp) {\n    // TODO incomplete\n    super.seek(timestamp);\n  }\n\n  close() {\n    // Stop file loading\n    this._isOpen = false;\n  }\n\n  _loadTimings() {\n    return fetch(this._timingsFilePath).then(resp => resp.json());\n  }\n\n  _loadMetadata() {\n    const metadataPath = this._getFilePath(0);\n    assert(metadataPath);\n    return this._loadFile(metadataPath, {worker: false});\n  }\n\n  _startLoad() {\n    this._lastLoadFrame = 0;\n    // fetching in parallel\n    for (let i = 0; i < this._batchSize && i < this._numberOfFrames; i++) {\n      this._loadNextFrame();\n    }\n  }\n\n  _loadNextFrame() {\n    if (!this.isOpen()) {\n      return;\n    }\n\n    this._lastLoadFrame = this._lastLoadFrame + 1;\n\n    if (this._lastLoadFrame >= this._numberOfFrames) {\n      this.emit('done');\n      return;\n    }\n\n    const filePath = this._getFilePath(this._lastLoadFrame);\n    assert(filePath);\n    Promise.resolve(this._loadFile(filePath, this.options)).then(() => {\n      this._loadNextFrame();\n    });\n  }\n\n  _loadFile(filePath, options) {\n    const fileFormat = filePath.toLowerCase().match(/[^\\.]*$/)[0];\n\n    let file;\n    switch (fileFormat) {\n      case 'glb':\n        file = fetch(filePath).then(resp => resp.arrayBuffer());\n        break;\n\n      case 'json':\n        file = fetch(filePath).then(resp => resp.json());\n        break;\n\n      default:\n        return Promise.reject('Unknown file format');\n    }\n\n    return file.then(data => {\n      // if not open, do not parse the message\n      if (this._isOpen) {\n        parseStreamMessage({\n          message: data,\n          onResult: this.onXVIZMessage,\n          onError: this.onError,\n          worker: options.worker,\n          maxConcurrency: options.maxConcurrency,\n          debug: this._debug.bind(this, 'parse_message')\n        });\n      }\n    });\n  }\n}\n"],"file":"xviz-file-loader.js"}