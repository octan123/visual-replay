{"version":3,"sources":["../../../src/loaders/loader-interface.js"],"names":["LoaderInterface","constructor","_updateTimer","listeners","forEach","o","_version","get","state","_updates","subscribe","instance","push","unsubscribe","index","findIndex","splice","key","set","value","requestAnimationFrame","_update","_bumpDataVersion"],"mappings":";AA2DA,eAAe,MAAMA,eAAN,CAAsB;AACnCC,EAAAA,WAAW,GAAG;AAAA,qCAkCJ,MAAM;AACd,WAAKC,YAAL,GAAoB,IAApB;AACA,WAAKC,SAAL,CAAeC,OAAf,CAAuBC,CAAC,IAAIA,CAAC,CAAC,KAAKC,QAAN,CAA7B;AACD,KArCa;;AAAA,6CA4CI,MAAM,KAAKC,GAAL,CAAS,aAAT,CA5CV;;AACZ,SAAKJ,SAAL,GAAiB,EAAjB;AACA,SAAKK,KAAL,GAAa,EAAb;AACA,SAAKC,QAAL,GAAgB,CAAhB;AACA,SAAKH,QAAL,GAAgB,CAAhB;AACA,SAAKJ,YAAL,GAAoB,IAApB;AACD;;AAEDQ,EAAAA,SAAS,CAACC,QAAD,EAAW;AAClB,SAAKR,SAAL,CAAeS,IAAf,CAAoBD,QAApB;AACD;;AAEDE,EAAAA,WAAW,CAACF,QAAD,EAAW;AACpB,UAAMG,KAAK,GAAG,KAAKX,SAAL,CAAeY,SAAf,CAAyBV,CAAC,IAAIA,CAAC,KAAKM,QAApC,CAAd;;AACA,QAAIG,KAAK,IAAI,CAAb,EAAgB;AACd,WAAKX,SAAL,CAAea,MAAf,CAAsBF,KAAtB,EAA6B,CAA7B;AACD;AACF;;AAEDP,EAAAA,GAAG,CAACU,GAAD,EAAM;AACP,WAAO,KAAKT,KAAL,CAAWS,GAAX,CAAP;AACD;;AAEDC,EAAAA,GAAG,CAACD,GAAD,EAAME,KAAN,EAAa;AACd,QAAI,KAAKX,KAAL,CAAWS,GAAX,MAAoBE,KAAxB,EAA+B;AAC7B,WAAKX,KAAL,CAAWS,GAAX,IAAkBE,KAAlB;AACA,WAAKb,QAAL;;AACA,UAAI,CAAC,KAAKJ,YAAV,EAAwB;AAEtB,aAAKA,YAAL,GAAoBkB,qBAAqB,CAAC,KAAKC,OAAN,CAAzC;AACD;AACF;AACF;;AAODC,EAAAA,gBAAgB,GAAG;AACjB,SAAKb,QAAL;AACA,SAAKS,GAAL,CAAS,aAAT,EAAwB,KAAKT,QAA7B;AACD;;AA3CkC","sourcesContent":["// Copyright (c) 2019 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\n/**\n * This class defines the interface for Loader classes. A Loader is factually\n * a store holding state for connected components. We call the subclasses of this\n * interface \"Loaders\" and not simply \"Stores\" because they are is usually also\n * responsible for loading data in addition of storing it.\n *\n * The pattern of a Loader is very similar to the Redux store.\n * We provide a \"connect()\" High Order Component (H.O.C.) to connect React\n * components to Loader instances. Connected components will react to the loader's\n * state changes, very much like React components react to the Redux's store state\n * changes when they are connected it via the Redux connect() HOC.\n *\n * @example\n *\n * // Define and instantiate a new loader.\n * class MyLoader extends LoaderInterface {\n *   // Some arbitrary internal method that will store the loaded data\n *   _onMessage(msg) {\n *     this.set('foo', msg.foo);\n *     this.set('bar', msg.bar);\n *   }\n * }\n * const loader = new MyLoader(...opts);\n *\n * // Create a new component that will connect to the loader state.\n * const MyComponent = props => <div>{props.foo}:{props.bar}</div>;\n *\n * // Connect component to the loader.\n * import {connect} from 'streetscape.gl';\n * const mapStateToProps = loader => ({\n *     foo: loader.get('foo'),\n *     bar: loader.get('bar')\n * });\n * const MyConnectedComponent = connect(mapStateToProps, MyComponent);\n *\n * // Render connected component somewhere and feed it the loader. It will\n * // react to the loader state changes.\n * <MyConnectedComponent loader={loader} />\n */\nexport default class LoaderInterface {\n  constructor() {\n    this.listeners = [];\n    this.state = {};\n    this._updates = 0;\n    this._version = 0;\n    this._updateTimer = null;\n  }\n\n  subscribe(instance) {\n    this.listeners.push(instance);\n  }\n\n  unsubscribe(instance) {\n    const index = this.listeners.findIndex(o => o === instance);\n    if (index >= 0) {\n      this.listeners.splice(index, 1);\n    }\n  }\n\n  get(key) {\n    return this.state[key];\n  }\n\n  set(key, value) {\n    if (this.state[key] !== value) {\n      this.state[key] = value;\n      this._version++;\n      if (!this._updateTimer) {\n        /* global requestAnimationFrame */\n        this._updateTimer = requestAnimationFrame(this._update);\n      }\n    }\n  }\n\n  _update = () => {\n    this._updateTimer = null;\n    this.listeners.forEach(o => o(this._version));\n  };\n\n  _bumpDataVersion() {\n    this._updates++;\n    this.set('dataVersion', this._updates);\n  }\n\n  _getDataVersion = () => this.get('dataVersion');\n}\n"],"file":"loader-interface.js"}