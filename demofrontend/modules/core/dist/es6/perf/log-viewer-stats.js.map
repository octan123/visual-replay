{"version":3,"sources":["../../../src/perf/log-viewer-stats.js"],"names":["React","MetricCard","MetricChart","HISTORY_SIZE","STATS_NAMES","STYLES","STATS_KEYS","STATS_COLORS","DEFAULT_STATS_TITLE","STATS_HELP","INITIAL_STATS","Help","help","statName","statHelp","Object","entries","push","marginBottom","LOG_VIEWER","_updateStats","stats","statsSnapshot","counter","values","length","slice","newStatValue","x","y","LogViewerStats","Component","componentWillUpdate","nextProps","props","state","setState","render","data","title","STATS","METRIC_CARD","statKey"],"mappings":"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","sourcesContent":["// Copyright (c) 2019 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\nimport React from 'react';\nimport {MetricCard, MetricChart} from '@streetscape.gl/monochrome';\n\nimport {\n  HISTORY_SIZE,\n  STATS_NAMES,\n  STYLES,\n  STATS_KEYS,\n  STATS_COLORS,\n  DEFAULT_STATS_TITLE,\n  STATS_HELP,\n  INITIAL_STATS\n} from './constants';\n\nconst Help = () => {\n  const help = [];\n  for (const [statName, statHelp] of Object.entries(STATS_HELP)) {\n    help.push(\n      <div key={statName} style={{marginBottom: 10}}>\n        <strong>{STATS_NAMES[statName]}</strong>\n        <div>{statHelp}</div>\n      </div>\n    );\n  }\n  return <div style={STYLES.LOG_VIEWER.STATS_HELP}>{help}</div>;\n};\n\n/**\n * Stat snapshot at a specific point in time.\n * @typedef {Object} StatsSnapshot\n * @property {Number} STATS_KEYS.FPS\n * @property {Number} STATS_KEYS.REDRAW\n * @property {Number} STATS_KEYS.FRAME_UPDATE\n * @property {Number} STATS_KEYS.LOADER_UPDATE\n * @property {Number} STATS_KEYS.LOADER_ERROR\n */\n\n/**\n * @typedef {Object} StatValue\n * @property {Number} x - X-axis value (e.g. time) for this stat.\n * @property {Number} y - Y-axis value (e.g. value) for this stat.\n */\n\n/**\n * @typedef {Object} Stats - History {StatsSnapshot} over time.\n * @property {Array<StatValue>} STATS_KEYS.FPS\n * @property {Array<StatValue>} STATS_KEYS.REDRAW\n * @property {Array<StatValue>} STATS_KEYS.FRAME_UPDATE\n * @property {Array<StatValue>} STATS_KEYS.LOADER_UPDATE\n * @property {Array<StatValue>} STATS_KEYS.LOADER_ERROR\n * @property {Number} counter\n */\n\n/**\n * Update stats history with a stats snapshot.\n * @param {Stats} stats - Stats history.\n * @param {StatsSnapshot} statsSnapshot - Snapshot used to update stats history.\n */\nconst _updateStats = (stats, statsSnapshot) => {\n  stats.counter += 1;\n\n  for (const statName of Object.values(STATS_KEYS)) {\n    // Drop oldest stat value when we've reached the history size.\n    if (stats[statName].length >= HISTORY_SIZE) {\n      stats[statName] = stats[statName].slice(1);\n    }\n    // Construct new stat value from stats snapshot.\n    const newStatValue = {\n      x: stats.counter,\n      y: (statsSnapshot && statsSnapshot[statName]) || 0\n    };\n    stats[statName].push(newStatValue);\n  }\n  return stats;\n};\n\n/**\n * Component to render the Log Viewer stats. It consumes a stats snapshot.\n * Every time the stats snapshot updates, the stats history is updated and\n * the component renders the updated stats history.\n * @param {Object} props\n * @param {StatsSnapshot} props.statsSnapshot\n */\nexport class LogViewerStats extends React.Component {\n  state = {stats: INITIAL_STATS};\n\n  componentWillUpdate(nextProps) {\n    if (nextProps.statsSnapshot !== this.props.statsSnapshot) {\n      const stats = _updateStats(this.state.stats, nextProps.statsSnapshot);\n      this.setState({stats});\n    }\n  }\n\n  render() {\n    const {counter, ...data} = this.state.stats;\n    const title = this.props.title || DEFAULT_STATS_TITLE;\n    return (\n      <div id=\"stats\" style={STYLES.LOG_VIEWER.STATS}>\n        <MetricCard title={title} description={<Help />} style={STYLES.LOG_VIEWER.METRIC_CARD}>\n          <MetricChart\n            width={350}\n            height={200}\n            data={data}\n            highlightX={counter}\n            getColor={statKey => STATS_COLORS[statKey]}\n            formatTitle={statKey => STATS_NAMES[statKey]}\n          />\n        </MetricCard>\n      </div>\n    );\n  }\n}\n"],"file":"log-viewer-stats.js"}