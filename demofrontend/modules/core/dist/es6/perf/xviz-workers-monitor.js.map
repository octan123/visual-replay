{"version":3,"sources":["../../../src/perf/xviz-workers-monitor.js"],"names":["XVIZ_WORKERS_MONITOR_INTERVAL","XVIZWorkersMonitor","constructor","options","payload","worker","backlog","dropped","status","now","Date","workerId","Object","keys","workers","lastUpdated","isActive","workerStatus","entries","timeDelta","getTime","i","numWorkers","stop","interval","setInterval","cleanup","reportCallback","reset","clearInterval"],"mappings":";AA0BA,SAAQA,6BAAR,QAA4C,aAA5C;AAEA,OAAO,MAAMC,kBAAN,CAAyB;AAO9BC,EAAAA,WAAW,CAACC,OAAD,EAAU;AAAA,oCAcZC,OAAO,IAAI;AAClB,YAAM;AAACC,QAAAA,MAAD;AAASC,QAAAA,OAAT;AAAkBC,QAAAA;AAAlB,UAA6BH,OAAnC;AACA,WAAKI,MAAL,CAAYF,OAAZ,GAAsBA,OAAtB;AACA,WAAKE,MAAL,CAAYD,OAAZ,GAAsBA,OAAtB;AACA,YAAME,GAAG,GAAG,IAAIC,IAAJ,CAASA,IAAI,CAACD,GAAL,EAAT,CAAZ;;AACA,WAAK,MAAME,QAAX,IAAuBC,MAAM,CAACC,IAAP,CAAY,KAAKL,MAAL,CAAYM,OAAxB,CAAvB,EAAyD;AACvD,YAAIT,MAAM,KAAKM,QAAf,EAAyB;AACvB,eAAKH,MAAL,CAAYM,OAAZ,CAAoBH,QAApB,IAAgC;AAACI,YAAAA,WAAW,EAAEN,GAAd;AAAmBO,YAAAA,QAAQ,EAAE;AAA7B,WAAhC;AACD;AACF;AACF,KAxBoB;;AAAA,qCA8BX,MAAM;AACd,YAAMP,GAAG,GAAG,IAAIC,IAAJ,CAASA,IAAI,CAACD,GAAL,EAAT,CAAZ;;AACA,WAAK,MAAM,CAACE,QAAD,EAAWM,YAAX,CAAX,IAAuCL,MAAM,CAACM,OAAP,CAAe,KAAKV,MAAL,CAAYM,OAA3B,CAAvC,EAA4E;AAC1E,YAAIG,YAAY,CAACD,QAAb,IAAyBC,YAAY,CAACF,WAA1C,EAAuD;AACrD,gBAAMI,SAAS,GAAGV,GAAG,CAACW,OAAJ,KAAgBH,YAAY,CAACF,WAAb,CAAyBK,OAAzB,EAAlC;;AACA,cAAID,SAAS,GAAG,CAAC,CAAD,GAAKnB,6BAArB,EAAoD;AAClD,iBAAKQ,MAAL,CAAYM,OAAZ,CAAoBH,QAApB,IAAgC;AAACI,cAAAA,WAAW,EAAEN,GAAd;AAAmBO,cAAAA,QAAQ,EAAE;AAA7B,aAAhC;AACD;AACF;AACF;AACF,KAxCoB;;AAAA,mCA6Cb,MAAM;AACZ,YAAMF,OAAO,GAAG,EAAhB;;AACA,WAAK,IAAIO,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,KAAKC,UAAzB,EAAqCD,CAAC,EAAtC,EAA0C;AACxC,cAAMV,QAAQ,aAAMU,CAAN,cAAW,KAAKC,UAAhB,CAAd;AACAR,QAAAA,OAAO,CAACH,QAAD,CAAP,GAAoB;AAACI,UAAAA,WAAW,EAAE,IAAd;AAAoBC,UAAAA,QAAQ,EAAE;AAA9B,SAApB;AACD;;AACD,WAAKR,MAAL,GAAc;AAACF,QAAAA,OAAO,EAAE,IAAV;AAAgBC,QAAAA,OAAO,EAAE,IAAzB;AAA+BO,QAAAA;AAA/B,OAAd;AACD,KApDoB;;AAAA,mCAyDb,MAAM;AACZ,WAAKS,IAAL;AACA,WAAKC,QAAL,GAAgBC,WAAW,CAAC,MAAM;AAChC,aAAKC,OAAL;AACA,aAAKC,cAAL,CAAoB,KAAKnB,MAAzB;AACD,OAH0B,EAGxBR,6BAHwB,CAA3B;AAID,KA/DoB;;AAAA,kCAoEd,MAAM;AACX,WAAK4B,KAAL;;AACA,UAAI,KAAKJ,QAAT,EAAmB;AACjBK,QAAAA,aAAa,CAAC,KAAKL,QAAN,CAAb;AACD;AACF,KAzEoB;;AACnB,UAAM;AAACF,MAAAA,UAAD;AAAaK,MAAAA;AAAb,QAA+BxB,OAArC;AACA,SAAKmB,UAAL,GAAkBA,UAAlB;AACA,SAAKK,cAAL,GAAsBA,cAAtB;AACA,SAAKH,QAAL,GAAgB,IAAhB;AACA,SAAKI,KAAL;AACD;;AAb6B","sourcesContent":["// Copyright (c) 2019 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n/* global setInterval */\n/* global clearInterval */\n\n/**\n * Keep track of the status of the XVIZ parser worker farm.\n * Decouple workers status update frequency from status report frequency.\n */\nimport {XVIZ_WORKERS_MONITOR_INTERVAL} from './constants';\n\nexport class XVIZWorkersMonitor {\n  /**\n   * constructor\n   * @param options {Object} - Monitor options.\n   * @param options.numWorkers {number} - The number of workers.\n   * @param options.reportCallback {function} - Callback called on each monitor report.\n   */\n  constructor(options) {\n    const {numWorkers, reportCallback} = options;\n    this.numWorkers = numWorkers;\n    this.reportCallback = reportCallback;\n    this.interval = null;\n    this.reset();\n  }\n\n  /**\n   * Update worker farm status.\n   *\n   * @param payload {Object} - Payload of @xviz/parser \"parseStreamMessage\" debug\n   * callback. See https://github.com/uber/xviz/blob/master/docs/api-reference/parse-xviz.md\n   */\n  update = payload => {\n    const {worker, backlog, dropped} = payload;\n    this.status.backlog = backlog;\n    this.status.dropped = dropped;\n    const now = new Date(Date.now());\n    for (const workerId of Object.keys(this.status.workers)) {\n      if (worker === workerId) {\n        this.status.workers[workerId] = {lastUpdated: now, isActive: true};\n      }\n    }\n  };\n\n  /**\n   * If a worker hasn't been active for more than a couple of update intervals,\n   * let's clean up its status and considered it inactive.\n   */\n  cleanup = () => {\n    const now = new Date(Date.now());\n    for (const [workerId, workerStatus] of Object.entries(this.status.workers)) {\n      if (workerStatus.isActive && workerStatus.lastUpdated) {\n        const timeDelta = now.getTime() - workerStatus.lastUpdated.getTime();\n        if (timeDelta > +2 * XVIZ_WORKERS_MONITOR_INTERVAL) {\n          this.status.workers[workerId] = {lastUpdated: now, isActive: false};\n        }\n      }\n    }\n  };\n\n  /**\n   * Reset workers status.\n   */\n  reset = () => {\n    const workers = {};\n    for (let i = 0; i < this.numWorkers; i++) {\n      const workerId = `${i}/${this.numWorkers}`;\n      workers[workerId] = {lastUpdated: null, isActive: false};\n    }\n    this.status = {backlog: 'NA', dropped: 'NA', workers};\n  };\n\n  /**\n   * Start reporting worker farm status.\n   */\n  start = () => {\n    this.stop();\n    this.interval = setInterval(() => {\n      this.cleanup();\n      this.reportCallback(this.status);\n    }, XVIZ_WORKERS_MONITOR_INTERVAL);\n  };\n\n  /**\n   * Stop reporting worker status.\n   */\n  stop = () => {\n    this.reset();\n    if (this.interval) {\n      clearInterval(this.interval);\n    }\n  };\n}\n"],"file":"xviz-workers-monitor.js"}