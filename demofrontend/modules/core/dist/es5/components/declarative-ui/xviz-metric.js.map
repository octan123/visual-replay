{"version":3,"sources":["../../../../src/components/declarative-ui/xviz-metric.js"],"names":["defaultFormatValue","x","Number","isFinite","toFixed","String","XVIZMetricComponent","props","onClick","log","seek","state","timeSeries","_getTimeSeries","nextProps","streams","streamsMetadata","logStreams","setState","streamNames","title","description","startTime","endTime","currentTime","width","height","style","xTicks","yTicks","formatXTick","formatYTick","formatValue","horizontalGridLines","verticalGridLines","getColor","isLoading","timeDomain","missingStreams","length","_onClick","PureComponent","PropTypes","object","oneOfType","string","number","func","arrayOf","isRequired","objectOf","array","margin","left","right","top","bottom","DEFAULT_COLOR_SERIES","getLogState","getCurrentTime","getStreamsMetadata","getStreams","getBufferStartTime","getBufferEndTime","Component"],"mappings":"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","sourcesContent":["// Copyright (c) 2019 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\nimport React, {PureComponent} from 'react';\nimport PropTypes from 'prop-types';\nimport {MetricCard, MetricChart, Spinner} from '@streetscape.gl/monochrome';\n\nimport {DEFAULT_COLOR_SERIES} from './constants';\nimport connectToLog from '../connect';\nimport {getTimeSeries} from '../../utils/metrics-helper';\nimport {MissingDataCard} from './missing-data-card';\n\nconst defaultFormatValue = x => (Number.isFinite(x) ? x.toFixed(3) : String(x));\n\nclass XVIZMetricComponent extends PureComponent {\n  static propTypes = {\n    // User configuration\n    style: PropTypes.object,\n    width: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n    height: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n    getColor: PropTypes.oneOfType([PropTypes.func, PropTypes.string, PropTypes.object]),\n    xTicks: PropTypes.number,\n    yTicks: PropTypes.number,\n    formatXTick: PropTypes.func,\n    formatYTick: PropTypes.func,\n    formatValue: PropTypes.func,\n    horizontalGridLines: PropTypes.number,\n    verticalGridLines: PropTypes.number,\n    onClick: PropTypes.func,\n\n    // From declarative UI metric component\n    streams: PropTypes.arrayOf(PropTypes.string).isRequired,\n    title: PropTypes.string,\n    description: PropTypes.string,\n\n    // From connected log\n    currentTime: PropTypes.number,\n    streamsMetadata: PropTypes.object,\n    logStreams: PropTypes.objectOf(PropTypes.array),\n    startTime: PropTypes.number,\n    endTime: PropTypes.number\n  };\n\n  static defaultProps = {\n    timeSeries: {},\n    width: '100%',\n    height: 160,\n    style: {\n      margin: {left: 45, right: 10, top: 10, bottom: 20}\n    },\n    xTicks: 0,\n    yTicks: 3,\n    formatValue: defaultFormatValue,\n    horizontalGridLines: 3,\n    verticalGridLines: 0,\n    getColor: DEFAULT_COLOR_SERIES\n  };\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      timeSeries: this._getTimeSeries(props)\n    };\n  }\n\n  componentWillReceiveProps(nextProps) {\n    if (\n      this.props.streams !== nextProps.streams ||\n      this.props.streamsMetadata !== nextProps.streamsMetadata ||\n      this.props.logStreams !== nextProps.logStreams\n    ) {\n      this.setState({\n        timeSeries: this._getTimeSeries(nextProps)\n      });\n    }\n  }\n\n  _getTimeSeries(props) {\n    return getTimeSeries({\n      streamNames: props.streams,\n      streamsMetadata: props.streamsMetadata,\n      streams: props.logStreams\n    });\n  }\n\n  _onClick = x => {\n    const {onClick, log} = this.props;\n    if (onClick) {\n      onClick(x);\n    } else if (log) {\n      log.seek(x);\n    }\n  };\n\n  render() {\n    const {\n      title,\n      description,\n      startTime,\n      endTime,\n      currentTime,\n      width,\n      height,\n      style,\n      xTicks,\n      yTicks,\n      formatXTick,\n      formatYTick,\n      formatValue,\n      horizontalGridLines,\n      verticalGridLines,\n      getColor\n    } = this.props;\n    const isLoading = currentTime == null; /* eslint-disable-line no-eq-null, eqeqeq */\n    const timeDomain = Number.isFinite(startTime) ? [startTime, endTime] : null;\n    const {missingStreams} = this.state.timeSeries;\n\n    return (\n      <MetricCard title={title} description={description} isLoading={false} style={style}>\n        <>\n          {missingStreams.length > 0 && (\n            <MissingDataCard style={style} missingData={missingStreams} />\n          )}\n          {isLoading ? (\n            <Spinner />\n          ) : (\n            <MetricChart\n              {...this.state.timeSeries}\n              getColor={getColor}\n              highlightX={currentTime}\n              width={width}\n              height={height}\n              style={style}\n              xTicks={xTicks}\n              yTicks={yTicks}\n              formatXTick={formatXTick}\n              formatYTick={formatYTick}\n              formatValue={formatValue}\n              xDomain={timeDomain}\n              onClick={this._onClick}\n              horizontalGridLines={horizontalGridLines}\n              verticalGridLines={verticalGridLines}\n            />\n          )}\n        </>\n      </MetricCard>\n    );\n  }\n}\n\nconst getLogState = log => ({\n  currentTime: log.getCurrentTime(),\n  streamsMetadata: log.getStreamsMetadata(),\n  logStreams: log.getStreams(),\n  startTime: log.getBufferStartTime(),\n  endTime: log.getBufferEndTime()\n});\n\nexport default connectToLog({getLogState, Component: XVIZMetricComponent});\n"],"file":"xviz-metric.js"}