{"version":3,"sources":["../../../../src/components/log-viewer/object-labels-overlay.js"],"names":["renderDefaultObjectLabel","id","isSelected","ObjectLabelsOverlay","props","object","objectSelection","xvizStyleParser","style","renderObjectLabel","Boolean","styleProps","xvizStyles","labelContent","trackingPoint","objectHeight","streamNames","streamName","feature","getFeature","center","vertices","position","_getCoordinateProps","getStylesheet","getProperty","state","coordinateProps","nextProps","frame","setState","result","streamsMetadata","getTransformMatrix","Object","values","objects","map","_renderPerspectivePopup","PureComponent","PropTypes","func"],"mappings":"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","sourcesContent":["// Copyright (c) 2019 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\n// @flow\nimport React, {PureComponent} from 'react';\nimport PropTypes from 'prop-types';\n\nimport PerspectivePopup from './perspective-popup';\n\nimport {resolveCoordinateTransform, positionToLngLat} from '../../utils/transform';\n\nconst renderDefaultObjectLabel = ({id, isSelected}) => isSelected && <div>ID: {id}</div>;\n\nexport default class ObjectLabelsOverlay extends PureComponent {\n  static propTypes = {\n    objectSelection: PropTypes.object,\n    frame: PropTypes.object,\n    streamsMetadata: PropTypes.object,\n    xvizStyleParser: PropTypes.object,\n\n    renderObjectLabel: PropTypes.func,\n    style: PropTypes.object,\n    getTransformMatrix: PropTypes.func\n  };\n\n  static defaultProps = {\n    objectSelection: {},\n    renderObjectLabel: renderDefaultObjectLabel,\n    style: {}\n  };\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      coordinateProps: {}\n    };\n  }\n\n  componentWillReceiveProps(nextProps) {\n    const {frame} = nextProps;\n\n    if (frame && frame !== this.props.frame) {\n      this.setState({\n        coordinateProps: {}\n      });\n    }\n  }\n\n  _getCoordinateProps(streamName) {\n    const {coordinateProps} = this.state;\n    let result = coordinateProps[streamName];\n\n    if (result) {\n      return result;\n    }\n\n    const {frame, streamsMetadata, getTransformMatrix} = this.props;\n    result = resolveCoordinateTransform(\n      frame,\n      streamName,\n      streamsMetadata[streamName],\n      getTransformMatrix\n    );\n    // cache calculated coordinate props by stream name\n    coordinateProps[streamName] = result;\n\n    return result;\n  }\n\n  _renderPerspectivePopup = object => {\n    const {objectSelection, xvizStyleParser, style, renderObjectLabel} = this.props;\n\n    const isSelected = Boolean(objectSelection[object.id]);\n    const styleProps = {\n      id: object.id,\n      isSelected,\n      object,\n      xvizStyles: xvizStyleParser\n    };\n\n    const labelContent = renderObjectLabel(styleProps);\n\n    if (!labelContent) {\n      return null;\n    }\n\n    let trackingPoint;\n    let objectHeight;\n\n    for (const streamName of object.streamNames) {\n      const feature = object.getFeature(streamName);\n      if (!trackingPoint && (feature.center || feature.vertices)) {\n        trackingPoint = positionToLngLat(object.position, this._getCoordinateProps(streamName));\n      }\n      if (!objectHeight && feature.vertices) {\n        objectHeight = xvizStyleParser.getStylesheet(streamName).getProperty('height', feature);\n      }\n    }\n\n    trackingPoint[2] += objectHeight || 0;\n\n    return (\n      <PerspectivePopup\n        key={object.id}\n        longitude={trackingPoint[0]}\n        latitude={trackingPoint[1]}\n        altitude={trackingPoint[2]}\n        anchor=\"bottom-left\"\n        dynamicPosition={true}\n        styleProps={styleProps}\n        style={style}\n        sortByDepth={true}\n        closeButton={false}\n        closeOnClick={false}\n      >\n        {labelContent}\n      </PerspectivePopup>\n    );\n  };\n\n  render() {\n    const {frame, renderObjectLabel} = this.props;\n\n    if (!frame || !renderObjectLabel) {\n      return null;\n    }\n\n    return Object.values(frame.objects).map(this._renderPerspectivePopup);\n  }\n}\n"],"file":"object-labels-overlay.js"}