{"version":3,"sources":["../../../src/layers/xviz-layer.js"],"names":["LAYER_TYPES","SCATTERPLOT","PATH","POINTCLOUD","STADIUM","POLYGON","TEXT","XVIZ_TO_LAYER_TYPE","points2d","points3d","point2d","circle2d","line2d","path2d","polygon2d","point","circle","polyline","polygon","text","stadium","STYLE_TO_LAYER_PROP","opacity","radius_min_pixels","radius_max_pixels","radius","stroked","filled","stroke_width_min_pixels","stroke_width_max_pixels","stroke_width","stroke_color","fill_color","radius_pixels","point_color_mode","point_color_domain","extruded","height","font_family","font_weight","text_size","text_rotation","text_anchor","text_baseline","LAYER_HANDLERS","layerType","layerClass","ScatterplotLayer","preprocessData","props","data","vertices","Array","isArray","processedData","reduce","arr","multiPoints","forEach","pt","push","getLayerTypeProps","xvizLayerProps","layerProps","updateTriggers","getPosition","f","center","getFillColor","useSemanticColor","PathLayer","getPath","start","end","rounded","getColor","PointCloudLayer","state","length","points","attributes","colors","vehicleRelativeTransform","p","PolygonLayer","lightSettings","wireframe","getPolygon","getLineColor","TextLayer","getText","EMPTY_OBJECT","getInlineProperty","context","propertyName","objectState","inlineProp","undefined","getStylesheetProperty","style","getProperty","XVIZObject","get","id","altPropertyName","property","disableInlineStyling","getPropertyDefault","toLowerCase","XVIZLayer","styleToLayerProp","stylePropName","layerPropName","isAccessor","startsWith","dependencies","getPropertyDependencies","_getProperty","objectStates","key","trigger","_getPropertyAccessor","stateName","type","oldProps","changeFlags","dataChanged","dataType","_getLayerType","layerHandler","setState","_getDefaultLayerProps","linkTitle","streamName","streamMetadata","objectType","_getLayerProps","forwardProps","customXvizLayerMatch","customXVIZLayers","find","streamMatch","primitiveLayerProps","primitive","parentLayerHandler","LayerClass","getSubLayerProps","getSubProps","CompositeLayer","layerName"],"mappings":"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","sourcesContent":["// Copyright (c) 2019 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\n/* eslint-disable camelcase */\nimport {CompositeLayer} from '@deck.gl/core';\nimport {ScatterplotLayer, PathLayer, PolygonLayer, TextLayer} from '@deck.gl/layers';\nimport PointCloudLayer from './point-cloud-layer/point-cloud-layer';\n// TODO/ib - Uncomment to enable binary/flat polygon arrays\n// import PathLayer from './binary-path-layer/binary-path-layer';\n// import PolygonLayer from './binary-polygon-layer/binary-polygon-layer';\n\nimport {XVIZObject} from '@xviz/parser';\n\nimport deepExtend from 'lodash.merge';\n\n// not sure if necessary, just to have enums for existing primitives\nconst LAYER_TYPES = {\n  SCATTERPLOT: 'scatterplot',\n  PATH: 'path',\n  POINTCLOUD: 'pointcloud',\n  STADIUM: 'stadium',\n  POLYGON: 'polygon',\n  TEXT: 'text'\n};\n\nconst XVIZ_TO_LAYER_TYPE = {\n  // V1\n  points2d: LAYER_TYPES.SCATTERPLOT,\n  points3d: LAYER_TYPES.POINTCLOUD,\n  point2d: LAYER_TYPES.SCATTERPLOT,\n  circle2d: LAYER_TYPES.SCATTERPLOT,\n  line2d: LAYER_TYPES.PATH,\n  path2d: LAYER_TYPES.PATH,\n  polygon2d: LAYER_TYPES.POLYGON,\n\n  // V2\n  point: LAYER_TYPES.POINTCLOUD,\n  circle: LAYER_TYPES.SCATTERPLOT,\n  polyline: LAYER_TYPES.PATH,\n  polygon: LAYER_TYPES.POLYGON,\n  text: LAYER_TYPES.TEXT,\n  stadium: LAYER_TYPES.STADIUM\n};\n\nconst STYLE_TO_LAYER_PROP = {\n  [LAYER_TYPES.SCATTERPLOT]: {\n    opacity: 'opacity',\n    radius_min_pixels: 'radiusMinPixels',\n    radius_max_pixels: 'radiusMaxPixels',\n    radius: 'getRadius',\n    stroked: 'stroked',\n    filled: 'filled',\n    stroke_width_min_pixels: 'lineWidthMinPixels',\n    stroke_width_max_pixels: 'lineWidthMaxPixels',\n    stroke_width: 'getLineWidth',\n    stroke_color: 'getLineColor',\n    fill_color: 'getFillColor'\n  },\n  [LAYER_TYPES.POINTCLOUD]: {\n    opacity: 'opacity',\n    radius_pixels: 'pointSize',\n    fill_color: 'getColor',\n    point_color_mode: 'colorMode',\n    point_color_domain: 'colorDomain'\n  },\n  [LAYER_TYPES.PATH]: {\n    opacity: 'opacity',\n    stroke_width_min_pixels: 'widthMinPixels',\n    stroke_width_max_pixels: 'widthMaxPixels',\n    stroke_color: 'getColor',\n    stroke_width: 'getWidth'\n  },\n  [LAYER_TYPES.STADIUM]: {\n    opacity: 'opacity',\n    radius_min_pixels: 'widthMinPixels',\n    radius_max_pixels: 'widthMaxPixels',\n    fill_color: 'getColor',\n    radius: 'getWidth'\n  },\n  [LAYER_TYPES.POLYGON]: {\n    opacity: 'opacity',\n    stroked: 'stroked',\n    filled: 'filled',\n    extruded: 'extruded',\n    stroke_color: 'getLineColor',\n    stroke_width: 'getLineWidth',\n    stroke_width_min_pixels: 'lineWidthMinPixels',\n    stroke_width_max_pixels: 'lineWidthMaxPixels',\n    fill_color: 'getFillColor',\n    height: 'getElevation'\n  },\n  [LAYER_TYPES.TEXT]: {\n    opacity: 'opacity',\n    fill_color: 'getColor',\n    font_family: 'fontFamily',\n    font_weight: 'fontWeight',\n    text_size: 'getSize',\n    text_rotation: 'getAngle',\n    text_anchor: 'getTextAnchor',\n    text_baseline: 'getAlignmentBaseline'\n  }\n};\n\n// Defines the way that each primitive layer type is handled in the application\nconst LAYER_HANDLERS = {\n  [LAYER_TYPES.SCATTERPLOT]: {\n    layerType: LAYER_TYPES.SCATTERPLOT,\n    layerClass: ScatterplotLayer,\n    // returns data to hold in state\n    // updateState calls `getState({data: preprocessData})`\n    preprocessData: props => {\n      const {data} = props;\n      if (data[0].vertices && Array.isArray(data[0].vertices[0])) {\n        const processedData = data.reduce((arr, multiPoints) => {\n          multiPoints.vertices.forEach(pt => {\n            arr.push({...multiPoints, vertices: pt});\n          });\n          return arr;\n        }, []);\n        return processedData;\n      }\n      return data;\n    },\n    getLayerTypeProps: ({xvizLayerProps, layerProps}) => {\n      const {updateTriggers} = layerProps;\n      return {\n        // `vertices` is used xviz V1 and `center` is used by xviz V2\n        getPosition: f => f.vertices || f.center,\n        updateTriggers: deepExtend(updateTriggers, {\n          getFillColor: {useSemanticColor: xvizLayerProps.useSemanticColor}\n        })\n      };\n    }\n  },\n  [LAYER_TYPES.STADIUM]: {\n    layerType: LAYER_TYPES.STADIUM,\n    layerClass: PathLayer,\n    getLayerTypeProps: ({xvizLayerProps, layerProps}) => {\n      const {updateTriggers} = layerProps;\n      return {\n        getPath: f => [f.start, f.end],\n        rounded: true,\n        updateTriggers: deepExtend(updateTriggers, {\n          getColor: {useSemanticColor: xvizLayerProps.useSemanticColor}\n        })\n      };\n    }\n  },\n  [LAYER_TYPES.POINTCLOUD]: {\n    layerType: LAYER_TYPES.POINTCLOUD,\n    layerClass: PointCloudLayer,\n    getLayerTypeProps: ({xvizLayerProps, state}) => {\n      const {data} = state;\n      return {\n        data: {\n          length: data[0].points.length / 3,\n          attributes: {\n            getPosition: data[0].points,\n            getColor: data[0].colors\n          }\n        },\n        vehicleRelativeTransform: xvizLayerProps.vehicleRelativeTransform,\n        getPosition: p => p\n      };\n    }\n  },\n  [LAYER_TYPES.PATH]: {\n    layerType: LAYER_TYPES.PATH,\n    layerClass: PathLayer,\n    getLayerTypeProps: ({xvizLayerProps, layerProps}) => {\n      const {updateTriggers} = layerProps;\n      return {\n        getPath: f => f.vertices,\n        updateTriggers: deepExtend(updateTriggers, {\n          getColor: {useSemanticColor: xvizLayerProps.useSemanticColor}\n        })\n      };\n    }\n  },\n  [LAYER_TYPES.POLYGON]: {\n    layerType: LAYER_TYPES.POLYGON,\n    layerClass: PolygonLayer,\n    getLayerTypeProps: ({xvizLayerProps, layerProps}) => {\n      const {updateTriggers} = layerProps;\n      const {lightSettings, useSemanticColor, opacity} = xvizLayerProps;\n      const {stroked} = layerProps;\n      return {\n        opacity: opacity || 1,\n        lightSettings,\n        wireframe: stroked,\n        getPolygon: f => f.vertices,\n        updateTriggers: deepExtend(updateTriggers, {\n          getLineColor: {useSemanticColor},\n          getFillColor: {useSemanticColor}\n        })\n      };\n    }\n  },\n  [LAYER_TYPES.TEXT]: {\n    layerType: LAYER_TYPES.TEXT,\n    layerClass: TextLayer,\n    getLayerTypeProps: ({xvizLayerProps, layerProps}) => {\n      const {updateTriggers} = layerProps;\n      const {useSemanticColor} = xvizLayerProps;\n      return {\n        getText: f => f.text,\n        updateTriggers: deepExtend(updateTriggers, {\n          getColor: {useSemanticColor}\n        })\n      };\n    }\n  }\n};\n\nconst EMPTY_OBJECT = {};\n\n// Access V1 style properties\nconst getInlineProperty = (context, propertyName, objectState) => {\n  const inlineProp = objectState[propertyName];\n  return inlineProp === undefined ? null : inlineProp;\n};\nconst getStylesheetProperty = (context, propertyName, objectState) =>\n  context.style.getProperty(propertyName, objectState);\n\n// Fetch layer property from XVIZ Stylesheet or object\n//\n// Current resolution of property to style attribute has to deal with\n//  - stylesheets taking precedence over inline style attributes\n//  - style attribute names used in the application do not match those of\n//    XVIZ v1\n//\n// TODO(twojtasz): Once XVIZ v1 is removed this logic can be simplified\n// by removing the `altPropertyName` and changing the order of resolution\n// to be inline, stylesheet, then default.\n//\n/* eslint-disable complexity */\nfunction getProperty(context, propertyName, f = EMPTY_OBJECT) {\n  let objectState = f;\n\n  // Handle XVIZ v1 color override where our semantic color mapping\n  // differs from current OCS colors.  In XVIZ v2 we should be aligned.\n  if (context.useSemanticColor) {\n    switch (propertyName) {\n      case 'stroke_color':\n      case 'fill_color':\n        objectState = XVIZObject.get(f.id) || f;\n        break;\n\n      default:\n      // ignore\n    }\n  }\n\n  // Handle XVIZ v1 style property name mismatches and\n  // setup validation function based on property name.\n  let altPropertyName = null;\n\n  switch (propertyName) {\n    case 'stroke_color':\n    case 'fill_color':\n      altPropertyName = 'color';\n      break;\n    case 'stroke_width':\n      altPropertyName = 'thickness';\n      break;\n    case 'radius':\n      // v2 circle inline style\n      if (f.radius) {\n        return f.radius;\n      }\n      break;\n    default:\n      break;\n  }\n\n  // 1a. Property from inline style (v2) or stylesheet\n  let property = getStylesheetProperty(context, propertyName, objectState);\n\n  // 1b. Alt property from inline style (v2) or stylesheet\n  if (property === null && altPropertyName) {\n    property = getStylesheetProperty(context, altPropertyName, objectState);\n  }\n\n  // Backward compatibility\n  if (property === null && !context.disableInlineStyling) {\n    // 2a. Property from inline style (v1)\n    property = getInlineProperty(context, propertyName, objectState);\n\n    // 2b. Alt property from inline style (v1)\n    if (property === null && altPropertyName) {\n      property = getInlineProperty(context, altPropertyName, objectState);\n    }\n  }\n\n  // 3. Property from default style\n  if (property === null) {\n    property = context.style.getPropertyDefault(propertyName);\n  }\n\n  if (propertyName === 'text_anchor' || propertyName === 'text_baseline') {\n    // These XVIZ enumerations map to Deck.gl as lowercase strings\n    property = property.toLowerCase();\n  }\n\n  return property;\n}\n/* eslint-enable complexity */\n\nexport default class XVIZLayer extends CompositeLayer {\n  _getProperty(propertyName) {\n    return getProperty(this.props, propertyName);\n  }\n\n  _getPropertyAccessor(propertyName) {\n    return f => getProperty(this.props, propertyName, f);\n  }\n\n  // These props are persistent unless data type and stylesheet change\n  _getDefaultLayerProps(style, styleToLayerProp) {\n    const layerProps = {\n      updateTriggers: {}\n    };\n\n    for (const stylePropName in styleToLayerProp) {\n      const layerPropName = styleToLayerProp[stylePropName];\n      const isAccessor = layerPropName.startsWith('get');\n      if (isAccessor) {\n        layerProps.updateTriggers[layerPropName] = {\n          style: stylePropName,\n          dependencies: style.getPropertyDependencies(stylePropName)\n        };\n      } else {\n        layerProps[layerPropName] = this._getProperty(stylePropName);\n      }\n    }\n\n    return layerProps;\n  }\n\n  _getLayerProps() {\n    const {objectStates} = this.props;\n    const {layerProps} = this.state;\n    const {updateTriggers} = layerProps;\n\n    for (const key in updateTriggers) {\n      const trigger = updateTriggers[key];\n\n      layerProps[key] = this._getPropertyAccessor(trigger.style);\n\n      updateTriggers[key] = {...trigger};\n      trigger.dependencies.forEach(stateName => {\n        updateTriggers[key][stateName] = objectStates[stateName];\n      });\n    }\n\n    return layerProps;\n  }\n\n  _getLayerType(data) {\n    if (data.length > 0) {\n      return data[0].type;\n    }\n    return null;\n  }\n\n  updateState({props, oldProps, changeFlags}) {\n    let {type} = this.state;\n\n    if (changeFlags.dataChanged) {\n      // Pre-process data\n      let data = props.data;\n      const dataType = this._getLayerType(data);\n      type = XVIZ_TO_LAYER_TYPE[dataType];\n      // Currently, preprocessing of data is not exposed to customXVIZLayers\n      // It's only available through internal primitives\n      const layerHandler = LAYER_HANDLERS[type];\n      if (layerHandler && layerHandler.preprocessData) {\n        data = layerHandler.preprocessData(props);\n      }\n\n      this.setState({data});\n    }\n\n    if (type !== this.state.type || props.style !== oldProps.style) {\n      const styleToLayerProp = STYLE_TO_LAYER_PROP[type];\n      const layerProps = this._getDefaultLayerProps(props.style, styleToLayerProp);\n      this.setState({type, layerProps});\n    }\n  }\n\n  renderLayers() {\n    const {type, data} = this.state;\n\n    if (!type) {\n      return null;\n    }\n\n    const {linkTitle, streamName, streamMetadata, objectType} = this.props;\n    const layerProps = this._getLayerProps();\n    const forwardProps = {\n      linkTitle,\n      streamName,\n      objectType\n    };\n    // Only allows for single match of a layer to a stream\n    const customXvizLayerMatch = this.props.customXVIZLayers.find(({streamMatch}) =>\n      streamMatch(streamName, streamMetadata)\n    );\n\n    if (customXvizLayerMatch) {\n      let primitiveLayerProps = {};\n      const layerType = XVIZ_TO_LAYER_TYPE[customXvizLayerMatch.primitive];\n      const parentLayerHandler = LAYER_HANDLERS[layerType];\n      if (parentLayerHandler) {\n        primitiveLayerProps = parentLayerHandler.getLayerTypeProps({\n          xvizLayerProps: this.props,\n          layerProps,\n          state: this.state\n        });\n      }\n\n      const LayerClass = customXvizLayerMatch.layerClass || parentLayerHandler?.layerClass;\n      return new LayerClass(\n        forwardProps,\n        layerProps,\n        this.getSubLayerProps({\n          id: `${layerType ? layerType : ''}-${customXvizLayerMatch.id}`,\n          data,\n          ...primitiveLayerProps,\n          ...customXvizLayerMatch.getSubProps({\n            xvizLayerProps: this.props,\n            primitiveLayerProps,\n            state: this.state\n          })\n        })\n      );\n    }\n    if (!LAYER_HANDLERS[type]) {\n      return null;\n    }\n\n    const {layerClass: LayerClass, getLayerTypeProps} = LAYER_HANDLERS[type];\n    return new LayerClass(\n      forwardProps,\n      layerProps,\n      this.getSubLayerProps({\n        id: type,\n        data,\n        ...getLayerTypeProps({\n          xvizLayerProps: this.props,\n          layerProps,\n          state: this.state\n        })\n      })\n    );\n  }\n}\n\nXVIZLayer.layerName = 'XVIZLayer';\n"],"file":"xviz-layer.js"}