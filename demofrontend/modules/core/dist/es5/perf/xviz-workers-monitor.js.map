{"version":3,"sources":["../../../src/perf/xviz-workers-monitor.js"],"names":["XVIZWorkersMonitor","options","payload","worker","backlog","dropped","status","now","Date","Object","keys","workers","workerId","lastUpdated","isActive","entries","workerStatus","timeDelta","getTime","XVIZ_WORKERS_MONITOR_INTERVAL","i","numWorkers","stop","interval","setInterval","cleanup","reportCallback","reset","clearInterval"],"mappings":"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","sourcesContent":["// Copyright (c) 2019 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n/* global setInterval */\n/* global clearInterval */\n\n/**\n * Keep track of the status of the XVIZ parser worker farm.\n * Decouple workers status update frequency from status report frequency.\n */\nimport {XVIZ_WORKERS_MONITOR_INTERVAL} from './constants';\n\nexport class XVIZWorkersMonitor {\n  /**\n   * constructor\n   * @param options {Object} - Monitor options.\n   * @param options.numWorkers {number} - The number of workers.\n   * @param options.reportCallback {function} - Callback called on each monitor report.\n   */\n  constructor(options) {\n    const {numWorkers, reportCallback} = options;\n    this.numWorkers = numWorkers;\n    this.reportCallback = reportCallback;\n    this.interval = null;\n    this.reset();\n  }\n\n  /**\n   * Update worker farm status.\n   *\n   * @param payload {Object} - Payload of @xviz/parser \"parseStreamMessage\" debug\n   * callback. See https://github.com/uber/xviz/blob/master/docs/api-reference/parse-xviz.md\n   */\n  update = payload => {\n    const {worker, backlog, dropped} = payload;\n    this.status.backlog = backlog;\n    this.status.dropped = dropped;\n    const now = new Date(Date.now());\n    for (const workerId of Object.keys(this.status.workers)) {\n      if (worker === workerId) {\n        this.status.workers[workerId] = {lastUpdated: now, isActive: true};\n      }\n    }\n  };\n\n  /**\n   * If a worker hasn't been active for more than a couple of update intervals,\n   * let's clean up its status and considered it inactive.\n   */\n  cleanup = () => {\n    const now = new Date(Date.now());\n    for (const [workerId, workerStatus] of Object.entries(this.status.workers)) {\n      if (workerStatus.isActive && workerStatus.lastUpdated) {\n        const timeDelta = now.getTime() - workerStatus.lastUpdated.getTime();\n        if (timeDelta > +2 * XVIZ_WORKERS_MONITOR_INTERVAL) {\n          this.status.workers[workerId] = {lastUpdated: now, isActive: false};\n        }\n      }\n    }\n  };\n\n  /**\n   * Reset workers status.\n   */\n  reset = () => {\n    const workers = {};\n    for (let i = 0; i < this.numWorkers; i++) {\n      const workerId = `${i}/${this.numWorkers}`;\n      workers[workerId] = {lastUpdated: null, isActive: false};\n    }\n    this.status = {backlog: 'NA', dropped: 'NA', workers};\n  };\n\n  /**\n   * Start reporting worker farm status.\n   */\n  start = () => {\n    this.stop();\n    this.interval = setInterval(() => {\n      this.cleanup();\n      this.reportCallback(this.status);\n    }, XVIZ_WORKERS_MONITOR_INTERVAL);\n  };\n\n  /**\n   * Stop reporting worker status.\n   */\n  stop = () => {\n    this.reset();\n    if (this.interval) {\n      clearInterval(this.interval);\n    }\n  };\n}\n"],"file":"xviz-workers-monitor.js"}