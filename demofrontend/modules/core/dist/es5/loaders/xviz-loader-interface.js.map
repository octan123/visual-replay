{"version":3,"sources":["../../../src/loaders/xviz-loader-interface.js"],"names":["XVIZLoaderInterface","options","message","type","LOG_STREAM_MESSAGE","METADATA","_onXVIZMetadata","emit","TIMESLICE","_onXVIZTimeslice","DONE","error","get","_getDataVersion","_getDataByStream","_getBufferedTimeRanges","getStreamSettings","_getStreams","streamSettings","streams","result","streamName","DYNAMIC_STREAM_METADATA","getMetadata","_getStreamsMetadata","metadata","streamsMetadata","Object","assign","getCurrentTime","_getBufferStartTime","_getBufferEndTime","_getLogStartTime","_getLogEndTime","getLookAhead","timestamp","lookAhead","logSynchronizer","Number","isFinite","setTime","setLookAheadTimeOffset","getCurrentFrame","_debug","debug","callbacks","eventType","cb","push","index","indexOf","splice","eventArgs","stats","incrementCount","startTime","getLogStartTime","endTime","getLogEndTime","set","streamBuffer","setCurrentTime","settings","keys","length","Error","StreamSynchronizer","newTimestamp","start_time","seek","timeslice","oldStreamCount","streamCount","bufferUpdated","insert","_bumpDataVersion","__metadata","range","getLoadedTimeRange","start","end","TIME_WINDOW","end_time","PlayableLoaderInterface"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;AAoBA;;AACA;;AAEA;;AACA;;AACA;;;;;;;;;;;;;;;;IAGqBA,mB;;;;;AACnB,iCAA0B;AAAA;;AAAA,QAAdC,OAAc,uEAAJ,EAAI;AAAA;AACxB;AADwB,sGAwCV,UAAAC,OAAO,EAAI;AACzB,cAAQA,OAAO,CAACC,IAAhB;AACE,aAAKC,2BAAmBC,QAAxB;AACE,gBAAKC,eAAL,CAAqBJ,OAArB;;AACA,gBAAKK,IAAL,CAAU,OAAV,EAAmBL,OAAnB;;AACA;;AAEF,aAAKE,2BAAmBI,SAAxB;AACE,gBAAKC,gBAAL,CAAsBP,OAAtB;;AACA,gBAAKK,IAAL,CAAU,QAAV,EAAoBL,OAApB;;AACA;;AAEF,aAAKE,2BAAmBM,IAAxB;AACE,gBAAKH,IAAL,CAAU,QAAV,EAAoBL,OAApB;;AACA;;AAEF;AACE,gBAAKK,IAAL,CAAU,OAAV,EAAmBL,OAAnB;;AAhBJ;AAkBD,KA3DyB;AAAA,gGA6DhB,UAAAS,KAAK,EAAI;AACjB,YAAKJ,IAAL,CAAU,OAAV,EAAmBI,KAAnB;AACD,KA/DyB;AAAA,oGA0FZ;AAAA,aAAM,MAAKC,GAAL,CAAS,UAAT,CAAN;AAAA,KA1FY;AAAA,0GA4FN;AAAA,aAAM,MAAKA,GAAL,CAAS,gBAAT,CAAN;AAAA,KA5FM;AAAA,4GA8FJ;AAAA,aAAM,MAAKA,GAAL,CAAS,iBAAT,CAAN;AAAA,KA9FI;AAAA,oGAgGZ,gFAAqB,MAAKC,eAA1B,EAA2C;AAAA,aAAM,MAAKC,gBAAL,EAAN;AAAA,KAA3C,CAhGY;AAAA,8GAkGF,gFAAqB,MAAKD,eAA1B,EAA2C;AAAA,aACjE,MAAKE,sBAAL,EADiE;AAAA,KAA3C,CAlGE;AAAA,mGAsGb,gFAEX,CAAC,MAAKC,iBAAN,EAAyB,MAAKC,WAA9B,EAA2C,MAAKJ,eAAhD,CAFW,EAGX,UAACK,cAAD,EAAiBC,OAAjB,EAA6B;AAC3B,UAAI,CAACD,cAAD,IAAmB,CAACC,OAAxB,EAAiC;AAC/B,eAAOA,OAAP;AACD;;AACD,UAAMC,MAAM,GAAG,EAAf;;AACA,WAAK,IAAMC,UAAX,IAAyBF,OAAzB,EAAkC;AAChC,YAAID,cAAc,CAACG,UAAD,CAAlB,EAAgC;AAC9BD,UAAAA,MAAM,CAACC,UAAD,CAAN,GAAqBF,OAAO,CAACE,UAAD,CAA5B;AACD;AACF;;AACD,aAAOD,MAAP;AACD,KAdU,CAtGa;AAAA,2GAuHL,6BAAgBE,uBAAhB,GACjB,gFAEE,CAAC,MAAKC,WAAN,EAAmB,MAAKC,mBAAxB,CAFF,EAGE,UAACC,QAAD,EAAWC,eAAX,EAA+B;AAC7B,aAAOC,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkBF,eAAlB,EAAmCD,QAAQ,IAAIA,QAAQ,CAACN,OAAxD,CAAP;AACD,KALH,CADiB,GAQjB,gFAAqB,MAAKI,WAA1B,EAAuC,UAAAE,QAAQ;AAAA,aAAKA,QAAQ,IAAIA,QAAQ,CAACN,OAAtB,IAAkC,EAAtC;AAAA,KAA/C,CA/HsB;AAAA,2GAiIL,gFAAqB,MAAKU,cAA1B,EAA0C;AAAA,aAAM,MAAKC,mBAAL,EAAN;AAAA,KAA1C,CAjIK;AAAA,yGAkIP,gFAAqB,MAAKD,cAA1B,EAA0C;AAAA,aAAM,MAAKE,iBAAL,EAAN;AAAA,KAA1C,CAlIO;AAAA,wGAoIR,gFAAqB,MAAKR,WAA1B,EAAuC,UAAAE,QAAQ;AAAA,aAC/D,MAAKO,gBAAL,CAAsBP,QAAtB,CAD+D;AAAA,KAA/C,CApIQ;AAAA,sGAuIV,gFAAqB,MAAKF,WAA1B,EAAuC,UAAAE,QAAQ;AAAA,aAAI,MAAKQ,cAAL,CAAoBR,QAApB,CAAJ;AAAA,KAA/C,CAvIU;AAAA,wGAyIR,gFAEhB,CAAC,MAAKT,iBAAN,EAAyB,MAAKa,cAA9B,EAA8C,MAAKK,YAAnD,EAAiE,MAAKrB,eAAtE,CAFgB,EAKhB,UAACK,cAAD,EAAiBiB,SAAjB,EAA4BC,SAA5B,EAA0C;AAAA;AAAA,UACjCC,eADiC,yBACjCA,eADiC;;AAExC,UAAIA,eAAe,IAAIC,MAAM,CAACC,QAAP,CAAgBJ,SAAhB,CAAvB,EAAmD;AACjDE,QAAAA,eAAe,CAACG,OAAhB,CAAwBL,SAAxB;AACAE,QAAAA,eAAe,CAACI,sBAAhB,CAAuCL,SAAvC;AACA,eAAOC,eAAe,CAACK,eAAhB,CAAgCxB,cAAhC,CAAP;AACD;;AACD,aAAO,IAAP;AACD,KAbe,CAzIQ;AAExB,UAAKjB,OAAL,GAAeA,OAAf;;AACA,UAAK0C,MAAL,GAAc1C,OAAO,CAAC2C,KAAR,IAAkB,YAAM,CAAE,CAAxC;;AACA,UAAKC,SAAL,GAAiB,EAAjB;AAJwB;AAKzB;;;;uBAQEC,S,EAAWC,E,EAAI;AAChB,WAAKF,SAAL,CAAeC,SAAf,IAA4B,KAAKD,SAAL,CAAeC,SAAf,KAA6B,EAAzD;AACA,WAAKD,SAAL,CAAeC,SAAf,EAA0BE,IAA1B,CAA+BD,EAA/B;AACA,aAAO,IAAP;AACD;;;wBAEGD,S,EAAWC,E,EAAI;AACjB,UAAMF,SAAS,GAAG,KAAKA,SAAL,CAAeC,SAAf,CAAlB;;AACA,UAAID,SAAJ,EAAe;AACb,YAAMI,KAAK,GAAGJ,SAAS,CAACK,OAAV,CAAkBH,EAAlB,CAAd;;AACA,YAAIE,KAAK,IAAI,CAAb,EAAgB;AACdJ,UAAAA,SAAS,CAACM,MAAV,CAAiBF,KAAjB,EAAwB,CAAxB;AACD;AACF;;AACD,aAAO,IAAP;AACD;;;yBAEIH,S,EAAWM,S,EAAW;AACzB,UAAMP,SAAS,GAAG,KAAKA,SAAL,CAAeC,SAAf,CAAlB;;AACA,UAAID,SAAJ,EAAe;AAAA,mDACIA,SADJ;AAAA;;AAAA;AACb,8DAA4B;AAAA,gBAAjBE,EAAiB;AAC1BA,YAAAA,EAAE,CAACD,SAAD,EAAYM,SAAZ,CAAF;AACD;AAHY;AAAA;AAAA;AAAA;AAAA;AAId;;AACDC,wBAAMzC,GAAN,kBAAoBkC,SAApB,GAAiCQ,cAAjC;AACD;;;yBA2BInB,S,EAAW;AACd,UAAMV,QAAQ,GAAG,KAAKF,WAAL,EAAjB;;AAEA,UAAIE,QAAJ,EAAc;AACZ,YAAM8B,SAAS,GAAG,KAAKC,eAAL,EAAlB;AACA,YAAMC,OAAO,GAAG,KAAKC,aAAL,EAAhB;;AACA,YAAIpB,MAAM,CAACC,QAAP,CAAgBgB,SAAhB,KAA8BjB,MAAM,CAACC,QAAP,CAAgBkB,OAAhB,CAAlC,EAA4D;AAC1DtB,UAAAA,SAAS,GAAG,iBAAMA,SAAN,EAAiBoB,SAAjB,EAA4BE,OAA5B,CAAZ;AACD;AACF;;AAED,WAAKE,GAAL,CAAS,WAAT,EAAsBxB,SAAtB;AAIA,WAAKyB,YAAL,CAAkBC,cAAlB,CAAiC1B,SAAjC;AACD;;;yCAEoB2B,Q,EAAU;AAC7B,UAAM5C,cAAc,GAAG,KAAKN,GAAL,CAAS,gBAAT,CAAvB;AACA,WAAK+C,GAAL,CAAS,gBAAT,kCAA+BzC,cAA/B,GAAkD4C,QAAlD;AACD;;;oCAqEerC,Q,EAAU;AACxB,WAAKkC,GAAL,CAAS,UAAT,EAAqBlC,QAArB;;AACA,UAAIA,QAAQ,CAACN,OAAT,IAAoBQ,MAAM,CAACoC,IAAP,CAAYtC,QAAQ,CAACN,OAArB,EAA8B6C,MAA9B,GAAuC,CAA/D,EAAkE;AAChE,aAAKL,GAAL,CAAS,gBAAT,EAA2BlC,QAAQ,CAACN,OAApC;AACD;;AAED,UAAI,CAAC,KAAKyC,YAAV,EAAwB;AACtB,cAAM,IAAIK,KAAJ,CAAU,yBAAV,CAAN;AACD;;AACD,WAAK5B,eAAL,GAAuB,KAAKA,eAAL,IAAwB,IAAI6B,0BAAJ,CAAuB,KAAKN,YAA5B,CAA/C;AAEA,UAAMzB,SAAS,GAAG,KAAKvB,GAAL,CAAS,WAAT,CAAlB;AACA,UAAMuD,YAAY,GAAG7B,MAAM,CAACC,QAAP,CAAgBJ,SAAhB,IAA6BA,SAA7B,GAAyCV,QAAQ,CAAC2C,UAAvE;;AACA,UAAI9B,MAAM,CAACC,QAAP,CAAgB4B,YAAhB,CAAJ,EAAmC;AACjC,aAAKE,IAAL,CAAUF,YAAV;AACD;AACF;;;qCAEgBG,S,EAAW;AAC1B,UAAMC,cAAc,GAAG,KAAKX,YAAL,CAAkBY,WAAzC;AACA,UAAMC,aAAa,GAAG,KAAKb,YAAL,CAAkBc,MAAlB,CAAyBJ,SAAzB,CAAtB;;AACA,UAAIG,aAAJ,EAAmB;AACjB,aAAKE,gBAAL;AACD;;AAED,UAAI,6BAAgBrD,uBAAhB,IAA2C,KAAKsC,YAAL,CAAkBY,WAAlB,GAAgCD,cAA/E,EAA+F;AAC7F,YAAM7C,eAAe,GAAG,EAAxB;AACA,YAAMR,cAAc,GAAG,KAAKN,GAAL,CAAS,gBAAT,CAAvB;;AAEA,aAAK,IAAMS,UAAX,IAAyBiD,SAAS,CAACnD,OAAnC,EAA4C;AAC1CO,UAAAA,eAAe,CAACL,UAAD,CAAf,GAA8BiD,SAAS,CAACnD,OAAV,CAAkBE,UAAlB,EAA8BuD,UAA5D;;AAGA,cAAI,EAAEvD,UAAU,IAAIH,cAAhB,CAAJ,EAAqC;AACnCA,YAAAA,cAAc,CAACG,UAAD,CAAd,GAA6B,IAA7B;AACD;AACF;;AACD,aAAKsC,GAAL,CAAS,iBAAT,EAA4BjC,eAA5B;AACD;;AAED,aAAO+C,aAAP;AACD;;;uCAEkB;AAMjB,aAAO,KAAKb,YAAL,CAAkBzC,OAAzB;AACD;;;6CAEwB;AACvB,UAAM0D,KAAK,GAAG,KAAKjB,YAAL,CAAkBkB,kBAAlB,EAAd;;AACA,UAAID,KAAJ,EAAW;AACT,eAAO,CAAC,CAACA,KAAK,CAACE,KAAP,EAAcF,KAAK,CAACG,GAApB,CAAD,CAAP;AACD;;AACD,aAAO,EAAP;AACD;;;qCAEgBvD,Q,EAAU;AACzB,aAAOA,QAAQ,IAAIA,QAAQ,CAAC2C,UAArB,IAAmC3C,QAAQ,CAAC2C,UAAT,GAAsB,6BAAgBa,WAAhF;AACD;;;mCAEcxD,Q,EAAU;AACvB,aAAOA,QAAQ,IAAIA,QAAQ,CAACyD,QAA5B;AACD;;;0CAEqB;AACpB,aAAO,KAAK1B,eAAL,EAAP;AACD;;;wCAEmB;AAClB,aAAO,KAAKE,aAAL,EAAP;AACD;;;EAtO8CyB,mC","sourcesContent":["// Copyright (c) 2019 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\nimport {getXVIZConfig, StreamSynchronizer, LOG_STREAM_MESSAGE} from '@xviz/parser';\nimport {clamp} from 'math.gl';\n\nimport PlayableLoaderInterface from './playable-loader-interface';\nimport createSelector from '../utils/create-selector';\nimport stats from '../utils/stats';\n\n/* eslint-disable callback-return */\nexport default class XVIZLoaderInterface extends PlayableLoaderInterface {\n  constructor(options = {}) {\n    super();\n    this.options = options;\n    this._debug = options.debug || (() => {});\n    this.callbacks = {};\n  }\n\n  /* Event types:\n   * - ready\n   * - update\n   * - finish\n   * - error\n   */\n  on(eventType, cb) {\n    this.callbacks[eventType] = this.callbacks[eventType] || [];\n    this.callbacks[eventType].push(cb);\n    return this;\n  }\n\n  off(eventType, cb) {\n    const callbacks = this.callbacks[eventType];\n    if (callbacks) {\n      const index = callbacks.indexOf(cb);\n      if (index >= 0) {\n        callbacks.splice(index, 1);\n      }\n    }\n    return this;\n  }\n\n  emit(eventType, eventArgs) {\n    const callbacks = this.callbacks[eventType];\n    if (callbacks) {\n      for (const cb of callbacks) {\n        cb(eventType, eventArgs);\n      }\n    }\n    stats.get(`loader-${eventType}`).incrementCount();\n  }\n\n  onXVIZMessage = message => {\n    switch (message.type) {\n      case LOG_STREAM_MESSAGE.METADATA:\n        this._onXVIZMetadata(message);\n        this.emit('ready', message);\n        break;\n\n      case LOG_STREAM_MESSAGE.TIMESLICE:\n        this._onXVIZTimeslice(message);\n        this.emit('update', message);\n        break;\n\n      case LOG_STREAM_MESSAGE.DONE:\n        this.emit('finish', message);\n        break;\n\n      default:\n        this.emit('error', message);\n    }\n  };\n\n  onError = error => {\n    this.emit('error', error);\n  };\n\n  seek(timestamp) {\n    const metadata = this.getMetadata();\n\n    if (metadata) {\n      const startTime = this.getLogStartTime();\n      const endTime = this.getLogEndTime();\n      if (Number.isFinite(startTime) && Number.isFinite(endTime)) {\n        timestamp = clamp(timestamp, startTime, endTime);\n      }\n    }\n\n    this.set('timestamp', timestamp);\n\n    // Notify the stream buffer of the current play head\n    // for any data management needs.\n    this.streamBuffer.setCurrentTime(timestamp);\n  }\n\n  updateStreamSettings(settings) {\n    const streamSettings = this.get('streamSettings');\n    this.set('streamSettings', {...streamSettings, ...settings});\n  }\n\n  /* Data selector API */\n\n  getMetadata = () => this.get('metadata');\n\n  getStreamSettings = () => this.get('streamSettings');\n\n  _getStreamsMetadata = () => this.get('streamsMetadata');\n\n  _getStreams = createSelector(this, this._getDataVersion, () => this._getDataByStream());\n\n  getBufferedTimeRanges = createSelector(this, this._getDataVersion, () =>\n    this._getBufferedTimeRanges()\n  );\n\n  getStreams = createSelector(\n    this,\n    [this.getStreamSettings, this._getStreams, this._getDataVersion],\n    (streamSettings, streams) => {\n      if (!streamSettings || !streams) {\n        return streams;\n      }\n      const result = {};\n      for (const streamName in streams) {\n        if (streamSettings[streamName]) {\n          result[streamName] = streams[streamName];\n        }\n      }\n      return result;\n    }\n  );\n\n  getStreamsMetadata = getXVIZConfig().DYNAMIC_STREAM_METADATA\n    ? createSelector(\n        this,\n        [this.getMetadata, this._getStreamsMetadata],\n        (metadata, streamsMetadata) => {\n          return Object.assign({}, streamsMetadata, metadata && metadata.streams);\n        }\n      )\n    : createSelector(this, this.getMetadata, metadata => (metadata && metadata.streams) || {});\n\n  getBufferStartTime = createSelector(this, this.getCurrentTime, () => this._getBufferStartTime());\n  getBufferEndTime = createSelector(this, this.getCurrentTime, () => this._getBufferEndTime());\n\n  getLogStartTime = createSelector(this, this.getMetadata, metadata =>\n    this._getLogStartTime(metadata)\n  );\n  getLogEndTime = createSelector(this, this.getMetadata, metadata => this._getLogEndTime(metadata));\n\n  getCurrentFrame = createSelector(\n    this,\n    [this.getStreamSettings, this.getCurrentTime, this.getLookAhead, this._getDataVersion],\n    // `dataVersion` is only needed to trigger recomputation.\n    // The logSynchronizer has access to the timeslices.\n    (streamSettings, timestamp, lookAhead) => {\n      const {logSynchronizer} = this;\n      if (logSynchronizer && Number.isFinite(timestamp)) {\n        logSynchronizer.setTime(timestamp);\n        logSynchronizer.setLookAheadTimeOffset(lookAhead);\n        return logSynchronizer.getCurrentFrame(streamSettings);\n      }\n      return null;\n    }\n  );\n\n  /* Subclass hooks */\n\n  _onXVIZMetadata(metadata) {\n    this.set('metadata', metadata);\n    if (metadata.streams && Object.keys(metadata.streams).length > 0) {\n      this.set('streamSettings', metadata.streams);\n    }\n\n    if (!this.streamBuffer) {\n      throw new Error('streamBuffer is missing');\n    }\n    this.logSynchronizer = this.logSynchronizer || new StreamSynchronizer(this.streamBuffer);\n\n    const timestamp = this.get('timestamp');\n    const newTimestamp = Number.isFinite(timestamp) ? timestamp : metadata.start_time;\n    if (Number.isFinite(newTimestamp)) {\n      this.seek(newTimestamp);\n    }\n  }\n\n  _onXVIZTimeslice(timeslice) {\n    const oldStreamCount = this.streamBuffer.streamCount;\n    const bufferUpdated = this.streamBuffer.insert(timeslice);\n    if (bufferUpdated) {\n      this._bumpDataVersion();\n    }\n\n    if (getXVIZConfig().DYNAMIC_STREAM_METADATA && this.streamBuffer.streamCount > oldStreamCount) {\n      const streamsMetadata = {};\n      const streamSettings = this.get('streamSettings');\n\n      for (const streamName in timeslice.streams) {\n        streamsMetadata[streamName] = timeslice.streams[streamName].__metadata;\n\n        // Add new stream name to stream settings (default on)\n        if (!(streamName in streamSettings)) {\n          streamSettings[streamName] = true;\n        }\n      }\n      this.set('streamsMetadata', streamsMetadata);\n    }\n\n    return bufferUpdated;\n  }\n\n  _getDataByStream() {\n    // XVIZStreamBuffer.getStreams filters out missing streams. This has significant impact\n    // on performance. Here we take the unfiltered slices and only filter them if a stream\n    // is used.\n\n    // return this.streamBuffer.getStreams();\n    return this.streamBuffer.streams;\n  }\n\n  _getBufferedTimeRanges() {\n    const range = this.streamBuffer.getLoadedTimeRange();\n    if (range) {\n      return [[range.start, range.end]];\n    }\n    return [];\n  }\n\n  _getLogStartTime(metadata) {\n    return metadata && metadata.start_time && metadata.start_time + getXVIZConfig().TIME_WINDOW;\n  }\n\n  _getLogEndTime(metadata) {\n    return metadata && metadata.end_time;\n  }\n\n  _getBufferStartTime() {\n    return this.getLogStartTime();\n  }\n\n  _getBufferEndTime() {\n    return this.getLogEndTime();\n  }\n}\n"],"file":"xviz-loader-interface.js"}