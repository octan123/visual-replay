{"version":3,"sources":["../../../src/loaders/xviz-live-loader.js"],"names":["DEFAULT_LOG_PROFILE","DEFAULT_RETRY_ATTEMPTS","getSocketRequestParams","options","logProfile","serverConfig","bufferLength","maxConcurrency","WebSocketClass","passThroughOptions","queryParams","profile","retryAttempts","Number","isInteger","qs","Object","keys","map","key","join","url","serverUrl","XVIZLiveLoader","requestParams","retrySettings","retries","minTimeout","randomize","bufferChunk","streamBuffer","XVIZStreamBuffer","startOffset","endOffset","timestamp","setCurrentTime","getBufferRange","start","end","message","seek","XVIZWebsocketLoader"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;AAqBA;;AACA;;AAEA;;;;;;;;;;AAEA,IAAMA,mBAAmB,GAAG,SAA5B;AACA,IAAMC,sBAAsB,GAAG,CAA/B;;AAGA,SAASC,sBAAT,CAAgCC,OAAhC,EAAyC;AAAA,4BASnCA,OATmC,CAErCC,UAFqC;AAAA,MAErCA,UAFqC,oCAExBJ,mBAFwB;AAAA,MAGrCK,YAHqC,GASnCF,OATmC,CAGrCE,YAHqC;AAAA,8BASnCF,OATmC,CAIrCG,YAJqC;AAAA,MAIrCA,YAJqC,sCAItB,EAJsB;AAAA,MAMrCC,cANqC,GASnCJ,OATmC,CAMrCI,cANqC;AAAA,MAOrCC,cAPqC,GASnCL,OATmC,CAOrCK,cAPqC;AAAA,MAQlCC,kBARkC,6CASnCN,OATmC;;AAWvC,MAAMO,WAAW,iDACZD,kBADY,GAEZJ,YAAY,CAACK,WAFD;AAGfC,IAAAA,OAAO,EAAEP;AAHM,IAAjB;;AAKA,MAAMQ,aAAa,GAAGC,MAAM,CAACC,SAAP,CAAiBT,YAAY,CAACO,aAA9B,IAClBP,YAAY,CAACO,aADK,GAElBX,sBAFJ;AAIA,MAAMc,EAAE,GAAGC,MAAM,CAACC,IAAP,CAAYP,WAAZ,EACRQ,GADQ,CACJ,UAAAC,GAAG;AAAA,qBAAOA,GAAP,cAAcT,WAAW,CAACS,GAAD,CAAzB;AAAA,GADC,EAERC,IAFQ,CAEH,GAFG,CAAX;AAIA,SAAO;AACLC,IAAAA,GAAG,YAAKhB,YAAY,CAACiB,SAAlB,cAA+BP,EAA/B,CADE;AAELX,IAAAA,UAAU,EAAVA,UAFK;AAGLE,IAAAA,YAAY,EAAZA,YAHK;AAILM,IAAAA,aAAa,EAAbA,aAJK;AAKLP,IAAAA,YAAY,EAAZA;AALK,GAAP;AAOD;;IAUoBkB,c;;;;;AAanB,4BAA0B;AAAA;;AAAA,QAAdpB,OAAc,uEAAJ,EAAI;AAAA;AACxB,8BAAMA,OAAN;AADwB,gGAgChB,YAAM,CAAE,CAhCQ;AAIxB,UAAKqB,aAAL,GAAqBtB,sBAAsB,CAACC,OAAD,CAA3C;AACA,4BAAO,MAAKqB,aAAL,CAAmBlB,YAA1B,EAAwC,+BAAxC;AAEA,UAAKmB,aAAL,GAAqB;AACnBC,MAAAA,OAAO,EAAE,MAAKF,aAAL,CAAmBZ,aADT;AAEnBe,MAAAA,UAAU,EAAE,GAFO;AAGnBC,MAAAA,SAAS,EAAE;AAHQ,KAArB;AAOA,QAAMC,WAAW,GAAG,MAAKL,aAAL,CAAmBlB,YAAnB,GAAkC,CAAtD;AAGA,UAAKwB,YAAL,GAAoB,IAAIC,wBAAJ,CAAqB;AACvCC,MAAAA,WAAW,EAAE,CAAC,CAAD,GAAKH,WADqB;AAEvCI,MAAAA,SAAS,EAAEJ;AAF4B,KAArB,CAApB;AAjBwB;AAqBzB;;;;yBAEIK,S,EAAW;AACd,iHAAWA,SAAX;AAGA,WAAKJ,YAAL,CAAkBK,cAAlB,CAAiCD,SAAjC;AACD;;;0CAMqB;AACpB,aAAO,KAAKJ,YAAL,CAAkBM,cAAlB,GAAmCC,KAA1C;AACD;;;wCAEmB;AAClB,aAAO,KAAKP,YAAL,CAAkBM,cAAlB,GAAmCE,GAA1C;AACD;;;qCAEgBC,O,EAAS;AACxB,6HAAuBA,OAAvB;AAEA,WAAKC,IAAL,CAAUD,OAAO,CAACL,SAAlB;AACD;;;EA3DyCO,+B","sourcesContent":["// Copyright (c) 2019 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\n/* eslint-disable camelcase */\nimport assert from 'assert';\nimport {XVIZStreamBuffer} from '@xviz/parser';\n\nimport XVIZWebsocketLoader from './xviz-websocket-loader';\n\nconst DEFAULT_LOG_PROFILE = 'default';\nconst DEFAULT_RETRY_ATTEMPTS = 3;\n\n/* eslint-disable no-unused-vars */\nfunction getSocketRequestParams(options) {\n  const {\n    logProfile = DEFAULT_LOG_PROFILE,\n    serverConfig,\n    bufferLength = 30,\n    // These are parent class options we want to filter\n    maxConcurrency,\n    WebSocketClass,\n    ...passThroughOptions\n  } = options;\n\n  const queryParams = {\n    ...passThroughOptions,\n    ...serverConfig.queryParams,\n    profile: logProfile\n  };\n  const retryAttempts = Number.isInteger(serverConfig.retryAttempts)\n    ? serverConfig.retryAttempts\n    : DEFAULT_RETRY_ATTEMPTS;\n\n  const qs = Object.keys(queryParams)\n    .map(key => `${key}=${queryParams[key]}`)\n    .join('&');\n\n  return {\n    url: `${serverConfig.serverUrl}?${qs}`,\n    logProfile,\n    bufferLength,\n    retryAttempts,\n    serverConfig\n  };\n}\n/* eslint-enable no-unused-vars */\n\n/*\n * Handle connecting to XVIZ socket and negotiation of the XVIZ protocol version\n *\n * This loader is used when connecting to a \"live\" XVIZ websocket.\n * This implies that the metadata does not have a start or end time\n * and that we want to display the latest message as soon as it arrives.\n */\nexport default class XVIZLiveLoader extends XVIZWebsocketLoader {\n  /**\n   * constructor\n   * @params serverConfig {object}\n   *   - serverConfig.serverUrl {string}\n   *   - serverConfig.defaultLogLength {number, optional} - default 30\n   *   - serverConfig.queryParams {object, optional}\n   *   - serverConfig.retryAttempts {number, optional} - default 3\n   * @params worker {string|function, optional}\n   * @params maxConcurrency {number, optional} - default 3\n   * @params logProfile {string, optional}\n   * @params bufferLength {number, optional}\n   */\n  constructor(options = {}) {\n    super(options);\n\n    // Construct websocket connection details from parameters\n    this.requestParams = getSocketRequestParams(options);\n    assert(this.requestParams.bufferLength, 'bufferLength must be provided');\n\n    this.retrySettings = {\n      retries: this.requestParams.retryAttempts,\n      minTimeout: 500,\n      randomize: true\n    };\n\n    // Setup relative stream buffer storage by splitting bufferLength 1/3 : 2/3\n    const bufferChunk = this.requestParams.bufferLength / 3;\n\n    // Replace base class object\n    this.streamBuffer = new XVIZStreamBuffer({\n      startOffset: -2 * bufferChunk,\n      endOffset: bufferChunk\n    });\n  }\n\n  seek(timestamp) {\n    super.seek(timestamp);\n\n    // Info the streamBuffer so it can prune appropriately\n    this.streamBuffer.setCurrentTime(timestamp);\n  }\n\n  /* Hook overrides */\n\n  _onOpen = () => {};\n\n  _getBufferStartTime() {\n    return this.streamBuffer.getBufferRange().start;\n  }\n\n  _getBufferEndTime() {\n    return this.streamBuffer.getBufferRange().end;\n  }\n\n  _onXVIZTimeslice(message) {\n    super._onXVIZTimeslice(message);\n    // Live loader always shows latest data\n    this.seek(message.timestamp);\n  }\n}\n"],"file":"xviz-live-loader.js"}