{"version":3,"sources":["../../../src/loaders/playable-loader-interface.js"],"names":["LoaderInterface","PlayableLoaderInterface","get","timestamp","Error","lookAhead","set"],"mappings":";;;;;;;;;;;;AAoBA,OAAOA,eAAP,MAA4B,oBAA5B;;IAMqBC,uB;;;;;;;;;;;;;;;;qEAsCF;AAAA,aAAM,MAAKC,GAAL,CAAS,WAAT,CAAN;AAAA,K;;mEAOF;AAAA,aAAM,MAAKA,GAAL,CAAS,WAAT,CAAN;AAAA,K;;;;;;;yBAvCVC,S,EAAW;AACd,YAAM,IAAIC,KAAJ,CAAU,iBAAV,CAAN;AACD;;;6BAOQ;AACP,aAAO,KAAP;AACD;;;8BAKS;AACR,YAAM,IAAIA,KAAJ,CAAU,iBAAV,CAAN;AACD;;;4BAKO;AACN,YAAM,IAAIA,KAAJ,CAAU,iBAAV,CAAN;AACD;;;iCAsBYC,S,EAAW;AACtB,WAAKC,GAAL,CAAS,WAAT,EAAsBD,SAAtB;AACD;;;sCAOiB;AAChB,YAAM,IAAID,KAAJ,CAAU,iBAAV,CAAN;AACD;;;oCAOe;AACd,YAAM,IAAIA,KAAJ,CAAU,iBAAV,CAAN;AACD;;;4CAMuB;AACtB,YAAM,IAAIA,KAAJ,CAAU,iBAAV,CAAN;AACD;;;;EAjFkDJ,e;;SAAhCC,uB","sourcesContent":["// Copyright (c) 2019 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\nimport LoaderInterface from './loader-interface';\n\n/**\n * This interfaces exposes the methods required for compatibility with\n * the PlaybackControl component - that enables scrubbing through a buffered log.\n */\nexport default class PlayableLoaderInterface extends LoaderInterface {\n  /**\n   * Seek to a given timestamp.\n   *\n   * @param {Number} timestamp\n   */\n  seek(timestamp) {\n    throw new Error('Not implemented');\n  }\n\n  /**\n   * Whether the loader is loading data.\n   *\n   * @returns {Boolean} isOpen\n   */\n  isOpen() {\n    return false;\n  }\n\n  /**\n   * Called to start loading data.\n   */\n  connect() {\n    throw new Error('not implemented');\n  }\n\n  /**\n   * Called to stop loading data.\n   */\n  close() {\n    throw new Error('Not implemented');\n  }\n\n  /**\n   * Returns the current timestamp in seconds.\n   *\n   * @returns {Number} current time.\n   */\n  getCurrentTime = () => this.get('timestamp');\n\n  /**\n   * Returns the current look ahead offset in seconds.\n   *\n   * @returns {Number} look ahead.\n   */\n  getLookAhead = () => this.get('lookAhead');\n\n  /**\n   * Set the look ahead offset in seconds.\n   * This is used to retrieve a slice from the future states for display.\n   *\n   * @param {Number} lookAhead - look ahead in seconds.\n   */\n  setLookAhead(lookAhead) {\n    this.set('lookAhead', lookAhead);\n  }\n\n  /**\n   * Returns the start timestamp of the log.\n   *\n   * @returns {Number} start timestamp.\n   */\n  getLogStartTime() {\n    throw new Error('Not implemented');\n  }\n\n  /**\n   * Returns the end timestamp of the log.\n   *\n   * @returns {Number} end timestamp.\n   */\n  getLogEndTime() {\n    throw new Error('Not implemented');\n  }\n\n  /**\n   * Returns the loaded time ranges of the buffer, as an array of `[start, end]` timestamps.\n   * @returns {[Number, Number]} - [start, end] timestamps.\n   */\n  getBufferedTimeRanges() {\n    throw new Error('Not implemented');\n  }\n}\n"],"file":"playable-loader-interface.js"}