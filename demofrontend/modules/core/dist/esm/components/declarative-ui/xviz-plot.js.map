{"version":3,"sources":["../../../../src/components/declarative-ui/xviz-plot.js"],"names":["React","PureComponent","PropTypes","MetricCard","MetricChart","Spinner","DEFAULT_COLOR_SERIES","connectToLog","MissingDataCard","GET_X","d","GET_Y","DATA_LOADING","isLoading","XVIZPlotComponent","independentVariable","dependentVariables","missingStreams","props","x","onClick","log","streamName","nextProps","variables","setState","independentVariableChanged","dependentVariablesChanged","updatedDependentVariable","state","variable","_formatDependentVariable","Object","keys","filter","dv","length","values","map","id","valueTuple","Array","forEach","v","k","data","i","getX","getY","xDomain","title","description","width","height","style","xTicks","yTicks","formatXTick","formatYTick","horizontalGridLines","verticalGridLines","getColor","dataProps","_extractDataProps","_onClick","_formatTitle","oneOfType","string","number","object","func","arrayOf","streamsMetadata","margin","left","right","top","bottom","getLogState","frame","getCurrentFrame","getStreamsMetadata","Component"],"mappings":"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","sourcesContent":["// Copyright (c) 2019 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\nimport React, {PureComponent} from 'react';\nimport PropTypes from 'prop-types';\nimport {MetricCard, MetricChart, Spinner} from '@streetscape.gl/monochrome';\n\nimport {DEFAULT_COLOR_SERIES} from './constants';\nimport connectToLog from '../connect';\nimport {MissingDataCard} from './missing-data-card';\n\nconst GET_X = d => d[0];\nconst GET_Y = d => d[1];\nconst DATA_LOADING = {isLoading: true};\n\nclass XVIZPlotComponent extends PureComponent {\n  static propTypes = {\n    // User configuration\n    width: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n    height: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n    style: PropTypes.object,\n    getColor: PropTypes.oneOfType([PropTypes.func, PropTypes.object]),\n    xTicks: PropTypes.number,\n    yTicks: PropTypes.number,\n    formatXTick: PropTypes.func,\n    formatYTick: PropTypes.func,\n    horizontalGridLines: PropTypes.number,\n    verticalGridLines: PropTypes.number,\n    onClick: PropTypes.func,\n\n    // From declarative UI plot component\n    title: PropTypes.string,\n    description: PropTypes.string,\n    independentVariable: PropTypes.string,\n    dependentVariables: PropTypes.arrayOf(PropTypes.string),\n\n    // From connected log\n    streamsMetadata: PropTypes.object,\n    variables: PropTypes.object\n  };\n\n  static defaultProps = {\n    streamsMetadata: {},\n    variables: {},\n    width: '100%',\n    height: 300,\n    style: {\n      margin: {left: 45, right: 10, top: 10, bottom: 32}\n    },\n    xTicks: 0,\n    yTicks: 5,\n    horizontalGridLines: 5,\n    verticalGridLines: 0,\n    getColor: DEFAULT_COLOR_SERIES\n  };\n\n  state = {\n    independentVariable: null,\n    dependentVariables: {},\n    missingStreams: this.props.dependentVariables\n  };\n\n  componentWillReceiveProps(nextProps) {\n    if (!nextProps.variables) {\n      this.setState({independentVariable: null});\n      return;\n    }\n\n    const independentVariable = nextProps.variables[nextProps.independentVariable];\n    let independentVariableChanged = false;\n    let dependentVariablesChanged = false;\n    const updatedDependentVariable = {};\n\n    if (independentVariable !== this.state.independentVariable) {\n      independentVariableChanged = true;\n    }\n    for (const streamName of nextProps.dependentVariables) {\n      const variable = nextProps.variables[streamName];\n      if (\n        independentVariableChanged ||\n        !this.props.variables ||\n        this.props.variables[streamName] !== variable\n      ) {\n        updatedDependentVariable[streamName] = this._formatDependentVariable(\n          independentVariable,\n          variable\n        );\n        dependentVariablesChanged = true;\n      }\n    }\n\n    if (independentVariableChanged || dependentVariablesChanged) {\n      this.setState({\n        independentVariable,\n        dependentVariables: {...this.state.dependentVariables, ...updatedDependentVariable},\n        missingStreams: Object.keys(updatedDependentVariable).filter(\n          dv => !updatedDependentVariable[dv]\n        )\n      });\n    }\n  }\n\n  _onClick = x => {\n    const {onClick, log} = this.props;\n    if (onClick) {\n      onClick(x);\n    } else if (log) {\n      // TODO - set look ahead\n    }\n  };\n\n  _formatTitle = streamName => {\n    // TODO - use information from metadata\n    // const {metadata} = this.props;\n    // const streamInfo = metadata && metadata.streams[streamName];\n    return streamName;\n  };\n\n  _formatDependentVariable(independentVariable, variable) {\n    if (!variable || !independentVariable || independentVariable.length === 0) {\n      return null;\n    }\n    const x = independentVariable[0].values;\n\n    return variable.map(({id, values}) => {\n      // TypeArray.map() cannot return an array as the result so construct\n      // a new Array explicitly\n      const valueTuple = new Array(values.length);\n      values.forEach((v, k) => (valueTuple[k] = [x[k], v]));\n\n      return {\n        id,\n        values: valueTuple\n      };\n    });\n  }\n\n  _extractDataProps() {\n    const {independentVariable, dependentVariables} = this.state;\n\n    if (!independentVariable) {\n      return DATA_LOADING;\n    }\n\n    const x = independentVariable[0].values;\n    const data = {};\n    for (const streamName in dependentVariables) {\n      const variable = dependentVariables[streamName];\n      if (variable) {\n        variable.forEach(({id, values}, i) => {\n          data[`${streamName}-${id || i}`] = values;\n        });\n      }\n    }\n\n    return {\n      getX: GET_X,\n      getY: GET_Y,\n      xDomain: [x[0], x[x.length - 1]],\n      data\n    };\n  }\n\n  render() {\n    const {\n      title,\n      description,\n      width,\n      height,\n      style,\n      xTicks,\n      yTicks,\n      formatXTick,\n      formatYTick,\n      horizontalGridLines,\n      verticalGridLines,\n      getColor\n    } = this.props;\n\n    const dataProps = this._extractDataProps();\n    const {missingStreams} = this.state;\n\n    return (\n      <MetricCard title={title} description={description} style={style} isLoading={false}>\n        <>\n          {missingStreams.length > 0 && (\n            <MissingDataCard style={style} missingData={missingStreams} />\n          )}\n          {dataProps.isLoading ? (\n            <Spinner />\n          ) : (\n            <MetricChart\n              {...dataProps}\n              getColor={getColor}\n              highlightX={0}\n              width={width}\n              height={height}\n              style={style}\n              xTicks={xTicks}\n              yTicks={yTicks}\n              formatXTick={formatXTick}\n              formatYTick={formatYTick}\n              onClick={this._onClick}\n              formatTitle={this._formatTitle}\n              horizontalGridLines={horizontalGridLines}\n              verticalGridLines={verticalGridLines}\n            />\n          )}\n        </>\n      </MetricCard>\n    );\n  }\n}\n\nconst getLogState = log => {\n  const frame = log.getCurrentFrame();\n  return {\n    streamsMetadata: log.getStreamsMetadata(),\n    variables: frame && frame.variables\n  };\n};\n\nexport default connectToLog({getLogState, Component: XVIZPlotComponent});\n"],"file":"xviz-plot.js"}