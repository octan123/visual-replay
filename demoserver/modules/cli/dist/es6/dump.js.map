{"version":3,"sources":["../../src/dump.js"],"names":["DumpMode","Object","freeze","ONELINE","CONDENSED","ALL","DumpXVIZ","constructor","options","mode","undefined","log","console","onConnect","onStart","msg","oneline","_dumpSent","onError","message","_dumpReceived","onMetadata","verStr","version","onTransformLog","startStr","start_timestamp","endStr","end_timestamp","id","onStateUpdate","updates","length","startTime","timestamp","endTime","onTransformLogDone","onClose","type","data","condensed","_dump","prefix","header","toUpperCase","JSON","stringify","output","Error"],"mappings":"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","sourcesContent":["// Copyright (c) 2019 Uber Technologies, Inc.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n/* eslint-env node, browser */\n\nexport const DumpMode = Object.freeze({\n  // Only a single line per message\n  ONELINE: 0,\n  // A summary view\n  CONDENSED: 1,\n  // All the data in JSON form\n  ALL: 2\n});\n\n/**\n * XVIZ middleware that echos all messages, with configurable level of\n * details.\n */\nexport class DumpXVIZ {\n  constructor(options = {}) {\n    this.mode = options.mode === undefined ? DumpMode.ALL : options.mode;\n    // eslint-disable-next-line no-console\n    this.log = options.log || console.log;\n  }\n\n  onConnect() {\n    this.log('[CONNECTED]');\n  }\n\n  onStart(msg) {\n    const oneline = () => {\n      if (msg) {\n        return `log: ${msg.log}`;\n      }\n      return '';\n    };\n\n    this._dumpSent('start', msg, oneline);\n  }\n\n  onError(msg) {\n    const oneline = () => {\n      return `msg: ${msg.message}`;\n    };\n\n    this._dumpReceived('error', msg, oneline);\n  }\n\n  onMetadata(msg) {\n    const oneline = () => {\n      const verStr = msg.version || 'Unknown';\n      return `version: ${verStr}`;\n    };\n\n    this._dumpReceived('metadata', msg, oneline);\n  }\n\n  onTransformLog(msg) {\n    const oneline = () => {\n      const startStr = msg.start_timestamp || 'LOG-START';\n      const endStr = msg.end_timestamp || 'LOG-END';\n\n      return `${startStr} - ${endStr} (tid: ${msg.id})`;\n    };\n\n    this._dumpSent('transform_log', msg, oneline);\n  }\n\n  onStateUpdate(msg) {\n    const oneline = () => {\n      const updates = msg.updates;\n      if (updates && updates.length > 0) {\n        const startTime = updates[0].timestamp;\n        if (updates.length === 1) {\n          return `time: ${startTime}`;\n        }\n        const endTime = updates[updates.length - 1].timestamp;\n        return `time: ${startTime} - ${endTime} (${endTime - startTime})`;\n      }\n      return 'empty';\n    };\n\n    this._dumpReceived('state_update', msg, oneline);\n  }\n\n  onTransformLogDone(msg) {\n    const oneline = () => {\n      return `tid: ${msg.id}`;\n    };\n    this._dumpReceived('transform_log_done', msg, oneline);\n  }\n\n  onClose() {\n    this.log('[CONNECTION CLOSED]');\n  }\n\n  _dumpSent(type, data, condensed, oneline) {\n    this._dump('<', type, data, condensed, oneline);\n  }\n\n  _dumpReceived(type, data, condensed, oneline) {\n    this._dump('>', type, data, condensed, oneline);\n  }\n\n  _dump(prefix, type, data, condensed, oneline) {\n    const header = `[${prefix} ${type.toUpperCase()}]`;\n\n    switch (this.mode) {\n      case DumpMode.ALL:\n        this.log(`${header}\\n${JSON.stringify(data, null, 4)}`);\n        break;\n\n      case DumpMode.CONDENSED:\n        this.log(`${header} ${condensed()}`);\n        break;\n\n      case DumpMode.ONELINE:\n        const output = oneline || condensed;\n        this.log(`${header} ${output()}`);\n        break;\n\n      default:\n        throw new Error(`Unknown dump mode ${this.mode}`);\n    }\n  }\n}\n"],"file":"dump.js"}