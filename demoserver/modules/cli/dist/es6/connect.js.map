{"version":3,"sources":["../../src/connect.js"],"names":["XVIZMiddlewareStack","WebSocketInterface","TransformLogFlow","OnlyMetadata","W3CWebSocket","require","w3cwebsocket","openSource","args","middlewares","isLive","push","metadata","socket","webSocketFromArgs","stackedMiddleware","client","middleware","i","length","sigintCount","process","on","console","log","close","exit","url","urlFromArgs","createWebSocket","undefined","extraArgs","host","maxReceivedFrameSize","maxReceivedMessageSize"],"mappings":"AAiBA,SAAQA,mBAAR,QAAkC,cAAlC;AACA,SAAQC,kBAAR,QAAiC,aAAjC;AACA,SAAQC,gBAAR,EAA0BC,YAA1B,QAA6C,QAA7C;;AAEA,MAAMC,YAAY,GAAGC,OAAO,CAAC,WAAD,CAAP,CAAqBC,YAA1C;;AAOA,OAAO,SAASC,UAAT,CAAoBC,IAApB,EAA0BC,WAA1B,EAAuC;AAE5C,MAAI,CAACC,MAAM,CAACF,IAAD,CAAX,EAAmB;AACjBC,IAAAA,WAAW,CAACE,IAAZ,CAAiB,IAAIT,gBAAJ,CAAqB,IAArB,EAA2BM,IAA3B,CAAjB;AACD;;AAGD,MAAIA,IAAI,CAACI,QAAT,EAAmB;AACjBH,IAAAA,WAAW,CAACE,IAAZ,CAAiB,IAAIR,YAAJ,CAAiB,IAAjB,CAAjB;AACD;;AAGD,QAAMU,MAAM,GAAGC,iBAAiB,CAACN,IAAD,CAAhC;AACA,QAAMO,iBAAiB,GAAG,IAAIf,mBAAJ,CAAwBS,WAAxB,CAA1B;AAEA,QAAMO,MAAM,GAAG,IAAIf,kBAAJ,CAAuB;AAACgB,IAAAA,UAAU,EAAEF,iBAAb;AAAgCF,IAAAA;AAAhC,GAAvB,CAAf;;AAIA,OAAK,IAAIK,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGT,WAAW,CAACU,MAAhC,EAAwC,EAAED,CAA1C,EAA6C;AAC3C,UAAMD,UAAU,GAAGR,WAAW,CAACS,CAAD,CAA9B;;AACA,QAAID,UAAU,CAACD,MAAX,KAAsB,IAA1B,EAAgC;AAC9BC,MAAAA,UAAU,CAACD,MAAX,GAAoBA,MAApB;AACD;AACF;;AAGD,MAAII,WAAW,GAAG,CAAlB;AACAC,EAAAA,OAAO,CAACC,EAAR,CAAW,QAAX,EAAqB,MAAM;AACzB,QAAIF,WAAW,KAAK,CAApB,EAAuB;AACrBG,MAAAA,OAAO,CAACC,GAAR,CAAY,SAAZ;AACAX,MAAAA,MAAM,CAACY,KAAP;AACD,KAHD,MAGO;AAELF,MAAAA,OAAO,CAACC,GAAR,CAAY,UAAZ;AACAH,MAAAA,OAAO,CAACK,IAAR,CAAa,CAAb;AACD;;AAEDN,IAAAA,WAAW;AACZ,GAXD;AAaA,SAAOJ,MAAP;AACD;AAKD,OAAO,SAASF,iBAAT,CAA2BN,IAA3B,EAAiC;AACtC,QAAMmB,GAAG,GAAGC,WAAW,CAACpB,IAAD,CAAvB;AACA,SAAOqB,eAAe,CAACF,GAAD,CAAtB;AACD;AAKD,OAAO,SAASjB,MAAT,CAAgBF,IAAhB,EAAsB;AAC3B,SAAOA,IAAI,CAACgB,GAAL,KAAaM,SAApB;AACD;AAKD,OAAO,SAASF,WAAT,CAAqBpB,IAArB,EAA2B;AAChC,QAAMuB,SAAS,GAAGrB,MAAM,CAACF,IAAD,CAAN,GAAe,mBAAf,iBAA4CA,IAAI,CAACgB,GAAjD,CAAlB;AACA,QAAMG,GAAG,aAAMnB,IAAI,CAACwB,IAAX,0BAA+BD,SAA/B,CAAT;AAEA,SAAOJ,GAAP;AACD;AAKD,OAAO,SAASE,eAAT,CAAyBF,GAAzB,EAA8B;AACnC,QAAMX,MAAM,GAAG,IAAIZ,YAAJ,CACbuB,GADa,EAEb,IAFa,EAGb,IAHa,EAIb,IAJa,EAKb,IALa,EAMb;AACEM,IAAAA,oBAAoB,EAAE,KAAK,IAAL,GAAY,IADpC;AAEEC,IAAAA,sBAAsB,EAAE,KAAK,IAAL,GAAY;AAFtC,GANa,CAAf;AAYA,SAAOlB,MAAP;AACD","sourcesContent":["// Copyright (c) 2019 Uber Technologies, Inc.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n/* eslint-env node */\n/* eslint no-console: [\"error\", { allow: [\"log\"] }] */\n\nimport {XVIZMiddlewareStack} from './middleware';\nimport {WebSocketInterface} from './websocket';\nimport {TransformLogFlow, OnlyMetadata} from './core';\n\nconst W3CWebSocket = require('websocket').w3cwebsocket;\n\n/**\n * With the given arguments open an XVIZ data source and process with\n * the provided middleware stack.  Additional middleware is added to\n * facilitate processing as needed.\n */\nexport function openSource(args, middlewares) {\n  // Non-live sessions require sending a transform log message\n  if (!isLive(args)) {\n    middlewares.push(new TransformLogFlow(null, args));\n  }\n\n  // If we just want metadata we shutdown afterwards\n  if (args.metadata) {\n    middlewares.push(new OnlyMetadata(null));\n  }\n\n  // Assemble our message processors\n  const socket = webSocketFromArgs(args);\n  const stackedMiddleware = new XVIZMiddlewareStack(middlewares);\n\n  const client = new WebSocketInterface({middleware: stackedMiddleware, socket});\n\n  // Some middleware needs to be able to send messages/close connections\n  // so provide them access to the client.\n  for (let i = 0; i < middlewares.length; ++i) {\n    const middleware = middlewares[i];\n    if (middleware.client === null) {\n      middleware.client = client;\n    }\n  }\n\n  // Setup graceful shutdown\n  let sigintCount = 0;\n  process.on('SIGINT', () => {\n    if (sigintCount === 0) {\n      console.log('Closing');\n      socket.close();\n    } else {\n      // If the user or system is really mashing Ctrl-C, then abort\n      console.log('Aborting');\n      process.exit(1); // eslint-disable-line no-process-exit\n    }\n\n    sigintCount++;\n  });\n\n  return client;\n}\n\n/**\n * Take the standard data args and return a working websocket\n */\nexport function webSocketFromArgs(args) {\n  const url = urlFromArgs(args);\n  return createWebSocket(url);\n}\n\n/**\n * Arg we operating a live session or not\n */\nexport function isLive(args) {\n  return args.log === undefined;\n}\n\n/**\n * Based on the command data arguments create a standard XVIZ service URL\n */\nexport function urlFromArgs(args) {\n  const extraArgs = isLive(args) ? 'session_type=live' : `log=${args.log}`;\n  const url = `${args.host}?version=2.0&${extraArgs}`;\n\n  return url;\n}\n\n/**\n * Create a web socket properly configured for large XVIZ data flows\n */\nexport function createWebSocket(url) {\n  const client = new W3CWebSocket(\n    url,\n    null, // protocols\n    null, // origin\n    null, // headers\n    null, // requestOptions\n    {\n      maxReceivedFrameSize: 64 * 1024 * 1024, // 64MiB\n      maxReceivedMessageSize: 64 * 1024 * 1024 // 64MiB\n    }\n  );\n\n  return client;\n}\n"],"file":"connect.js"}