{"version":3,"sources":["../../src/websocket.js"],"names":["isEnvelope","unpackEnvelope","parseBinaryXVIZ","isBinaryXVIZ","WebSocketInterface","constructor","options","middleware","start","socket","unknownMessageTypes","Set","onerror","error","console","log","onclose","onClose","onopen","onConnect","onmessage","message","onMessage","close","sendMessage","onStart","onError","toString","data","parsed","processMessage","utf8decoder","TextDecoder","JSON","parse","decode","unpacked","namespace","callMiddleware","type","has","add","msgType","enveloped","send","stringify","xvizType","onMetadata","onTransformLog","onStateUpdate","onTransformLogDone"],"mappings":"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","sourcesContent":["// Copyright (c) 2019 Uber Technologies, Inc.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n/* eslint no-console: [\"error\", { allow: [\"log\"] }] */\n/* eslint-env node, browser */\n\nimport {isEnvelope, unpackEnvelope, parseBinaryXVIZ, isBinaryXVIZ} from '@xviz/io';\n\n/**\n * Using the provided W3CWebSocket client, send the optional start\n * message de-envelope the messages and push the results through the\n * XVIZ middlewares.\n */\nexport class WebSocketInterface {\n  constructor(options = {}) {\n    this.middleware = options.middleware;\n    this.start = options.start;\n    this.socket = options.socket;\n    this.unknownMessageTypes = new Set([]);\n\n    this.socket.onerror = error => {\n      console.log('WebSocket Error: ', error);\n    };\n\n    this.socket.onclose = () => {\n      this.onClose();\n    };\n\n    this.socket.onopen = () => {\n      this.onConnect();\n    };\n\n    this.socket.onmessage = message => {\n      this.onMessage(message);\n    };\n  }\n\n  close() {\n    this.socket.close();\n  }\n\n  onConnect() {\n    this.middleware.onConnect();\n\n    if (this.start) {\n      this.sendMessage('start', this.start);\n    } else {\n      // Start is inline so with no message\n      this.middleware.onStart(null);\n    }\n  }\n\n  onError(error) {\n    console.log('Connection Error: ', error.toString());\n  }\n\n  onClose(message) {\n    this.middleware.onClose();\n  }\n\n  onMessage(message) {\n    if (typeof message.data !== 'string') {\n      if (isBinaryXVIZ(message.data)) {\n        // Convert from binary to JSON object\n        const parsed = parseBinaryXVIZ(message.data);\n        this.processMessage(parsed);\n      } else {\n        const utf8decoder = new TextDecoder();\n        const parsed = JSON.parse(utf8decoder.decode(message.data));\n        this.processMessage(parsed);\n      }\n    } else {\n      const parsed = JSON.parse(message.data);\n      this.processMessage(parsed);\n    }\n  }\n\n  processMessage(parsed) {\n    if (isEnvelope(parsed)) {\n      const unpacked = unpackEnvelope(parsed);\n\n      if (unpacked.namespace === 'xviz') {\n        this.callMiddleware(unpacked.type, unpacked.data);\n      } else if (!this.unknownMessageTypes.has(parsed.type)) {\n        // Report each unknown type just once\n        this.unknownMessageTypes.add(parsed.type);\n        console.log(`Unknown message namespace: \"${unpacked.namespace}\" type: \"${unpacked.type}\"`);\n      }\n    } else {\n      console.log('Unknown message format', parsed);\n    }\n  }\n  sendMessage(msgType, data) {\n    this.callMiddleware(msgType, data);\n\n    // TODO: use XVIZEnvelope\n    const enveloped = {\n      type: `xviz/${msgType}`,\n      data\n    };\n    this.socket.send(JSON.stringify(enveloped));\n  }\n\n  callMiddleware(xvizType, data) {\n    switch (xvizType) {\n      case 'start':\n        this.middleware.onStart(data);\n        break;\n      case 'error':\n        this.middleware.onError(data);\n        break;\n      case 'metadata':\n        this.middleware.onMetadata(data);\n        break;\n      case 'transform_log':\n        this.middleware.onTransformLog(data);\n        break;\n      case 'state_update':\n        this.middleware.onStateUpdate(data);\n        break;\n      case 'transform_log_done':\n        this.middleware.onTransformLogDone(data);\n        break;\n      default:\n        // TODO(jlisee): handle unknown XVIZ message type\n        console.log('UNKNOWN XVIZ', xvizType, data);\n        break;\n    }\n  }\n}\n"],"file":"websocket.js"}