{"version":3,"sources":["../../src/dump.js"],"names":["DumpMode","Object","freeze","ONELINE","CONDENSED","ALL","DumpXVIZ","options","mode","undefined","log","console","msg","oneline","_dumpSent","message","_dumpReceived","verStr","version","startStr","start_timestamp","endStr","end_timestamp","id","updates","length","startTime","timestamp","endTime","type","data","condensed","_dump","prefix","header","toUpperCase","JSON","stringify","output","Error"],"mappings":"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","sourcesContent":["// Copyright (c) 2019 Uber Technologies, Inc.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n/* eslint-env node, browser */\n\nexport const DumpMode = Object.freeze({\n  // Only a single line per message\n  ONELINE: 0,\n  // A summary view\n  CONDENSED: 1,\n  // All the data in JSON form\n  ALL: 2\n});\n\n/**\n * XVIZ middleware that echos all messages, with configurable level of\n * details.\n */\nexport class DumpXVIZ {\n  constructor(options = {}) {\n    this.mode = options.mode === undefined ? DumpMode.ALL : options.mode;\n    // eslint-disable-next-line no-console\n    this.log = options.log || console.log;\n  }\n\n  onConnect() {\n    this.log('[CONNECTED]');\n  }\n\n  onStart(msg) {\n    const oneline = () => {\n      if (msg) {\n        return `log: ${msg.log}`;\n      }\n      return '';\n    };\n\n    this._dumpSent('start', msg, oneline);\n  }\n\n  onError(msg) {\n    const oneline = () => {\n      return `msg: ${msg.message}`;\n    };\n\n    this._dumpReceived('error', msg, oneline);\n  }\n\n  onMetadata(msg) {\n    const oneline = () => {\n      const verStr = msg.version || 'Unknown';\n      return `version: ${verStr}`;\n    };\n\n    this._dumpReceived('metadata', msg, oneline);\n  }\n\n  onTransformLog(msg) {\n    const oneline = () => {\n      const startStr = msg.start_timestamp || 'LOG-START';\n      const endStr = msg.end_timestamp || 'LOG-END';\n\n      return `${startStr} - ${endStr} (tid: ${msg.id})`;\n    };\n\n    this._dumpSent('transform_log', msg, oneline);\n  }\n\n  onStateUpdate(msg) {\n    const oneline = () => {\n      const updates = msg.updates;\n      if (updates && updates.length > 0) {\n        const startTime = updates[0].timestamp;\n        if (updates.length === 1) {\n          return `time: ${startTime}`;\n        }\n        const endTime = updates[updates.length - 1].timestamp;\n        return `time: ${startTime} - ${endTime} (${endTime - startTime})`;\n      }\n      return 'empty';\n    };\n\n    this._dumpReceived('state_update', msg, oneline);\n  }\n\n  onTransformLogDone(msg) {\n    const oneline = () => {\n      return `tid: ${msg.id}`;\n    };\n    this._dumpReceived('transform_log_done', msg, oneline);\n  }\n\n  onClose() {\n    this.log('[CONNECTION CLOSED]');\n  }\n\n  _dumpSent(type, data, condensed, oneline) {\n    this._dump('<', type, data, condensed, oneline);\n  }\n\n  _dumpReceived(type, data, condensed, oneline) {\n    this._dump('>', type, data, condensed, oneline);\n  }\n\n  _dump(prefix, type, data, condensed, oneline) {\n    const header = `[${prefix} ${type.toUpperCase()}]`;\n\n    switch (this.mode) {\n      case DumpMode.ALL:\n        this.log(`${header}\\n${JSON.stringify(data, null, 4)}`);\n        break;\n\n      case DumpMode.CONDENSED:\n        this.log(`${header} ${condensed()}`);\n        break;\n\n      case DumpMode.ONELINE:\n        const output = oneline || condensed;\n        this.log(`${header} ${output()}`);\n        break;\n\n      default:\n        throw new Error(`Unknown dump mode ${this.mode}`);\n    }\n  }\n}\n"],"file":"dump.js"}