{"version":3,"sources":["../../src/core.js"],"names":["TransformLogFlow","client","options","id","sent","msg","metadata","outMsg","start","start_timestamp","end","end_timestamp","sendMessage","close","OnlyMetadata"],"mappings":";;;;;;;;;;;;;IAkBaA,gB;AACX,4BAAYC,MAAZ,EAAkC;AAAA,QAAdC,OAAc,uEAAJ,EAAI;AAAA;AAChC,SAAKD,MAAL,GAAcA,MAAd;AACA,SAAKC,OAAL,GAAeA,OAAf;AACA,SAAKC,EAAL,GAAU,sCAAV;AACA,SAAKC,IAAL,GAAY,KAAZ;AACD;;;;+BAEUC,G,EAAK;AACd,UAAI,CAAC,KAAKD,IAAN,IAAc,CAAC,KAAKF,OAAL,CAAaI,QAAhC,EAA0C;AACxC,YAAMC,MAAM,GAAG;AACbJ,UAAAA,EAAE,EAAE,KAAKA;AADI,SAAf;;AAIA,YAAI,KAAKD,OAAL,CAAaM,KAAjB,EAAwB;AACtBD,UAAAA,MAAM,CAACE,eAAP,GAAyB,KAAKP,OAAL,CAAaM,KAAtC;AACD;;AAED,YAAI,KAAKN,OAAL,CAAaQ,GAAjB,EAAsB;AACpBH,UAAAA,MAAM,CAACI,aAAP,GAAuB,KAAKT,OAAL,CAAaQ,GAApC;AACD;;AAED,aAAKT,MAAL,CAAYW,WAAZ,CAAwB,eAAxB,EAAyCL,MAAzC;AAEA,aAAKH,IAAL,GAAY,IAAZ;AACD;AACF;;;uCACkBC,G,EAAK;AACtB,WAAKJ,MAAL,CAAYY,KAAZ;AACD;;;;;;;IAMUC,Y;AACX,wBAAYb,MAAZ,EAAoB;AAAA;AAClB,SAAKA,MAAL,GAAcA,MAAd;AACD;;;;+BAEUI,G,EAAK;AACd,WAAKJ,MAAL,CAAYY,KAAZ;AACD","sourcesContent":["// Copyright (c) 2019 Uber Technologies, Inc.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n/**\n * This is a middleware that sends the transform log request\n * after metadata is received.\n */\nexport class TransformLogFlow {\n  constructor(client, options = {}) {\n    this.client = client;\n    this.options = options;\n    this.id = 'f8b38a41-59fa-44b9-9311-cd612886bb37';\n    this.sent = false;\n  }\n\n  onMetadata(msg) {\n    if (!this.sent && !this.options.metadata) {\n      const outMsg = {\n        id: this.id\n      };\n\n      if (this.options.start) {\n        outMsg.start_timestamp = this.options.start; // eslint-disable-line camelcase\n      }\n\n      if (this.options.end) {\n        outMsg.end_timestamp = this.options.end; // eslint-disable-line camelcase\n      }\n\n      this.client.sendMessage('transform_log', outMsg);\n\n      this.sent = true;\n    }\n  }\n  onTransformLogDone(msg) {\n    this.client.close();\n  }\n}\n\n/**\n * Close after we have received metadata\n */\nexport class OnlyMetadata {\n  constructor(client) {\n    this.client = client;\n  }\n\n  onMetadata(msg) {\n    this.client.close();\n  }\n}\n"],"file":"core.js"}