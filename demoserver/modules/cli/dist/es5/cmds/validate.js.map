{"version":3,"sources":["../../../src/cmds/validate.js"],"names":["validateArgs","inArgs","command","args","options","alias","describe","verbose","condensed","invalidCallback","t","e","m","printValidationError","validator","XVIZSessionValidator","printed","printSummary","printErrorSummary","stats","reportValidation","onMetadata","msg","metadata","onTransformLogDone","onClose","stack","table","Table","head","style","message","messages","count","errors","validationErrors","errPer","uniqueErrors","uniqueErrorCount","Object","keys","length","row","toFixed","coloredRow","forEach","push","colors","red","bold","console","log","toString","msgType","err","displayType","msgStr","JSON","stringify","errStr","display","type","toLowerCase"],"mappings":"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","sourcesContent":["// Copyright (c) 2019 Uber Technologies, Inc.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n/* eslint no-console: [\"error\", { allow: [\"log\"] }] */\n/* eslint-env node, browser */\n\nimport {openSource} from '../connect';\nimport {addDataArgs, addMetadataArg, addCondensedArg} from '../commonargs';\nimport {XVIZSessionValidator} from '@xviz/schema';\n\nimport {default as indentString} from 'indent-string';\nimport {default as Table} from 'cli-table3';\nimport {default as colors} from 'colors';\n\nexport function validateArgs(inArgs) {\n  return inArgs.command(\n    'validate <host> [log]',\n    'Validate XVIZ data and message flow',\n    args => {\n      addDataArgs(args);\n      addMetadataArg(args, 'Just check the metadata');\n      addCondensedArg(args, 'Display summary information');\n\n      args.options('type', {\n        alias: 't',\n        describe: 'Just report on this type'\n      });\n    },\n    args => {\n      command(args);\n    }\n  );\n}\n\n/**\n * Validate the content and order of XVIZ messages\n */\nexport function command(args) {\n  // Validate the message flow\n  const options = {verbose: !args.condensed};\n\n  if (!args.condensed) {\n    options.invalidCallback = (t, e, m) => {\n      printValidationError(t, e, m, args);\n    };\n  }\n\n  const validator = new XVIZSessionValidator(options);\n\n  let printed = false;\n  const printSummary = () => {\n    if (!printed) {\n      printErrorSummary(validator.stats, args);\n      printed = true;\n    }\n  };\n\n  // Report validation as we go\n  const reportValidation = {\n    onMetadata: msg => {\n      if (args.metadata) {\n        printSummary();\n      }\n    },\n    onTransformLogDone: msg => {\n      printSummary();\n    },\n    onClose: () => {\n      printSummary();\n    }\n  };\n\n  // The middleware stack handle all messages\n  const stack = [validator, reportValidation];\n\n  // Everything async from here...\n  openSource(args, stack);\n}\n\nfunction printErrorSummary(stats, args) {\n  // Form a table of the main errors one row per type\n  const table = new Table({\n    head: ['Type', 'Count', 'Invalid', 'Inv %', 'Unique Errors'],\n    style: {head: ['white', 'bold']}\n  });\n\n  for (const message in stats.messages) {\n    const count = stats.messages[message] || 0;\n    const errors = stats.validationErrors[message] || 0;\n    const errPer = (errors / count) * 100;\n\n    const uniqueErrors = stats.uniqueErrors[message];\n    const uniqueErrorCount = uniqueErrors ? Object.keys(uniqueErrors).length : 0;\n\n    const row = [message, count, errors, errPer.toFixed(1), uniqueErrorCount];\n\n    if (errors) {\n      const coloredRow = [];\n      row.forEach(e => {\n        coloredRow.push(colors.red.bold(e));\n      });\n      table.push(coloredRow);\n    } else {\n      table.push(row);\n    }\n  }\n\n  // console.log(stats);\n  console.log(table.toString());\n}\n\n// Print details about a validation error\nfunction printValidationError(msgType, err, msg, args) {\n  if (msg && displayType(msgType, args)) {\n    // TODO(jlisee): look into ajv-errors package to simplify this output\n    const msgStr = indentString(JSON.stringify(msg, null, 4), 4);\n    const errStr = indentString(err.toString(), 4);\n    console.log(`VALIDATION ERROR:\\n  TYPE: ${msgType}\\n  DETAILS:\\n${errStr}\\n  MSG:\\n${msgStr}`);\n  }\n}\n\n// Return true if we should display information about this message type\nfunction displayType(msgType, args) {\n  let display = true;\n  if (args.type && args.type.toLowerCase() !== msgType.toLowerCase()) {\n    display = false;\n  }\n\n  return display;\n}\n"],"file":"validate.js"}