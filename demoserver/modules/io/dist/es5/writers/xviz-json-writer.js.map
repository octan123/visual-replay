{"version":3,"sources":["../../../src/writers/xviz-json-writer.js"],"names":["messageName","index","XVIZJSONWriter","sink","options","envelope","precision","asArrayBuffer","messageTimings","messages","Map","wroteMessageIndex","xvizMetadata","_checkValid","_saveTimestamp","XVIZEnvelope","Metadata","msg","JSON","stringify","writeToSink","messageIndex","xvizMessage","StateUpdate","numberRounder","k","value","Number","toFixed","jsonXVIZMessage","startTime","endTime","messageTimes","Array","from","keys","sort","a","b","timing","forEach","limit","length","Error","push","get","_writeMessageIndex","xviz_data","log_info","updates","undefined","start_time","end_time","every","update","timestamp","min","Math","map","max","set","name","encoder","TextEncoder","encode","writeSync","XVIZBaseWriter"],"mappings":"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","sourcesContent":["// Copyright (c) 2019 Uber Technologies, Inc.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport {XVIZBaseWriter} from './xviz-base-writer';\nimport {xvizConvertJson} from './xviz-json-encoder';\nimport {TextEncoder} from '../common/text-encoding';\nimport {XVIZEnvelope} from '@xviz/io';\n\n// 0-frame is an index file for timestamp metadata\n// 1-frame is the metadata file for the log\n// 2-frame is where the actual XVIZ updates begin\nconst messageName = index => `${index + 2}-frame`;\n\nexport class XVIZJSONWriter extends XVIZBaseWriter {\n  constructor(sink, options = {}) {\n    super(sink);\n\n    const {envelope = true, precision = 10, asArrayBuffer = false} = options;\n    this.messageTimings = {\n      messages: new Map()\n    };\n    this.wroteMessageIndex = null;\n    this.options = {envelope, precision, asArrayBuffer};\n  }\n\n  // xvizMetadata is the object returned\n  // from a Builder.\n  writeMetadata(xvizMetadata) {\n    this._checkValid();\n    this._saveTimestamp(xvizMetadata);\n\n    if (this.options.envelope) {\n      xvizMetadata = XVIZEnvelope.Metadata(xvizMetadata);\n    }\n\n    const msg = JSON.stringify(xvizMetadata);\n    this.writeToSink('1-frame.json', msg);\n  }\n\n  writeMessage(messageIndex, xvizMessage) {\n    this._checkValid();\n    this._saveTimestamp(xvizMessage, messageIndex);\n\n    if (this.options.envelope) {\n      xvizMessage = XVIZEnvelope.StateUpdate(xvizMessage);\n    }\n\n    // Limit precision to save space\n    const numberRounder = (k, value) => {\n      if (typeof value === 'number') {\n        return Number(value.toFixed(this.options.precision));\n      }\n\n      return value;\n    };\n\n    const jsonXVIZMessage = xvizConvertJson(xvizMessage);\n    const msg = JSON.stringify(jsonXVIZMessage, numberRounder);\n    this.writeToSink(`${messageName(messageIndex)}.json`, msg);\n  }\n\n  _writeMessageIndex() {\n    this._checkValid();\n    const {startTime, endTime, messages} = this.messageTimings;\n    const messageTimings = {};\n\n    if (startTime) {\n      messageTimings.startTime = startTime;\n    }\n\n    if (endTime) {\n      messageTimings.endTime = endTime;\n    }\n\n    // Sort messages by index before writing out as an array\n    const messageTimes = Array.from(messages.keys()).sort((a, b) => a - b);\n\n    const timing = [];\n    messageTimes.forEach((value, index) => {\n      // Value is two greater than message index\n      const limit = timing.length;\n      if (value > limit) {\n        // Adding 2 because 1-frame is metadata file, so message data starts at 2\n        throw new Error(\n          `Error writing time index file. Messages are missing between ${limit + 2} and ${value +\n            2}`\n        );\n      }\n\n      timing.push(messages.get(value));\n    });\n    messageTimings.timing = timing;\n\n    const msg = JSON.stringify(messageTimings);\n    this.writeToSink('0-frame.json', msg);\n    this.wroteMessageIndex = timing.length;\n  }\n\n  close() {\n    if (this.sink) {\n      if (!this.wroteMessageIndex) {\n        this._writeMessageIndex();\n      }\n\n      super.close();\n    }\n  }\n\n  /* eslint-disable camelcase */\n  _saveTimestamp(xviz_data, index) {\n    const {log_info, updates} = xviz_data;\n\n    if (index === undefined) {\n      // Metadata case\n      if (log_info) {\n        const {start_time, end_time} = log_info || {};\n        if (start_time) {\n          this.messageTimings.startTime = start_time;\n        }\n\n        if (end_time) {\n          this.messageTimings.endTime = end_time;\n        }\n      }\n    } else if (updates) {\n      if (updates.length === 0 || !updates.every(update => typeof update.timestamp === 'number')) {\n        throw new Error('XVIZ updates did not contain a valid timestamp');\n      }\n\n      const min = Math.min(updates.map(update => update.timestamp));\n      const max = Math.max(updates.map(update => update.timestamp));\n\n      this.messageTimings.messages.set(index, [min, max, index, messageName(index)]);\n    } else {\n      // Missing updates & index is invalid call\n      throw new Error('Cannot find timestamp');\n    }\n  }\n  /* eslint-enable camelcase */\n\n  writeToSink(name, msg) {\n    if (this.options.asArrayBuffer) {\n      const encoder = new TextEncoder();\n      // TODO: measure this as it is likely expensive\n      msg = encoder.encode(msg);\n    }\n\n    this.sink.writeSync(name, msg);\n  }\n}\n"],"file":"xviz-json-writer.js"}