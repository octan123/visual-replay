{"version":3,"sources":["../../../src/writers/xviz-format-writer.js"],"names":["XVIZJSONBufferWriter","sink","options","asArrayBuffer","XVIZJSONWriter","determineWriter","format","writer","XVIZ_FORMAT","BINARY_GLB","XVIZBinaryWriter","BINARY_PBE","XVIZProtobufWriter","JSON_BUFFER","JSON_STRING","Error","XVIZFormatWriter","flattenArrays","OBJECT","xvizMetadata","msg","message","writeMetadata","data","messageIndex","xvizData","writeMessage","close"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;AAaA;;AACA;;AACA;;AACA;;;;;;;;;;IAGMA,oB;;;;;AACJ,gCAAYC,IAAZ,EAAkBC,OAAlB,EAA2B;AAAA;AAAA,6BACnBD,IADmB,kCACTC,OADS;AACAC,MAAAA,aAAa,EAAE;AADf;AAE1B;;;EAHgCC,8B;;AAMnC,SAASC,eAAT,CAAyBJ,IAAzB,EAA+BK,MAA/B,EAAuCJ,OAAvC,EAAgD;AAC9C,MAAIK,MAAM,GAAG,IAAb;;AACA,UAAQD,MAAR;AACE,SAAKE,uBAAYC,UAAjB;AACEF,MAAAA,MAAM,GAAG,IAAIG,kCAAJ,CAAqBT,IAArB,EAA2BC,OAA3B,CAAT;AACA;;AACF,SAAKM,uBAAYG,UAAjB;AACEJ,MAAAA,MAAM,GAAG,IAAIK,sCAAJ,CAAuBX,IAAvB,EAA6BC,OAA7B,CAAT;AACA;;AACF,SAAKM,uBAAYK,WAAjB;AACEN,MAAAA,MAAM,GAAG,IAAIP,oBAAJ,CAAyBC,IAAzB,EAA+BC,OAA/B,CAAT;AACA;;AACF,SAAKM,uBAAYM,WAAjB;AACEP,MAAAA,MAAM,GAAG,IAAIH,8BAAJ,CAAmBH,IAAnB,EAAyBC,OAAzB,CAAT;AACA;;AACF;AACE,YAAM,IAAIa,KAAJ,6CAA+CT,MAA/C,EAAN;AAdJ;;AAiBA,SAAOC,MAAP;AACD;;IAGYS,gB;AACX,4BAAYf,IAAZ,QAAwC;AAAA,QAArBK,MAAqB,QAArBA,MAAqB;AAAA,QAAVJ,OAAU;AAAA;AACtC,SAAKI,MAAL,GAAcA,MAAd;AACA,SAAKJ,OAAL;AAAgBe,MAAAA,aAAa,EAAE;AAA/B,OAAwCf,OAAxC;;AAEA,QAAI,CAACI,MAAD,IAAWA,MAAM,KAAKE,uBAAYU,MAAtC,EAA8C;AAC5C,YAAM,IAAIH,KAAJ,kBAAoBT,MAApB,yCAAN;AACD;;AAED,SAAKC,MAAL,GAAcF,eAAe,CAACJ,IAAD,EAAOK,MAAP,EAAe,KAAKJ,OAApB,CAA7B;AACD;;;;kCAEaiB,Y,EAAc;AAC1B,UAAMC,GAAG,GAAGD,YAAY,CAACE,OAAb,EAAZ;AACA,WAAKd,MAAL,CAAYe,aAAZ,CAA0BF,GAAG,CAACG,IAA9B;AACD;;;iCAEYC,Y,EAAcC,Q,EAAU;AACnC,UAAML,GAAG,GAAGK,QAAQ,CAACJ,OAAT,EAAZ;AACA,WAAKd,MAAL,CAAYmB,YAAZ,CAAyBF,YAAzB,EAAuCJ,GAAG,CAACG,IAA3C;AACD;;;4BAEO;AACN,WAAKhB,MAAL,CAAYoB,KAAZ;AACD","sourcesContent":["// Copyright (c) 2019 Uber Technologies, Inc.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nimport {XVIZBinaryWriter} from '../writers/xviz-binary-writer';\nimport {XVIZProtobufWriter} from '../writers/xviz-protobuf-writer';\nimport {XVIZJSONWriter} from '../writers/xviz-json-writer';\nimport {XVIZ_FORMAT} from '../common/constants';\n\n// Convenience class for Formatting JSON String vs ArrayBuffer\nclass XVIZJSONBufferWriter extends XVIZJSONWriter {\n  constructor(sink, options) {\n    super(sink, {...options, asArrayBuffer: true});\n  }\n}\n\nfunction determineWriter(sink, format, options) {\n  let writer = null;\n  switch (format) {\n    case XVIZ_FORMAT.BINARY_GLB:\n      writer = new XVIZBinaryWriter(sink, options);\n      break;\n    case XVIZ_FORMAT.BINARY_PBE:\n      writer = new XVIZProtobufWriter(sink, options);\n      break;\n    case XVIZ_FORMAT.JSON_BUFFER:\n      writer = new XVIZJSONBufferWriter(sink, options);\n      break;\n    case XVIZ_FORMAT.JSON_STRING:\n      writer = new XVIZJSONWriter(sink, options);\n      break;\n    default:\n      throw new Error(`Cannot convert XVIZData to format ${format}`);\n  }\n\n  return writer;\n}\n\n// Convert XVIZData to a different XVIZ_FORMAT\nexport class XVIZFormatWriter {\n  constructor(sink, {format, ...options}) {\n    this.format = format;\n    this.options = {flattenArrays: true, ...options};\n\n    if (!format || format === XVIZ_FORMAT.OBJECT) {\n      throw new Error(`Format ${format} is not supported by XVIZFormatter.`);\n    }\n\n    this.writer = determineWriter(sink, format, this.options);\n  }\n\n  writeMetadata(xvizMetadata) {\n    const msg = xvizMetadata.message();\n    this.writer.writeMetadata(msg.data);\n  }\n\n  writeMessage(messageIndex, xvizData) {\n    const msg = xvizData.message();\n    this.writer.writeMessage(messageIndex, msg.data);\n  }\n\n  close() {\n    this.writer.close();\n  }\n}\n"],"file":"xviz-format-writer.js"}