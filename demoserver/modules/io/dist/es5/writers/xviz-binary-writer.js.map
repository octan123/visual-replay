{"version":3,"sources":["../../../src/writers/xviz-binary-writer.js"],"names":["toBuffer","binaryData","ArrayBuffer","isView","buffer","Buffer","byteLength","view","Uint8Array","i","length","Error","messageName","index","encodeBinaryXVIZ","xvizJson","options","gltfBuilder","GLTFBuilder","packedData","useAVSXVIZExtension","addExtension","XVIZ_GLTF_EXTENSION","nopack","addApplicationData","encodeAsGLB","XVIZBinaryWriter","sink","envelope","flattenArrays","DracoWriter","DracoLoader","messageTimings","messages","Map","wroteMessageIndex","encodingOptions","xvizMetadata","_checkValid","_saveTimestamp","XVIZEnvelope","Metadata","glbFileBuffer","writeSync","flag","messageIndex","xvizMessage","StateUpdate","startTime","endTime","messageTimes","Array","from","keys","sort","a","b","timing","forEach","value","limit","push","get","JSON","stringify","_writeMessageIndex","xviz_data","log_info","updates","undefined","start_time","end_time","every","update","timestamp","min","Math","map","max","set","XVIZBaseWriter"],"mappings":"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","sourcesContent":["// Copyright (c) 2019 Uber Technologies, Inc.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport {XVIZBaseWriter} from './xviz-base-writer';\nimport {GLTFBuilder} from '../gltf/gltf-builder';\nimport {packBinaryJson} from './xviz-pack-binary';\nimport {XVIZEnvelope, XVIZ_GLTF_EXTENSION} from '@xviz/io';\n\n// Convert (copy) ArrayBuffer to Buffer\n// This is from @loaders.gl/core/src/node/utils/to-buffer.node.js\n// but the function is no longer exported\nfunction toBuffer(binaryData) {\n  if (ArrayBuffer.isView(binaryData)) {\n    binaryData = binaryData.buffer;\n  }\n\n  if (typeof Buffer !== 'undefined' && binaryData instanceof ArrayBuffer) {\n    /* global Buffer */\n    const buffer = new Buffer(binaryData.byteLength);\n    const view = new Uint8Array(binaryData);\n    for (let i = 0; i < buffer.length; ++i) {\n      buffer[i] = view[i];\n    }\n    return buffer;\n  }\n\n  throw new Error('Failed to convert to buffer');\n}\n\n// 0-frame is an index file for timestamp metadata\n// 1-frame is the metadata file for the log\n// 2-frame is where the actual XVIZ updates begin\nconst messageName = index => `${index + 2}-frame`;\n\nexport function encodeBinaryXVIZ(xvizJson, options) {\n  const gltfBuilder = new GLTFBuilder(options);\n\n  // Pack appropriate large data elements (point clouds and images) in binary\n  const packedData = packBinaryJson(xvizJson, gltfBuilder, null, options);\n\n  // As permitted by glTF, we put all XVIZ data in a top-level subfield.\n  const {useAVSXVIZExtension} = options;\n  if (useAVSXVIZExtension === true) {\n    gltfBuilder.addExtension(XVIZ_GLTF_EXTENSION, packedData, {nopack: true});\n  } else {\n    gltfBuilder.addApplicationData('xviz', packedData, {nopack: true});\n  }\n\n  return gltfBuilder.encodeAsGLB(options);\n}\n\nexport class XVIZBinaryWriter extends XVIZBaseWriter {\n  constructor(sink, options = {}) {\n    super(sink);\n\n    const {envelope = true, flattenArrays = true, DracoWriter, DracoLoader} = options;\n    this.messageTimings = {\n      messages: new Map()\n    };\n    this.wroteMessageIndex = null;\n    this.options = {envelope, flattenArrays, DracoWriter, DracoLoader};\n\n    this.encodingOptions = {\n      flattenArrays: this.options.flattenArrays\n    };\n\n    if (this.options.DracoWriter) {\n      this.encodingOptions.DracoWriter = DracoWriter;\n    }\n\n    if (this.options.DracoLoader) {\n      this.encodingOptions.DracoLoader = DracoLoader;\n    }\n  }\n\n  // xvizMetadata is the object returned\n  // from a Builder.\n  writeMetadata(xvizMetadata) {\n    this._checkValid();\n    this._saveTimestamp(xvizMetadata);\n\n    if (this.options.envelope) {\n      xvizMetadata = XVIZEnvelope.Metadata(xvizMetadata);\n    }\n\n    const glbFileBuffer = encodeBinaryXVIZ(xvizMetadata, this.encodingOptions);\n    this.sink.writeSync(`1-frame.glb`, toBuffer(glbFileBuffer), {flag: 'w'});\n  }\n\n  writeMessage(messageIndex, xvizMessage) {\n    this._checkValid();\n    this._saveTimestamp(xvizMessage, messageIndex);\n\n    if (this.options.envelope) {\n      xvizMessage = XVIZEnvelope.StateUpdate(xvizMessage);\n    }\n\n    const glbFileBuffer = encodeBinaryXVIZ(xvizMessage, this.encodingOptions);\n    this.sink.writeSync(`${messageName(messageIndex)}.glb`, toBuffer(glbFileBuffer), {flag: 'w'});\n  }\n\n  _writeMessageIndex() {\n    this._checkValid();\n    const {startTime, endTime, messages} = this.messageTimings;\n    const messageTimings = {};\n\n    if (startTime) {\n      messageTimings.startTime = startTime;\n    }\n\n    if (endTime) {\n      messageTimings.endTime = endTime;\n    }\n\n    // Sort messages by index before writing out as an array\n    const messageTimes = Array.from(messages.keys()).sort((a, b) => a - b);\n\n    const timing = [];\n    messageTimes.forEach((value, index) => {\n      // Value is two greater than message index\n      const limit = timing.length;\n      if (value > limit) {\n        // Adding 2 because 1-frame is metadata file, so message data starts at 2\n        throw new Error(\n          `Error writing time index file. Messages are missing between ${limit + 2} and ${value +\n            2}`\n        );\n      }\n\n      timing.push(messages.get(value));\n    });\n    messageTimings.timing = timing;\n\n    this.sink.writeSync('0-frame.json', JSON.stringify(messageTimings));\n    this.wroteMessageIndex = timing.length;\n  }\n\n  close() {\n    if (this.sink) {\n      if (!this.wroteMessageIndex) {\n        this._writeMessageIndex();\n      }\n\n      super.close();\n    }\n  }\n\n  /* eslint-disable camelcase */\n  _saveTimestamp(xviz_data, index) {\n    const {log_info, updates} = xviz_data;\n\n    if (index === undefined) {\n      // Metadata case\n      if (log_info) {\n        const {start_time, end_time} = log_info || {};\n        if (start_time) {\n          this.messageTimings.startTime = start_time;\n        }\n\n        if (end_time) {\n          this.messageTimings.endTime = end_time;\n        }\n      }\n    } else if (updates) {\n      if (updates.length === 0 || !updates.every(update => typeof update.timestamp === 'number')) {\n        throw new Error('XVIZ updates did not contain a valid timestamp');\n      }\n\n      const min = Math.min(updates.map(update => update.timestamp));\n      const max = Math.max(updates.map(update => update.timestamp));\n\n      this.messageTimings.messages.set(index, [min, max, index, messageName(index)]);\n    } else {\n      // Missing updates & index is invalid call\n      throw new Error('Cannot find timestamp');\n    }\n  }\n  /* eslint-enable camelcase */\n}\n"],"file":"xviz-binary-writer.js"}