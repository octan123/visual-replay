{"version":3,"sources":["../../../src/gltf/gltf-builder.js"],"names":["GLTFBuilder","options","DracoWriter","DracoLoader","key","data","packOptions","jsonData","nopack","json","packedJson","extras","extensionName","extensions","registerUsedExtension","addExtension","registerRequiredExtension","extensionsUsed","find","ext","push","extensionsRequired","attributes","indices","mode","accessors","_addAttributes","glTFMesh","primitives","meshes","length","accessorIndices","Error","KHR_DRACO_MESH_COMPRESSION","compressedData","encodeSync","decodedData","parseSync","fauxAccessors","_addFauxAttributes","bufferViewIndex","addBufferView","bufferView","pointcloud","UBER_POINT_CLOUD_EXTENSION","imageData","sizeAndType","mimeType","width","height","images","GLBBuilder"],"mappings":"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","sourcesContent":["// Copyright (c) 2019 Uber Technologies, Inc.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nimport {getBinaryImageMetadata} from '@loaders.gl/images';\nimport {assert} from './assert';\nimport {KHR_DRACO_MESH_COMPRESSION, UBER_POINT_CLOUD_EXTENSION} from './gltf-constants';\nimport GLBBuilder from './glb-builder';\nimport {packBinaryJson} from '../writers/xviz-pack-binary';\n\nexport class GLTFBuilder extends GLBBuilder {\n  constructor(options = {}) {\n    super(options);\n\n    // Soft dependency on DRACO, app needs to import and supply these\n    this.DracoWriter = options.DracoWriter;\n    this.DracoLoader = options.DracoLoader;\n  }\n\n  // NOTE: encode() inherited from GLBBuilder\n\n  // TODO - support encoding to non-GLB versions of glTF format\n  // Encode as a textual JSON file with binary data in base64 data URLs.\n  // encodeAsDataURLs(options)\n  // Encode as a JSON with all images (and buffers?) in separate binary files\n  // encodeAsSeparateFiles(options)\n\n  // Add an extra application-defined key to the top-level data structure\n  // By default packs JSON by extracting binary data and replacing it with JSON pointers\n  addApplicationData(key, data, packOptions = {}) {\n    const jsonData = packOptions.nopack ? data : packBinaryJson(data, this, null, packOptions);\n    this.json[key] = jsonData;\n    return this;\n  }\n\n  // `extras` - Standard GLTF field for storing application specific data\n  // By default packs JSON by extracting binary data and replacing it with JSON pointers\n  addExtraData(key, data, packOptions = {}) {\n    const packedJson = packOptions.nopack ? data : packBinaryJson(data, this, null, packOptions);\n    this.json.extras = this.json.extras || {};\n    this.json.extras[key] = packedJson;\n    return this;\n  }\n\n  // Add to standard GLTF top level extension object, mark as used\n  // By default packs JSON by extracting binary data and replacing it with JSON pointers\n  addExtension(extensionName, data, packOptions = {}) {\n    assert(data);\n    const packedJson = packOptions.nopack ? data : packBinaryJson(data, this, null, packOptions);\n    this.json.extensions = this.json.extensions || {};\n    this.json.extensions[extensionName] = packedJson;\n    this.registerUsedExtension(extensionName);\n    return this;\n  }\n\n  // Standard GLTF top level extension object, mark as used and required\n  // By default packs JSON by extracting binary data and replacing it with JSON pointers\n  addRequiredExtension(extensionName, data, packOptions = {}) {\n    assert(data);\n    const packedJson = packOptions.nopack ? data : packBinaryJson(data, this, null, packOptions);\n    this.addExtension(extensionName, packedJson);\n    this.registerRequiredExtension(extensionName);\n    return this;\n  }\n\n  // Add extensionName to list of used extensions\n  registerUsedExtension(extensionName) {\n    this.json.extensionsUsed = this.json.extensionsUsed || [];\n    if (!this.json.extensionsUsed.find(ext => ext === extensionName)) {\n      this.json.extensionsUsed.push(extensionName);\n    }\n  }\n\n  // Add extensionName to list of required extensions\n  registerRequiredExtension(extensionName) {\n    this.registerUsedExtension(extensionName);\n    this.json.extensionsRequired = this.json.extensionsRequired || [];\n    if (!this.json.extensionsRequired.find(ext => ext === extensionName)) {\n      this.json.extensionsRequired.push(extensionName);\n    }\n  }\n\n  // mode:\n  // POINTS:  0x0000,\n  // LINES: 0x0001,\n  // LINE_LOOP: 0x0002,\n  // LINE_STRIP:  0x0003,\n  // TRIANGLES: 0x0004,\n  // TRIANGLE_STRIP:  0x0005,\n  // TRIANGLE_FAN:  0x0006,\n\n  addMesh(attributes, indices, mode = 4) {\n    const accessors = this._addAttributes(attributes);\n\n    const glTFMesh = {\n      primitives: [\n        {\n          attributes: accessors,\n          indices,\n          mode\n        }\n      ]\n    };\n\n    this.json.meshes = this.json.meshes || [];\n    this.json.meshes.push(glTFMesh);\n    return this.json.meshes.length - 1;\n  }\n\n  addPointCloud(attributes) {\n    const accessorIndices = this._addAttributes(attributes);\n\n    const glTFMesh = {\n      primitives: [\n        {\n          attributes: accessorIndices,\n          mode: 0 // GL.POINTS\n        }\n      ]\n    };\n\n    this.json.meshes = this.json.meshes || [];\n    this.json.meshes.push(glTFMesh);\n    return this.json.meshes.length - 1;\n  }\n\n  // eslint-disable-next-line max-len\n  // https://github.com/KhronosGroup/glTF/tree/master/extensions/2.0/Khronos/KHR_draco_mesh_compression\n  // Only TRIANGLES: 0x0004 and TRIANGLE_STRIP: 0x0005 are supported\n  addCompressedMesh(attributes, indices, mode = 4) {\n    if (!this.DracoWriter || !this.DracoLoader) {\n      throw new Error('DracoWriter/DracoLoader not available');\n    }\n\n    // Since we do not add fallback data\n    this.registerRequiredExtension(KHR_DRACO_MESH_COMPRESSION);\n\n    const compressedData = this.DracoWriter.encodeSync({attributes});\n\n    // Draco compression may change the order and number of vertices in a mesh.\n    // To satisfy the requirement that accessors properties be correct for both\n    // compressed and uncompressed data, generators should create uncompressed\n    // attributes and indices using data that has been decompressed from the Draco buffer,\n    // rather than the original source data.\n    const decodedData = this.DracoLoader.parseSync({attributes});\n    const fauxAccessors = this._addFauxAttributes(decodedData.attributes);\n\n    const bufferViewIndex = this.addBufferView(compressedData);\n\n    const glTFMesh = {\n      primitives: [\n        {\n          attributes: fauxAccessors, // TODO - verify with spec\n          mode, // GL.POINTS\n          extensions: {\n            [KHR_DRACO_MESH_COMPRESSION]: {\n              bufferView: bufferViewIndex,\n              attributes: fauxAccessors // TODO - verify with spec\n            }\n          }\n        }\n      ]\n    };\n\n    this.json.meshes = this.json.meshes || [];\n    this.json.meshes.push(glTFMesh);\n    return this.json.meshes.length - 1;\n  }\n\n  addCompressedPointCloud(attributes) {\n    if (!this.DracoWriter || !this.DracoLoader) {\n      throw new Error('DracoWriter/DracoLoader not available');\n    }\n\n    attributes.mode = 0;\n    const compressedData = this.DracoWriter.encodeSync(attributes, {pointcloud: true});\n\n    const bufferViewIndex = this.addBufferView(compressedData);\n\n    const glTFMesh = {\n      primitives: [\n        {\n          attributes: {}, // This will be populated after decompression\n          mode: 0, // GL.POINTS\n          extensions: {\n            [UBER_POINT_CLOUD_EXTENSION]: {\n              bufferView: bufferViewIndex\n            }\n          }\n        }\n      ]\n    };\n\n    this.registerRequiredExtension(UBER_POINT_CLOUD_EXTENSION);\n\n    this.json.meshes = this.json.meshes || [];\n    this.json.meshes.push(glTFMesh);\n    return this.json.meshes.length - 1;\n  }\n\n  // Adds a binary image. Builds glTF \"JSON metadata\" and saves buffer reference\n  // Buffer will be copied into BIN chunk during \"pack\"\n  // Currently encodes as glTF image\n  addImage(imageData) {\n    const bufferViewIndex = this.addBufferView(imageData);\n\n    // Get the properties of the image to add as metadata.\n    const sizeAndType = getBinaryImageMetadata(imageData) || {};\n    if (sizeAndType) {\n      // width and height are non-spec fields\n      const {mimeType, width, height} = sizeAndType;\n      this.json.images.push({\n        bufferView: bufferViewIndex,\n        mimeType,\n        width,\n        height\n      });\n    } else {\n      // TODO: Spec violation, if we are using a bufferView, mimeType must be defined:\n      //   https://github.com/KhronosGroup/glTF/tree/master/specification/2.0#images\n      //   \"a reference to a bufferView; in that case mimeType must be defined.\"\n      this.json.images.push({\n        bufferView: bufferViewIndex\n      });\n    }\n\n    return this.json.images.length - 1;\n  }\n}\n"],"file":"gltf-builder.js"}