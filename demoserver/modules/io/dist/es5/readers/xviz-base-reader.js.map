{"version":3,"sources":["../../../src/readers/xviz-base-reader.js"],"names":["XVIZBaseReader","source","options","suffix","index","_readIndex","data","readSync","_xvizMessage","forceJson","undefined","messageIndex","existsSync","startTime","endTime","timing","length","timestamp","messageCount","lastMessage","first","last","findIndex","timeEntry","i","close","indexData","JSON","parse"],"mappings":"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","sourcesContent":["// Copyright (c) 2019 Uber Technologies, Inc.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nimport {isJSONString} from '../common/loaders';\n\n// Base class that uses a Source to read file XVIZ file data\nexport class XVIZBaseReader {\n  constructor(source, options = {}) {\n    this.source = source;\n    this.options = options;\n    this.suffix = options.suffix || '-frame.json';\n\n    // Read the message index\n    this.index = this._readIndex();\n    /* Index schema\n     * startTime,\n     * endTime,\n     * timing: [ [minMessageTime, maxMessageTime, index, name], ...]\n     */\n  }\n\n  readMetadata() {\n    if (this.source) {\n      let data = this.source.readSync(this._xvizMessage(1));\n      if (!data) {\n        data = this.source.readSync(this._xvizMessage(1, {forceJson: true}));\n      }\n      return data;\n    }\n\n    return undefined;\n  }\n\n  readMessage(messageIndex) {\n    if (this.source) {\n      // Data messages begin at the filename 2-frame.*\n      return this.source.readSync(this._xvizMessage(2 + messageIndex));\n    }\n\n    return undefined;\n  }\n\n  checkMessage(messageIndex) {\n    if (this.source) {\n      return this.source.existsSync(this._xvizMessage(2 + messageIndex));\n    }\n\n    return false;\n  }\n\n  timeRange() {\n    if (this.index) {\n      const {startTime, endTime} = this.index;\n      return {startTime, endTime};\n    }\n\n    return {startTime: null, endTime: null};\n  }\n\n  messageCount() {\n    if (this.index) {\n      return this.index.timing.length;\n    }\n\n    return undefined;\n  }\n\n  // Returns 2 indices covering the messages that bound the requested timestamp\n  findMessage(timestamp) {\n    if (!this.index) {\n      return undefined;\n    }\n\n    const {startTime, endTime, timing} = this.index;\n    const messageCount = this.messageCount();\n    const lastMessage = messageCount > 0 ? messageCount - 1 : 0;\n\n    if (timestamp < startTime) {\n      return {first: 0, last: 0};\n    }\n\n    if (timestamp > endTime) {\n      return {first: lastMessage, last: lastMessage};\n    }\n\n    let first = timing.findIndex(timeEntry => timeEntry[0] >= timestamp);\n\n    // Reverse search for end index\n    let last = -1;\n    let i = lastMessage;\n    while (i >= 0) {\n      const timeEntry = timing[i];\n      if (timeEntry[1] <= timestamp) {\n        last = i;\n        break;\n      }\n\n      i--;\n    }\n\n    if (first === -1) {\n      first = 0;\n    }\n\n    if (last === -1) {\n      last = lastMessage;\n    }\n\n    return {first, last};\n  }\n\n  close() {\n    this.source.close();\n  }\n\n  // Support various formatted message names\n  _xvizMessage(index, {forceJson = false} = {}) {\n    if (index === 0 || forceJson) {\n      return `${index}-frame.json`;\n    }\n\n    return `${index}${this.suffix}`;\n  }\n\n  _readIndex() {\n    if (this.source) {\n      const indexData = this.source.readSync(this._xvizMessage(0));\n      if (indexData) {\n        if (isJSONString(indexData)) {\n          return JSON.parse(indexData);\n        } else if (typeof indexData === 'object') {\n          return indexData;\n        }\n      }\n    }\n\n    return undefined;\n  }\n}\n"],"file":"xviz-base-reader.js"}