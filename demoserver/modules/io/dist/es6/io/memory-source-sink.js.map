{"version":3,"sources":["../../../src/io/memory-source-sink.js"],"names":["MemorySourceSink","constructor","data","Map","readSync","name","get","writeSync","ArrayBuffer","isView","length","buffer","set","existsSync","has","close","entries"],"mappings":"AAgBA,OAAO,MAAMA,gBAAN,CAAuB;AAC5BC,EAAAA,WAAW,GAAG;AACZ,SAAKC,IAAL,GAAY,IAAIC,GAAJ,EAAZ;AACD;;AAEDC,EAAAA,QAAQ,CAACC,IAAD,EAAO;AACb,WAAO,KAAKH,IAAL,CAAUI,GAAV,CAAcD,IAAd,CAAP;AACD;;AAEDE,EAAAA,SAAS,CAACF,IAAD,EAAOH,IAAP,EAAa;AAIpB,QAAIM,WAAW,CAACC,MAAZ,CAAmBP,IAAnB,KAA4BA,IAAI,CAACQ,MAAjC,IAA2CR,IAAI,CAACS,MAApD,EAA4D;AAC1D,WAAKT,IAAL,CAAUU,GAAV,CAAcP,IAAd,EAAoBH,IAAI,CAACS,MAAzB;AACD,KAFD,MAEO;AACL,WAAKT,IAAL,CAAUU,GAAV,CAAcP,IAAd,EAAoBH,IAApB;AACD;AACF;;AAEDW,EAAAA,UAAU,CAACR,IAAD,EAAO;AACf,WAAO,KAAKH,IAAL,CAAUY,GAAV,CAAcT,IAAd,CAAP;AACD;;AAEDU,EAAAA,KAAK,GAAG,CAAE;;AAEVC,EAAAA,OAAO,GAAG;AACR,WAAO,KAAKd,IAAL,CAAUc,OAAV,EAAP;AACD;;AAEDF,EAAAA,GAAG,CAACT,IAAD,EAAO;AACR,WAAO,KAAKH,IAAL,CAAUY,GAAV,CAAcT,IAAd,CAAP;AACD;;AAhC2B","sourcesContent":["// Copyright (c) 2019 Uber Technologies, Inc.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n/**\n * Memory storage for XVIZ data\n */\nexport class MemorySourceSink {\n  constructor() {\n    this.data = new Map();\n  }\n\n  readSync(name) {\n    return this.data.get(name);\n  }\n\n  writeSync(name, data) {\n    // Save the underlying arrayBuffer not the TypedArray\n    // because when reading we should have an ArrayBuffer\n    // and the consumer should make the Type decision\n    if (ArrayBuffer.isView(data) && data.length && data.buffer) {\n      this.data.set(name, data.buffer);\n    } else {\n      this.data.set(name, data);\n    }\n  }\n\n  existsSync(name) {\n    return this.data.has(name);\n  }\n\n  close() {}\n\n  entries() {\n    return this.data.entries();\n  }\n\n  has(name) {\n    return this.data.has(name);\n  }\n}\n"],"file":"memory-source-sink.js"}