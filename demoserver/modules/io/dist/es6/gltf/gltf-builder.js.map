{"version":3,"sources":["../../../src/gltf/gltf-builder.js"],"names":["getBinaryImageMetadata","assert","KHR_DRACO_MESH_COMPRESSION","UBER_POINT_CLOUD_EXTENSION","GLBBuilder","packBinaryJson","GLTFBuilder","constructor","options","DracoWriter","DracoLoader","addApplicationData","key","data","packOptions","jsonData","nopack","json","addExtraData","packedJson","extras","addExtension","extensionName","extensions","registerUsedExtension","addRequiredExtension","registerRequiredExtension","extensionsUsed","find","ext","push","extensionsRequired","addMesh","attributes","indices","mode","accessors","_addAttributes","glTFMesh","primitives","meshes","length","addPointCloud","accessorIndices","addCompressedMesh","Error","compressedData","encodeSync","decodedData","parseSync","fauxAccessors","_addFauxAttributes","bufferViewIndex","addBufferView","bufferView","addCompressedPointCloud","pointcloud","addImage","imageData","sizeAndType","mimeType","width","height","images"],"mappings":"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","sourcesContent":["// Copyright (c) 2019 Uber Technologies, Inc.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nimport {getBinaryImageMetadata} from '@loaders.gl/images';\nimport {assert} from './assert';\nimport {KHR_DRACO_MESH_COMPRESSION, UBER_POINT_CLOUD_EXTENSION} from './gltf-constants';\nimport GLBBuilder from './glb-builder';\nimport {packBinaryJson} from '../writers/xviz-pack-binary';\n\nexport class GLTFBuilder extends GLBBuilder {\n  constructor(options = {}) {\n    super(options);\n\n    // Soft dependency on DRACO, app needs to import and supply these\n    this.DracoWriter = options.DracoWriter;\n    this.DracoLoader = options.DracoLoader;\n  }\n\n  // NOTE: encode() inherited from GLBBuilder\n\n  // TODO - support encoding to non-GLB versions of glTF format\n  // Encode as a textual JSON file with binary data in base64 data URLs.\n  // encodeAsDataURLs(options)\n  // Encode as a JSON with all images (and buffers?) in separate binary files\n  // encodeAsSeparateFiles(options)\n\n  // Add an extra application-defined key to the top-level data structure\n  // By default packs JSON by extracting binary data and replacing it with JSON pointers\n  addApplicationData(key, data, packOptions = {}) {\n    const jsonData = packOptions.nopack ? data : packBinaryJson(data, this, null, packOptions);\n    this.json[key] = jsonData;\n    return this;\n  }\n\n  // `extras` - Standard GLTF field for storing application specific data\n  // By default packs JSON by extracting binary data and replacing it with JSON pointers\n  addExtraData(key, data, packOptions = {}) {\n    const packedJson = packOptions.nopack ? data : packBinaryJson(data, this, null, packOptions);\n    this.json.extras = this.json.extras || {};\n    this.json.extras[key] = packedJson;\n    return this;\n  }\n\n  // Add to standard GLTF top level extension object, mark as used\n  // By default packs JSON by extracting binary data and replacing it with JSON pointers\n  addExtension(extensionName, data, packOptions = {}) {\n    assert(data);\n    const packedJson = packOptions.nopack ? data : packBinaryJson(data, this, null, packOptions);\n    this.json.extensions = this.json.extensions || {};\n    this.json.extensions[extensionName] = packedJson;\n    this.registerUsedExtension(extensionName);\n    return this;\n  }\n\n  // Standard GLTF top level extension object, mark as used and required\n  // By default packs JSON by extracting binary data and replacing it with JSON pointers\n  addRequiredExtension(extensionName, data, packOptions = {}) {\n    assert(data);\n    const packedJson = packOptions.nopack ? data : packBinaryJson(data, this, null, packOptions);\n    this.addExtension(extensionName, packedJson);\n    this.registerRequiredExtension(extensionName);\n    return this;\n  }\n\n  // Add extensionName to list of used extensions\n  registerUsedExtension(extensionName) {\n    this.json.extensionsUsed = this.json.extensionsUsed || [];\n    if (!this.json.extensionsUsed.find(ext => ext === extensionName)) {\n      this.json.extensionsUsed.push(extensionName);\n    }\n  }\n\n  // Add extensionName to list of required extensions\n  registerRequiredExtension(extensionName) {\n    this.registerUsedExtension(extensionName);\n    this.json.extensionsRequired = this.json.extensionsRequired || [];\n    if (!this.json.extensionsRequired.find(ext => ext === extensionName)) {\n      this.json.extensionsRequired.push(extensionName);\n    }\n  }\n\n  // mode:\n  // POINTS:  0x0000,\n  // LINES: 0x0001,\n  // LINE_LOOP: 0x0002,\n  // LINE_STRIP:  0x0003,\n  // TRIANGLES: 0x0004,\n  // TRIANGLE_STRIP:  0x0005,\n  // TRIANGLE_FAN:  0x0006,\n\n  addMesh(attributes, indices, mode = 4) {\n    const accessors = this._addAttributes(attributes);\n\n    const glTFMesh = {\n      primitives: [\n        {\n          attributes: accessors,\n          indices,\n          mode\n        }\n      ]\n    };\n\n    this.json.meshes = this.json.meshes || [];\n    this.json.meshes.push(glTFMesh);\n    return this.json.meshes.length - 1;\n  }\n\n  addPointCloud(attributes) {\n    const accessorIndices = this._addAttributes(attributes);\n\n    const glTFMesh = {\n      primitives: [\n        {\n          attributes: accessorIndices,\n          mode: 0 // GL.POINTS\n        }\n      ]\n    };\n\n    this.json.meshes = this.json.meshes || [];\n    this.json.meshes.push(glTFMesh);\n    return this.json.meshes.length - 1;\n  }\n\n  // eslint-disable-next-line max-len\n  // https://github.com/KhronosGroup/glTF/tree/master/extensions/2.0/Khronos/KHR_draco_mesh_compression\n  // Only TRIANGLES: 0x0004 and TRIANGLE_STRIP: 0x0005 are supported\n  addCompressedMesh(attributes, indices, mode = 4) {\n    if (!this.DracoWriter || !this.DracoLoader) {\n      throw new Error('DracoWriter/DracoLoader not available');\n    }\n\n    // Since we do not add fallback data\n    this.registerRequiredExtension(KHR_DRACO_MESH_COMPRESSION);\n\n    const compressedData = this.DracoWriter.encodeSync({attributes});\n\n    // Draco compression may change the order and number of vertices in a mesh.\n    // To satisfy the requirement that accessors properties be correct for both\n    // compressed and uncompressed data, generators should create uncompressed\n    // attributes and indices using data that has been decompressed from the Draco buffer,\n    // rather than the original source data.\n    const decodedData = this.DracoLoader.parseSync({attributes});\n    const fauxAccessors = this._addFauxAttributes(decodedData.attributes);\n\n    const bufferViewIndex = this.addBufferView(compressedData);\n\n    const glTFMesh = {\n      primitives: [\n        {\n          attributes: fauxAccessors, // TODO - verify with spec\n          mode, // GL.POINTS\n          extensions: {\n            [KHR_DRACO_MESH_COMPRESSION]: {\n              bufferView: bufferViewIndex,\n              attributes: fauxAccessors // TODO - verify with spec\n            }\n          }\n        }\n      ]\n    };\n\n    this.json.meshes = this.json.meshes || [];\n    this.json.meshes.push(glTFMesh);\n    return this.json.meshes.length - 1;\n  }\n\n  addCompressedPointCloud(attributes) {\n    if (!this.DracoWriter || !this.DracoLoader) {\n      throw new Error('DracoWriter/DracoLoader not available');\n    }\n\n    attributes.mode = 0;\n    const compressedData = this.DracoWriter.encodeSync(attributes, {pointcloud: true});\n\n    const bufferViewIndex = this.addBufferView(compressedData);\n\n    const glTFMesh = {\n      primitives: [\n        {\n          attributes: {}, // This will be populated after decompression\n          mode: 0, // GL.POINTS\n          extensions: {\n            [UBER_POINT_CLOUD_EXTENSION]: {\n              bufferView: bufferViewIndex\n            }\n          }\n        }\n      ]\n    };\n\n    this.registerRequiredExtension(UBER_POINT_CLOUD_EXTENSION);\n\n    this.json.meshes = this.json.meshes || [];\n    this.json.meshes.push(glTFMesh);\n    return this.json.meshes.length - 1;\n  }\n\n  // Adds a binary image. Builds glTF \"JSON metadata\" and saves buffer reference\n  // Buffer will be copied into BIN chunk during \"pack\"\n  // Currently encodes as glTF image\n  addImage(imageData) {\n    const bufferViewIndex = this.addBufferView(imageData);\n\n    // Get the properties of the image to add as metadata.\n    const sizeAndType = getBinaryImageMetadata(imageData) || {};\n    if (sizeAndType) {\n      // width and height are non-spec fields\n      const {mimeType, width, height} = sizeAndType;\n      this.json.images.push({\n        bufferView: bufferViewIndex,\n        mimeType,\n        width,\n        height\n      });\n    } else {\n      // TODO: Spec violation, if we are using a bufferView, mimeType must be defined:\n      //   https://github.com/KhronosGroup/glTF/tree/master/specification/2.0#images\n      //   \"a reference to a bufferView; in that case mimeType must be defined.\"\n      this.json.images.push({\n        bufferView: bufferViewIndex\n      });\n    }\n\n    return this.json.images.length - 1;\n  }\n}\n"],"file":"gltf-builder.js"}