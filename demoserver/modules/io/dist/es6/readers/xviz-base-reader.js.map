{"version":3,"sources":["../../../src/readers/xviz-base-reader.js"],"names":["isJSONString","XVIZBaseReader","constructor","source","options","suffix","index","_readIndex","readMetadata","data","readSync","_xvizMessage","forceJson","undefined","readMessage","messageIndex","checkMessage","existsSync","timeRange","startTime","endTime","messageCount","timing","length","findMessage","timestamp","lastMessage","first","last","findIndex","timeEntry","i","close","indexData","JSON","parse"],"mappings":"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","sourcesContent":["// Copyright (c) 2019 Uber Technologies, Inc.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nimport {isJSONString} from '../common/loaders';\n\n// Base class that uses a Source to read file XVIZ file data\nexport class XVIZBaseReader {\n  constructor(source, options = {}) {\n    this.source = source;\n    this.options = options;\n    this.suffix = options.suffix || '-frame.json';\n\n    // Read the message index\n    this.index = this._readIndex();\n    /* Index schema\n     * startTime,\n     * endTime,\n     * timing: [ [minMessageTime, maxMessageTime, index, name], ...]\n     */\n  }\n\n  readMetadata() {\n    if (this.source) {\n      let data = this.source.readSync(this._xvizMessage(1));\n      if (!data) {\n        data = this.source.readSync(this._xvizMessage(1, {forceJson: true}));\n      }\n      return data;\n    }\n\n    return undefined;\n  }\n\n  readMessage(messageIndex) {\n    if (this.source) {\n      // Data messages begin at the filename 2-frame.*\n      return this.source.readSync(this._xvizMessage(2 + messageIndex));\n    }\n\n    return undefined;\n  }\n\n  checkMessage(messageIndex) {\n    if (this.source) {\n      return this.source.existsSync(this._xvizMessage(2 + messageIndex));\n    }\n\n    return false;\n  }\n\n  timeRange() {\n    if (this.index) {\n      const {startTime, endTime} = this.index;\n      return {startTime, endTime};\n    }\n\n    return {startTime: null, endTime: null};\n  }\n\n  messageCount() {\n    if (this.index) {\n      return this.index.timing.length;\n    }\n\n    return undefined;\n  }\n\n  // Returns 2 indices covering the messages that bound the requested timestamp\n  findMessage(timestamp) {\n    if (!this.index) {\n      return undefined;\n    }\n\n    const {startTime, endTime, timing} = this.index;\n    const messageCount = this.messageCount();\n    const lastMessage = messageCount > 0 ? messageCount - 1 : 0;\n\n    if (timestamp < startTime) {\n      return {first: 0, last: 0};\n    }\n\n    if (timestamp > endTime) {\n      return {first: lastMessage, last: lastMessage};\n    }\n\n    let first = timing.findIndex(timeEntry => timeEntry[0] >= timestamp);\n\n    // Reverse search for end index\n    let last = -1;\n    let i = lastMessage;\n    while (i >= 0) {\n      const timeEntry = timing[i];\n      if (timeEntry[1] <= timestamp) {\n        last = i;\n        break;\n      }\n\n      i--;\n    }\n\n    if (first === -1) {\n      first = 0;\n    }\n\n    if (last === -1) {\n      last = lastMessage;\n    }\n\n    return {first, last};\n  }\n\n  close() {\n    this.source.close();\n  }\n\n  // Support various formatted message names\n  _xvizMessage(index, {forceJson = false} = {}) {\n    if (index === 0 || forceJson) {\n      return `${index}-frame.json`;\n    }\n\n    return `${index}${this.suffix}`;\n  }\n\n  _readIndex() {\n    if (this.source) {\n      const indexData = this.source.readSync(this._xvizMessage(0));\n      if (indexData) {\n        if (isJSONString(indexData)) {\n          return JSON.parse(indexData);\n        } else if (typeof indexData === 'object') {\n          return indexData;\n        }\n      }\n    }\n\n    return undefined;\n  }\n}\n"],"file":"xviz-base-reader.js"}