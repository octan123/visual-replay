{"version":3,"sources":["../../../src/writers/xviz-binary-writer.js"],"names":["XVIZBaseWriter","GLTFBuilder","packBinaryJson","XVIZEnvelope","XVIZ_GLTF_EXTENSION","toBuffer","binaryData","ArrayBuffer","isView","buffer","Buffer","byteLength","view","Uint8Array","i","length","Error","messageName","index","encodeBinaryXVIZ","xvizJson","options","gltfBuilder","packedData","useAVSXVIZExtension","addExtension","nopack","addApplicationData","encodeAsGLB","XVIZBinaryWriter","constructor","sink","envelope","flattenArrays","DracoWriter","DracoLoader","messageTimings","messages","Map","wroteMessageIndex","encodingOptions","writeMetadata","xvizMetadata","_checkValid","_saveTimestamp","Metadata","glbFileBuffer","writeSync","flag","writeMessage","messageIndex","xvizMessage","StateUpdate","_writeMessageIndex","startTime","endTime","messageTimes","Array","from","keys","sort","a","b","timing","forEach","value","limit","push","get","JSON","stringify","close","xviz_data","log_info","updates","undefined","start_time","end_time","every","update","timestamp","min","Math","map","max","set"],"mappings":"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","sourcesContent":["// Copyright (c) 2019 Uber Technologies, Inc.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport {XVIZBaseWriter} from './xviz-base-writer';\nimport {GLTFBuilder} from '../gltf/gltf-builder';\nimport {packBinaryJson} from './xviz-pack-binary';\nimport {XVIZEnvelope, XVIZ_GLTF_EXTENSION} from '@xviz/io';\n\n// Convert (copy) ArrayBuffer to Buffer\n// This is from @loaders.gl/core/src/node/utils/to-buffer.node.js\n// but the function is no longer exported\nfunction toBuffer(binaryData) {\n  if (ArrayBuffer.isView(binaryData)) {\n    binaryData = binaryData.buffer;\n  }\n\n  if (typeof Buffer !== 'undefined' && binaryData instanceof ArrayBuffer) {\n    /* global Buffer */\n    const buffer = new Buffer(binaryData.byteLength);\n    const view = new Uint8Array(binaryData);\n    for (let i = 0; i < buffer.length; ++i) {\n      buffer[i] = view[i];\n    }\n    return buffer;\n  }\n\n  throw new Error('Failed to convert to buffer');\n}\n\n// 0-frame is an index file for timestamp metadata\n// 1-frame is the metadata file for the log\n// 2-frame is where the actual XVIZ updates begin\nconst messageName = index => `${index + 2}-frame`;\n\nexport function encodeBinaryXVIZ(xvizJson, options) {\n  const gltfBuilder = new GLTFBuilder(options);\n\n  // Pack appropriate large data elements (point clouds and images) in binary\n  const packedData = packBinaryJson(xvizJson, gltfBuilder, null, options);\n\n  // As permitted by glTF, we put all XVIZ data in a top-level subfield.\n  const {useAVSXVIZExtension} = options;\n  if (useAVSXVIZExtension === true) {\n    gltfBuilder.addExtension(XVIZ_GLTF_EXTENSION, packedData, {nopack: true});\n  } else {\n    gltfBuilder.addApplicationData('xviz', packedData, {nopack: true});\n  }\n\n  return gltfBuilder.encodeAsGLB(options);\n}\n\nexport class XVIZBinaryWriter extends XVIZBaseWriter {\n  constructor(sink, options = {}) {\n    super(sink);\n\n    const {envelope = true, flattenArrays = true, DracoWriter, DracoLoader} = options;\n    this.messageTimings = {\n      messages: new Map()\n    };\n    this.wroteMessageIndex = null;\n    this.options = {envelope, flattenArrays, DracoWriter, DracoLoader};\n\n    this.encodingOptions = {\n      flattenArrays: this.options.flattenArrays\n    };\n\n    if (this.options.DracoWriter) {\n      this.encodingOptions.DracoWriter = DracoWriter;\n    }\n\n    if (this.options.DracoLoader) {\n      this.encodingOptions.DracoLoader = DracoLoader;\n    }\n  }\n\n  // xvizMetadata is the object returned\n  // from a Builder.\n  writeMetadata(xvizMetadata) {\n    this._checkValid();\n    this._saveTimestamp(xvizMetadata);\n\n    if (this.options.envelope) {\n      xvizMetadata = XVIZEnvelope.Metadata(xvizMetadata);\n    }\n\n    const glbFileBuffer = encodeBinaryXVIZ(xvizMetadata, this.encodingOptions);\n    this.sink.writeSync(`1-frame.glb`, toBuffer(glbFileBuffer), {flag: 'w'});\n  }\n\n  writeMessage(messageIndex, xvizMessage) {\n    this._checkValid();\n    this._saveTimestamp(xvizMessage, messageIndex);\n\n    if (this.options.envelope) {\n      xvizMessage = XVIZEnvelope.StateUpdate(xvizMessage);\n    }\n\n    const glbFileBuffer = encodeBinaryXVIZ(xvizMessage, this.encodingOptions);\n    this.sink.writeSync(`${messageName(messageIndex)}.glb`, toBuffer(glbFileBuffer), {flag: 'w'});\n  }\n\n  _writeMessageIndex() {\n    this._checkValid();\n    const {startTime, endTime, messages} = this.messageTimings;\n    const messageTimings = {};\n\n    if (startTime) {\n      messageTimings.startTime = startTime;\n    }\n\n    if (endTime) {\n      messageTimings.endTime = endTime;\n    }\n\n    // Sort messages by index before writing out as an array\n    const messageTimes = Array.from(messages.keys()).sort((a, b) => a - b);\n\n    const timing = [];\n    messageTimes.forEach((value, index) => {\n      // Value is two greater than message index\n      const limit = timing.length;\n      if (value > limit) {\n        // Adding 2 because 1-frame is metadata file, so message data starts at 2\n        throw new Error(\n          `Error writing time index file. Messages are missing between ${limit + 2} and ${value +\n            2}`\n        );\n      }\n\n      timing.push(messages.get(value));\n    });\n    messageTimings.timing = timing;\n\n    this.sink.writeSync('0-frame.json', JSON.stringify(messageTimings));\n    this.wroteMessageIndex = timing.length;\n  }\n\n  close() {\n    if (this.sink) {\n      if (!this.wroteMessageIndex) {\n        this._writeMessageIndex();\n      }\n\n      super.close();\n    }\n  }\n\n  /* eslint-disable camelcase */\n  _saveTimestamp(xviz_data, index) {\n    const {log_info, updates} = xviz_data;\n\n    if (index === undefined) {\n      // Metadata case\n      if (log_info) {\n        const {start_time, end_time} = log_info || {};\n        if (start_time) {\n          this.messageTimings.startTime = start_time;\n        }\n\n        if (end_time) {\n          this.messageTimings.endTime = end_time;\n        }\n      }\n    } else if (updates) {\n      if (updates.length === 0 || !updates.every(update => typeof update.timestamp === 'number')) {\n        throw new Error('XVIZ updates did not contain a valid timestamp');\n      }\n\n      const min = Math.min(updates.map(update => update.timestamp));\n      const max = Math.max(updates.map(update => update.timestamp));\n\n      this.messageTimings.messages.set(index, [min, max, index, messageName(index)]);\n    } else {\n      // Missing updates & index is invalid call\n      throw new Error('Cannot find timestamp');\n    }\n  }\n  /* eslint-enable camelcase */\n}\n"],"file":"xviz-binary-writer.js"}