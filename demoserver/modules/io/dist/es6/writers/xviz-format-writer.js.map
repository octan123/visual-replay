{"version":3,"sources":["../../../src/writers/xviz-format-writer.js"],"names":["XVIZBinaryWriter","XVIZProtobufWriter","XVIZJSONWriter","XVIZ_FORMAT","XVIZJSONBufferWriter","constructor","sink","options","asArrayBuffer","determineWriter","format","writer","BINARY_GLB","BINARY_PBE","JSON_BUFFER","JSON_STRING","Error","XVIZFormatWriter","flattenArrays","OBJECT","writeMetadata","xvizMetadata","msg","message","data","writeMessage","messageIndex","xvizData","close"],"mappings":";;;;;;;AAaA,SAAQA,gBAAR,QAA+B,+BAA/B;AACA,SAAQC,kBAAR,QAAiC,iCAAjC;AACA,SAAQC,cAAR,QAA6B,6BAA7B;AACA,SAAQC,WAAR,QAA0B,qBAA1B;;AAGA,MAAMC,oBAAN,SAAmCF,cAAnC,CAAkD;AAChDG,EAAAA,WAAW,CAACC,IAAD,EAAOC,OAAP,EAAgB;AACzB,UAAMD,IAAN,kCAAgBC,OAAhB;AAAyBC,MAAAA,aAAa,EAAE;AAAxC;AACD;;AAH+C;;AAMlD,SAASC,eAAT,CAAyBH,IAAzB,EAA+BI,MAA/B,EAAuCH,OAAvC,EAAgD;AAC9C,MAAII,MAAM,GAAG,IAAb;;AACA,UAAQD,MAAR;AACE,SAAKP,WAAW,CAACS,UAAjB;AACED,MAAAA,MAAM,GAAG,IAAIX,gBAAJ,CAAqBM,IAArB,EAA2BC,OAA3B,CAAT;AACA;;AACF,SAAKJ,WAAW,CAACU,UAAjB;AACEF,MAAAA,MAAM,GAAG,IAAIV,kBAAJ,CAAuBK,IAAvB,EAA6BC,OAA7B,CAAT;AACA;;AACF,SAAKJ,WAAW,CAACW,WAAjB;AACEH,MAAAA,MAAM,GAAG,IAAIP,oBAAJ,CAAyBE,IAAzB,EAA+BC,OAA/B,CAAT;AACA;;AACF,SAAKJ,WAAW,CAACY,WAAjB;AACEJ,MAAAA,MAAM,GAAG,IAAIT,cAAJ,CAAmBI,IAAnB,EAAyBC,OAAzB,CAAT;AACA;;AACF;AACE,YAAM,IAAIS,KAAJ,6CAA+CN,MAA/C,EAAN;AAdJ;;AAiBA,SAAOC,MAAP;AACD;;AAGD,OAAO,MAAMM,gBAAN,CAAuB;AAC5BZ,EAAAA,WAAW,CAACC,IAAD,QAA6B;AAAA,QAAtB;AAACI,MAAAA;AAAD,KAAsB;AAAA,QAAVH,OAAU;;AACtC,SAAKG,MAAL,GAAcA,MAAd;AACA,SAAKH,OAAL;AAAgBW,MAAAA,aAAa,EAAE;AAA/B,OAAwCX,OAAxC;;AAEA,QAAI,CAACG,MAAD,IAAWA,MAAM,KAAKP,WAAW,CAACgB,MAAtC,EAA8C;AAC5C,YAAM,IAAIH,KAAJ,kBAAoBN,MAApB,yCAAN;AACD;;AAED,SAAKC,MAAL,GAAcF,eAAe,CAACH,IAAD,EAAOI,MAAP,EAAe,KAAKH,OAApB,CAA7B;AACD;;AAEDa,EAAAA,aAAa,CAACC,YAAD,EAAe;AAC1B,UAAMC,GAAG,GAAGD,YAAY,CAACE,OAAb,EAAZ;AACA,SAAKZ,MAAL,CAAYS,aAAZ,CAA0BE,GAAG,CAACE,IAA9B;AACD;;AAEDC,EAAAA,YAAY,CAACC,YAAD,EAAeC,QAAf,EAAyB;AACnC,UAAML,GAAG,GAAGK,QAAQ,CAACJ,OAAT,EAAZ;AACA,SAAKZ,MAAL,CAAYc,YAAZ,CAAyBC,YAAzB,EAAuCJ,GAAG,CAACE,IAA3C;AACD;;AAEDI,EAAAA,KAAK,GAAG;AACN,SAAKjB,MAAL,CAAYiB,KAAZ;AACD;;AAxB2B","sourcesContent":["// Copyright (c) 2019 Uber Technologies, Inc.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nimport {XVIZBinaryWriter} from '../writers/xviz-binary-writer';\nimport {XVIZProtobufWriter} from '../writers/xviz-protobuf-writer';\nimport {XVIZJSONWriter} from '../writers/xviz-json-writer';\nimport {XVIZ_FORMAT} from '../common/constants';\n\n// Convenience class for Formatting JSON String vs ArrayBuffer\nclass XVIZJSONBufferWriter extends XVIZJSONWriter {\n  constructor(sink, options) {\n    super(sink, {...options, asArrayBuffer: true});\n  }\n}\n\nfunction determineWriter(sink, format, options) {\n  let writer = null;\n  switch (format) {\n    case XVIZ_FORMAT.BINARY_GLB:\n      writer = new XVIZBinaryWriter(sink, options);\n      break;\n    case XVIZ_FORMAT.BINARY_PBE:\n      writer = new XVIZProtobufWriter(sink, options);\n      break;\n    case XVIZ_FORMAT.JSON_BUFFER:\n      writer = new XVIZJSONBufferWriter(sink, options);\n      break;\n    case XVIZ_FORMAT.JSON_STRING:\n      writer = new XVIZJSONWriter(sink, options);\n      break;\n    default:\n      throw new Error(`Cannot convert XVIZData to format ${format}`);\n  }\n\n  return writer;\n}\n\n// Convert XVIZData to a different XVIZ_FORMAT\nexport class XVIZFormatWriter {\n  constructor(sink, {format, ...options}) {\n    this.format = format;\n    this.options = {flattenArrays: true, ...options};\n\n    if (!format || format === XVIZ_FORMAT.OBJECT) {\n      throw new Error(`Format ${format} is not supported by XVIZFormatter.`);\n    }\n\n    this.writer = determineWriter(sink, format, this.options);\n  }\n\n  writeMetadata(xvizMetadata) {\n    const msg = xvizMetadata.message();\n    this.writer.writeMetadata(msg.data);\n  }\n\n  writeMessage(messageIndex, xvizData) {\n    const msg = xvizData.message();\n    this.writer.writeMessage(messageIndex, msg.data);\n  }\n\n  close() {\n    this.writer.close();\n  }\n}\n"],"file":"xviz-format-writer.js"}