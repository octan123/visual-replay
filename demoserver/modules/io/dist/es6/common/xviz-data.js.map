{"version":3,"sources":["../../../src/common/xviz-data.js"],"names":["getDataContainer","parseBinaryXVIZ","isGLBXVIZ","isJSONString","isPBEXVIZ","getXVIZMessageType","XVIZMessage","TextDecoder","XVIZ_FORMAT","XVIZData","constructor","data","opts","_data","_opts","_dataFormat","undefined","_xvizType","_message","_determineFormat","Error","buffer","format","type","rawType","messageType","parts","split","namespace","hasMessage","message","msg","BINARY_GLB","Buffer","slice","byteOffset","byteLength","BINARY_PBE","JSON_BUFFER","jsonString","toString","ArrayBuffer","isView","Uint8Array","decode","JSON","parse","JSON_STRING","OBJECT","xvizMsg","messageFormat"],"mappings":"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","sourcesContent":["// Copyright (c) 2019 Uber Technologies, Inc.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n/* global Buffer */\n/* eslint-disable complexity */\nimport {\n  getDataContainer,\n  parseBinaryXVIZ,\n  isGLBXVIZ,\n  isJSONString,\n  isPBEXVIZ,\n  getXVIZMessageType\n} from './loaders';\nimport {XVIZMessage} from './xviz-message';\nimport {TextDecoder} from './text-encoding';\nimport {XVIZ_FORMAT} from './constants';\n\n// Represents raw xviz data and\n// can create an XVIZMessage\n//\n// Assume isXVIZMessage has been called\n//\n// Raw data formats supported:\n// - JSON string\n// - arraybuffer which is a JSON string\n// - JSON object\n// - arraybuffer which is a GLB\n// opts.messageType is the message type contained in data.\n// - If supplied it assume data does not have an Envelope.\n// - Can be one of ('xviz/state_update', 'xviz/metadata', etc.)\nexport class XVIZData {\n  constructor(data, opts = {}) {\n    this._data = data;\n    this._opts = opts;\n\n    // _dataFormat is an XVIZ_FORMAT for 'data'\n    this._dataFormat = undefined;\n\n    // _xvizType is the XVIZ Envelope 'type'\n    this._xvizType = undefined;\n\n    // _message is an XVIZMessage and has been fully parsed\n    this._message = undefined;\n\n    this._determineFormat();\n\n    if (!this._dataFormat) {\n      throw new Error('Unknown XVIZ data format');\n    }\n  }\n\n  get buffer() {\n    return this._data;\n  }\n\n  get format() {\n    return this._dataFormat;\n  }\n\n  // In some cases this can be as expensive as a parse, so we do not\n  // load this unless asked for explicitly.\n  get type() {\n    if (this._message) {\n      return this._message.type;\n    } else if (!this._xvizType) {\n      const rawType = this._opts.messageType || getXVIZMessageType(this._data);\n      if (rawType) {\n        const parts = rawType.split('/');\n        this._xvizType = {\n          namespace: parts[0],\n          type: parts[1]\n        };\n      }\n    }\n\n    return this._xvizType.type;\n  }\n\n  hasMessage() {\n    return this._message !== undefined;\n  }\n\n  // converts data to JS object\n  message() {\n    let msg = null;\n    if (this._message) {\n      return this._message;\n    }\n\n    let data = this._data;\n    switch (this._dataFormat) {\n      case XVIZ_FORMAT.BINARY_GLB:\n        if (data instanceof Buffer) {\n          data = data.buffer.slice(data.byteOffset, data.byteOffset + data.byteLength);\n        }\n        msg = parseBinaryXVIZ(data);\n        break;\n      case XVIZ_FORMAT.BINARY_PBE:\n        if (data instanceof Buffer) {\n          data = data.buffer.slice(data.byteOffset, data.byteOffset + data.byteLength);\n        }\n        msg = parseBinaryXVIZ(data, this._opts);\n        break;\n      case XVIZ_FORMAT.JSON_BUFFER:\n        let jsonString = null;\n        if (data instanceof Buffer) {\n          // Default to utf8 encoding\n          jsonString = data.toString();\n        } else if (data instanceof ArrayBuffer || ArrayBuffer.isView(data)) {\n          data = new Uint8Array(data);\n\n          // This is slow\n          jsonString = new TextDecoder('utf8').decode(data);\n        }\n\n        msg = JSON.parse(jsonString);\n        break;\n      case XVIZ_FORMAT.JSON_STRING:\n        msg = JSON.parse(data);\n        break;\n      case XVIZ_FORMAT.OBJECT:\n        msg = data;\n        break;\n      default:\n        throw new Error(`Unsupported format ${this._dataFormat}`);\n    }\n\n    const xvizMsg = new XVIZMessage(msg);\n    if (xvizMsg.data) {\n      this._message = xvizMsg;\n      return this._message;\n    }\n\n    return null;\n  }\n\n  _determineFormat() {\n    const {messageFormat} = this._opts;\n    if (messageFormat) {\n      this._dataFormat = messageFormat;\n      return;\n    }\n\n    let data = this._data;\n    switch (getDataContainer(data)) {\n      case 'binary':\n        if (data instanceof Buffer) {\n          data = data.buffer.slice(data.byteOffset, data.byteOffset + data.byteLength);\n        }\n\n        if (isPBEXVIZ(data)) {\n          this._dataFormat = XVIZ_FORMAT.BINARY_PBE;\n        } else if (isGLBXVIZ(data)) {\n          this._dataFormat = XVIZ_FORMAT.BINARY_GLB;\n        } else {\n          if (data instanceof ArrayBuffer) {\n            data = new Uint8Array(data);\n          }\n\n          if (isJSONString(data)) {\n            this._dataFormat = XVIZ_FORMAT.JSON_BUFFER;\n          }\n        }\n        break;\n      case 'string':\n        if (isJSONString(data)) {\n          this._dataFormat = XVIZ_FORMAT.JSON_STRING;\n        }\n        break;\n      case 'object':\n        this._dataFormat = XVIZ_FORMAT.OBJECT;\n        break;\n\n      default:\n    }\n  }\n}\n"],"file":"xviz-data.js"}