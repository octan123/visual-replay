{"version":3,"sources":["../../../src/providers/xviz-base-provider.js"],"names":["XVIZData","MessageIterator","constructor","start","end","increment","current","valid","value","next","data","XVIZBaseProvider","reader","options","metadata","_valid","init","startTime","endTime","timeRange","_readMetadata","Number","isFinite","checkMessage","Error","xvizMetadata","xvizMessage","iterator","message","_readMessage","getMessageIterator","startMessages","findMessage","endMessages","undefined","first","last","readMessage","readMetadata"],"mappings":"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","sourcesContent":["// Copyright (c) 2019 Uber Technologies, Inc.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nimport {XVIZData} from '../common/xviz-data';\n\n// Generic iterator that stores context for context for an iterator\nclass MessageIterator {\n  constructor(start, end, increment = 1) {\n    this.start = start;\n    this.end = end;\n    this.increment = increment;\n    this.current = start;\n  }\n\n  valid() {\n    return this.current <= this.end;\n  }\n\n  value() {\n    return this.current;\n  }\n\n  next() {\n    const valid = this.valid();\n    if (!valid) {\n      return {valid};\n    }\n\n    const data = this.current;\n    this.current += this.increment;\n\n    return {\n      valid,\n      data\n    };\n  }\n}\n\nexport class XVIZBaseProvider {\n  constructor({reader, options}) {\n    this.reader = reader;\n    this.options = options;\n\n    this.metadata = null;\n    this._valid = false;\n  }\n\n  // Read index & metadata\n  async init() {\n    if (!this.reader) {\n      return;\n    }\n\n    const {startTime, endTime} = this.reader.timeRange();\n    this.metadata = this._readMetadata();\n\n    if (\n      this.metadata &&\n      Number.isFinite(startTime) &&\n      Number.isFinite(endTime) &&\n      this.reader.checkMessage(0) // verify the first message exists\n    ) {\n      this._valid = true;\n    }\n\n    if (this.metadata && (!Number.isFinite(startTime) || !Number.isFinite(endTime))) {\n      // TODO: should provide a command for the cli to regenerate the index files\n      throw new Error('The data source is missing the data index');\n    }\n  }\n\n  valid() {\n    return this._valid;\n  }\n\n  xvizMetadata() {\n    return this.metadata;\n  }\n\n  async xvizMessage(iterator) {\n    const {valid, data} = iterator.next();\n    if (!valid) {\n      return null;\n    }\n\n    const message = this._readMessage(data);\n    return message;\n  }\n\n  // The Provider provides an iterator since\n  // different sources may \"index\" their data independently\n  // however all iterators are based on a startTime/endTime\n  //\n  // If startTime and endTime cover the actual range, then\n  // they will be clamped to the actual range.\n  // Otherwise return undefined.\n  getMessageIterator({startTime, endTime} = {}, options = {}) {\n    const {startTime: start, endTime: end} = this.reader.timeRange();\n\n    if (!Number.isFinite(startTime)) {\n      startTime = start;\n    }\n\n    if (!Number.isFinite(endTime)) {\n      endTime = end;\n    }\n\n    if (startTime > endTime) {\n      return null;\n    }\n\n    const startMessages = this.reader.findMessage(startTime);\n    const endMessages = this.reader.findMessage(endTime);\n\n    if (startMessages !== undefined && endMessages !== undefined) {\n      return new MessageIterator(startMessages.first, endMessages.last);\n    }\n\n    return null;\n  }\n\n  // return XVIZData for message or undefined\n  _readMessage(message) {\n    const data = this.reader.readMessage(message);\n    if (data) {\n      return new XVIZData(data);\n    }\n\n    return undefined;\n  }\n\n  // return Metadata or undefined\n  _readMetadata() {\n    const data = this.reader.readMetadata();\n    if (data) {\n      return new XVIZData(data);\n    }\n\n    return undefined;\n  }\n}\n"],"file":"xviz-base-provider.js"}