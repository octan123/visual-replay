{"version":3,"sources":["../../../src/writers/xviz-protobuf-writer.js"],"names":["XVIZBaseWriter","XVIZ_PROTOBUF_MAGIC","XVIZ_PROTOBUF_MESSAGE","messageName","index","XVIZProtobufWriter","sink","options","envelope","messageTimings","messages","Map","wroteMessageIndex","xvizMetadata","_checkValid","_saveTimestamp","pbJSON","xvizConvertProtobuf","pbInfo","type","Metadata","msg","fromObject","_applyEnvelope","pbBuffer","encode","finish","buffer","Uint8Array","byteLength","set","writeToSink","messageIndex","xvizMessage","StateUpdate","info","value","Envelope","data","type_url","startTime","endTime","messageTimes","Array","from","keys","sort","a","b","timing","forEach","limit","length","Error","push","get","JSON","stringify","_writeMessageIndex","xviz_data","log_info","updates","undefined","start_time","end_time","every","update","timestamp","min","Math","map","max","name","writeSync","COLOR_KEYS","toColorArray","object","clrs","substring","len","color","step","i","parseInt","substr","keyName","isArray","element","flat","el","ArrayBuffer","isView","Number","isFinite","includes","match","properties","Object","newObject","objectKeys","key"],"mappings":"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","sourcesContent":["// Copyright (c) 2019 Uber Technologies, Inc.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n/* eslint-disable */\nimport {XVIZBaseWriter} from './xviz-base-writer';\nimport {XVIZ_PROTOBUF_MAGIC, XVIZ_PROTOBUF_MESSAGE} from '../common/protobuf-support';\n\n// 0-frame is an index file for timestamp metadata\n// 1-frame is the metadata file for the log\n// 2-frame is where the actual XVIZ updates begin\nconst messageName = index => `${index + 2}-frame`;\n\nexport class XVIZProtobufWriter extends XVIZBaseWriter {\n  constructor(sink, options = {}) {\n    super(sink);\n\n    const {envelope = true} = options;\n    this.messageTimings = {\n      messages: new Map()\n    };\n    this.wroteMessageIndex = null;\n    this.options = {envelope};\n  }\n\n  // xvizMetadata is the object returned\n  // from a Builder.\n  writeMetadata(xvizMetadata) {\n    this._checkValid();\n    this._saveTimestamp(xvizMetadata);\n\n    const pbJSON = xvizConvertProtobuf(xvizMetadata);\n    let pbInfo = {\n      type: XVIZ_PROTOBUF_MESSAGE.Metadata,\n      msg: XVIZ_PROTOBUF_MESSAGE.Metadata.fromObject(pbJSON)\n    };\n\n    if (this.options.envelope) {\n      this._applyEnvelope(pbInfo);\n    }\n\n    const pbBuffer = pbInfo.type.encode(pbInfo.msg).finish();\n    const buffer = new Uint8Array(pbBuffer.byteLength + 4);\n    buffer.set(XVIZ_PROTOBUF_MAGIC, 0);\n    buffer.set(pbBuffer, 4);\n    this.writeToSink('1-frame.pbe', buffer);\n  }\n\n  writeMessage(messageIndex, xvizMessage) {\n    this._checkValid();\n    this._saveTimestamp(xvizMessage, messageIndex);\n\n    const pbJSON = xvizConvertProtobuf(xvizMessage);\n    let pbInfo = {\n      type: XVIZ_PROTOBUF_MESSAGE.StateUpdate,\n      msg: XVIZ_PROTOBUF_MESSAGE.StateUpdate.fromObject(pbJSON)\n    };\n\n    if (this.options.envelope) {\n      this._applyEnvelope(pbInfo);\n    }\n\n    const pbBuffer = pbInfo.type.encode(pbInfo.msg).finish();\n    const buffer = new Uint8Array(pbBuffer.byteLength + 4);\n    buffer.set(XVIZ_PROTOBUF_MAGIC, 0);\n    buffer.set(pbBuffer, 4);\n    this.writeToSink(`${messageName(messageIndex)}.pbe`, buffer);\n  }\n\n  // Apply protobuf structure for the Any type used in the envelope\n  _applyEnvelope(info) {\n    if (info.type === XVIZ_PROTOBUF_MESSAGE.Metadata) {\n      const value = info.type.encode(info.msg).finish();\n      info.type = XVIZ_PROTOBUF_MESSAGE.Envelope;\n      info.msg = info.type.fromObject({\n        type: 'xviz/metadata',\n        data: {type_url: 'xviz.v2.Metadata', value}\n      });\n    } else if (info.type === XVIZ_PROTOBUF_MESSAGE.StateUpdate) {\n      const value = info.type.encode(info.msg).finish();\n      info.type = XVIZ_PROTOBUF_MESSAGE.Envelope;\n      info.msg = info.type.fromObject({\n        type: 'xviz/state_update',\n        data: {type_url: 'xviz.v2.StateUpdate', value}\n      });\n    }\n  }\n\n  _writeMessageIndex() {\n    this._checkValid();\n    const {startTime, endTime, messages} = this.messageTimings;\n    const messageTimings = {};\n\n    if (startTime) {\n      messageTimings.startTime = startTime;\n    }\n\n    if (endTime) {\n      messageTimings.endTime = endTime;\n    }\n\n    // Sort messages by index before writing out as an array\n    const messageTimes = Array.from(messages.keys()).sort((a, b) => a - b);\n\n    const timing = [];\n    messageTimes.forEach((value, index) => {\n      // Value is two greater than message index\n      const limit = timing.length;\n      if (value > limit) {\n        // Adding 2 because 1-frame is metadata file, so message data starts at 2\n        throw new Error(\n          `Error writing time index file. Messages are missing between ${limit + 2} and ${value +\n            2}`\n        );\n      }\n\n      timing.push(messages.get(value));\n    });\n    messageTimings.timing = timing;\n\n    const msg = JSON.stringify(messageTimings);\n    this.writeToSink('0-frame.json', msg);\n    this.wroteMessageIndex = timing.length;\n  }\n\n  close() {\n    if (this.sink) {\n      if (!this.wroteMessageIndex) {\n        this._writeMessageIndex();\n      }\n\n      super.close();\n    }\n  }\n\n  /* eslint-disable camelcase */\n  _saveTimestamp(xviz_data, index) {\n    const {log_info, updates} = xviz_data;\n\n    if (index === undefined) {\n      // Metadata case\n      if (log_info) {\n        const {start_time, end_time} = log_info || {};\n        if (start_time) {\n          this.messageTimings.startTime = start_time;\n        }\n\n        if (end_time) {\n          this.messageTimings.endTime = end_time;\n        }\n      }\n    } else if (updates) {\n      if (updates.length === 0 || !updates.every(update => typeof update.timestamp === 'number')) {\n        throw new Error('XVIZ updates did not contain a valid timestamp');\n      }\n\n      const min = Math.min(updates.map(update => update.timestamp));\n      const max = Math.max(updates.map(update => update.timestamp));\n\n      this.messageTimings.messages.set(index, [min, max, index, messageName(index)]);\n    } else {\n      // Missing updates & index is invalid call\n      throw new Error('Cannot find timestamp');\n    }\n  }\n  /* eslint-enable camelcase */\n\n  writeToSink(name, msg) {\n    this.sink.writeSync(name, msg);\n  }\n}\n\nconst COLOR_KEYS = ['stroke_color', 'fill_color'];\n/* Convert color to a flattened array */\nfunction toColorArray(object) {\n  const clrs = object.substring(1);\n  const len = clrs.length;\n  if (!(len === 3 || len === 4 || len === 6 || len === 8)) {\n    return null;\n  }\n\n  const color = [];\n  const step = clrs.length === 3 || clrs.length === 4 ? 1 : 2;\n  for (let i = 0; i < clrs.length; i += step) {\n    color.push(parseInt(clrs.substr(i, step), 16));\n  }\n\n  return color;\n}\n\n// Protobuf messages do not allow variations on the field types, such\n// as a color field that supports both 'string' and 'array' data in JSON.\n//\n// This function will normalize the object, generally produced by an XVIZBuilder,\n// to allow it to be encoded per our protobuf message definitions. It will change\n// the variation of particular fields into a normalized format.\n//\n// Recursively walk object performing the following conversions\n// - primitives with typed array fields are turned into arrays\n// - primtives of type image have the data turned into a base64 string\n/* eslint-disable complexity, no-else-return, max-statements */\nexport function xvizConvertProtobuf(object, keyName) {\n  if (Array.isArray(object)) {\n    if (!(keyName === 'vertices' || keyName === 'points' || keyName === 'colors')) {\n      return object.map(element => xvizConvertProtobuf(element, keyName));\n    }\n\n    // Handle the following cases\n    // [ [x, y, z], [x, y, z], ...]\n    // [ TypedArray{x, y, z}, TypedArray{x, y ,z} ]\n    // [ x, y, z, x, y, z, ... ]\n    // [ {}, {}, ... ]\n    if (Array.isArray(object[0])) {\n      const flat = [];\n      object.forEach(el => flat.push(...el));\n      return flat;\n    } else if (ArrayBuffer.isView(object[0])) {\n      const flat = [];\n      object.forEach(el => flat.push(...Array.from(el)));\n      return flat;\n    } else if (Number.isFinite(object[0])) {\n      return object;\n    } else if (typeof object[0] === 'object') {\n      return object.map(element => xvizConvertProtobuf(element, keyName));\n    }\n  }\n\n  // Typed arrays become normal arrays\n  if (ArrayBuffer.isView(object)) {\n    return Array.from(object);\n  }\n\n  if (COLOR_KEYS.includes(keyName)) {\n    if (typeof object === 'string' && object.match(/^#([0-9a-f]{3,4})|([0-9a-f]{6,8})$/i)) {\n      return toColorArray(object);\n    }\n  }\n\n  if (object !== null && typeof object === 'object') {\n    // Handle XVIZ Image Primitive\n    const properties = Object.keys(object);\n    if (properties.includes('data') && keyName === 'images') {\n      // TODO: should verify it is a typed array and if not convert it to one\n      return object;\n    }\n\n    // Handle all other objects\n    const newObject = {};\n    const objectKeys = Object.keys(object);\n    for (const key of objectKeys) {\n      // console.log(key)\n      newObject[key] = xvizConvertProtobuf(object[key], key);\n    }\n    return newObject;\n  }\n\n  return object;\n}\n/* eslint-enable complexity */\n"],"file":"xviz-protobuf-writer.js"}