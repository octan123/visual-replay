{"version":3,"sources":["../../../src/writers/xviz-pack-binary.js"],"names":["flattenToTypedArray","packBinaryJsonTypedArray","gltfBuilder","object","objectKey","info","isImage","imageIndex","addImage","opts","size","bufferIndex","addBuffer","packBinaryJson","json","options","flattenArrays","objectInfo","indexOf","Array","isArray","flatObject","flattenObject","typedArray","map","element","ArrayBuffer","isView","newObject","key","every","field","Float32Array","length","Uint8Array"],"mappings":"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","sourcesContent":["// Copyright (c) 2019 Uber Technologies, Inc.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport {flattenToTypedArray} from './flatten';\n\nfunction packBinaryJsonTypedArray(gltfBuilder, object, objectKey, info) {\n  if (gltfBuilder.isImage(object) || (info && info.isImage)) {\n    const imageIndex = gltfBuilder.addImage(object);\n    return `#/images/${imageIndex}`;\n  }\n  // if not an image, pack as accessor\n  const opts = info && info.size ? {size: info.size} : {size: 3};\n  const bufferIndex = gltfBuilder.addBuffer(object, opts);\n  return `#/accessors/${bufferIndex}`;\n}\n\n// Follows a convention used by @loaders.gl to use JSONPointers\n// to encode where the binary data for an XVIZ element resides.\n// The unpacking is handled automatically by @loaders.gl\n/* eslint-disable complexity */\nexport function packBinaryJson(json, gltfBuilder, objectKey = null, options = {}) {\n  const {flattenArrays = true} = options;\n  let object = json;\n  let objectInfo = null;\n\n  // Check if string has same syntax as our \"JSON pointers\", if so \"escape it\".\n  if (typeof object === 'string' && object.indexOf('#/') === 0) {\n    return `#${object}`;\n  }\n\n  if (Array.isArray(object)) {\n    // TODO - handle numeric arrays, flatten them etc.\n    const flatObject = flattenArrays && flattenObject(objectKey, object);\n    if (flatObject) {\n      object = flatObject.typedArray;\n      objectInfo = flatObject;\n    } else {\n      return object.map(element => packBinaryJson(element, gltfBuilder, null, options));\n    }\n  }\n\n  // Typed arrays, pack them as binary\n  if (ArrayBuffer.isView(object) && gltfBuilder) {\n    if (options && options.isImage) {\n      objectInfo = {...objectInfo, isImage: true};\n    }\n    return packBinaryJsonTypedArray(gltfBuilder, object, objectKey, objectInfo);\n  }\n\n  if (object !== null && typeof object === 'object') {\n    const newObject = {};\n    for (const key in object) {\n      // Detect XVIZ Image entry and mark appropriately\n      if (['data', 'width_px', 'height_px'].every(field => field in object)) {\n        options = {...options, isImage: true};\n      }\n      newObject[key] = packBinaryJson(object[key], gltfBuilder, key, options);\n    }\n    return newObject;\n  }\n\n  return object;\n}\n/* eslint-enable complexity */\n\nfunction flattenObject(key, object) {\n  let typedArray = null;\n  let size = 3;\n\n  if (key === 'vertices' || key === 'points') {\n    // Flatten nested vertices\n    typedArray = flattenToTypedArray(object, size, Float32Array);\n  }\n  if (key === 'colors') {\n    size = object[0].length === 4 ? 4 : 3;\n    typedArray = flattenToTypedArray(object, size, Uint8Array);\n  }\n\n  if (typedArray) {\n    return {\n      typedArray,\n      size\n    };\n  }\n\n  return null;\n}\n"],"file":"xviz-pack-binary.js"}