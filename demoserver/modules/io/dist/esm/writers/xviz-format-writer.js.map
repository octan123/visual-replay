{"version":3,"sources":["../../../src/writers/xviz-format-writer.js"],"names":["XVIZBinaryWriter","XVIZProtobufWriter","XVIZJSONWriter","XVIZ_FORMAT","XVIZJSONBufferWriter","sink","options","asArrayBuffer","determineWriter","format","writer","BINARY_GLB","BINARY_PBE","JSON_BUFFER","JSON_STRING","Error","XVIZFormatWriter","flattenArrays","OBJECT","xvizMetadata","msg","message","writeMetadata","data","messageIndex","xvizData","writeMessage","close"],"mappings":";;;;;;;;;;;;;;;;AAaA,SAAQA,gBAAR,QAA+B,+BAA/B;AACA,SAAQC,kBAAR,QAAiC,iCAAjC;AACA,SAAQC,cAAR,QAA6B,6BAA7B;AACA,SAAQC,WAAR,QAA0B,qBAA1B;;IAGMC,oB;;;;;AACJ,gCAAYC,IAAZ,EAAkBC,OAAlB,EAA2B;AAAA;;AAAA,6BACnBD,IADmB,kCACTC,OADS;AACAC,MAAAA,aAAa,EAAE;AADf;AAE1B;;;EAHgCL,c;;AAMnC,SAASM,eAAT,CAAyBH,IAAzB,EAA+BI,MAA/B,EAAuCH,OAAvC,EAAgD;AAC9C,MAAII,MAAM,GAAG,IAAb;;AACA,UAAQD,MAAR;AACE,SAAKN,WAAW,CAACQ,UAAjB;AACED,MAAAA,MAAM,GAAG,IAAIV,gBAAJ,CAAqBK,IAArB,EAA2BC,OAA3B,CAAT;AACA;;AACF,SAAKH,WAAW,CAACS,UAAjB;AACEF,MAAAA,MAAM,GAAG,IAAIT,kBAAJ,CAAuBI,IAAvB,EAA6BC,OAA7B,CAAT;AACA;;AACF,SAAKH,WAAW,CAACU,WAAjB;AACEH,MAAAA,MAAM,GAAG,IAAIN,oBAAJ,CAAyBC,IAAzB,EAA+BC,OAA/B,CAAT;AACA;;AACF,SAAKH,WAAW,CAACW,WAAjB;AACEJ,MAAAA,MAAM,GAAG,IAAIR,cAAJ,CAAmBG,IAAnB,EAAyBC,OAAzB,CAAT;AACA;;AACF;AACE,YAAM,IAAIS,KAAJ,6CAA+CN,MAA/C,EAAN;AAdJ;;AAiBA,SAAOC,MAAP;AACD;;AAGD,WAAaM,gBAAb;AACE,4BAAYX,IAAZ,QAAwC;AAAA,QAArBI,MAAqB,QAArBA,MAAqB;AAAA,QAAVH,OAAU;;AAAA;;AACtC,SAAKG,MAAL,GAAcA,MAAd;AACA,SAAKH,OAAL;AAAgBW,MAAAA,aAAa,EAAE;AAA/B,OAAwCX,OAAxC;;AAEA,QAAI,CAACG,MAAD,IAAWA,MAAM,KAAKN,WAAW,CAACe,MAAtC,EAA8C;AAC5C,YAAM,IAAIH,KAAJ,kBAAoBN,MAApB,yCAAN;AACD;;AAED,SAAKC,MAAL,GAAcF,eAAe,CAACH,IAAD,EAAOI,MAAP,EAAe,KAAKH,OAApB,CAA7B;AACD;;AAVH;AAAA;AAAA,kCAYgBa,YAZhB,EAY8B;AAC1B,UAAMC,GAAG,GAAGD,YAAY,CAACE,OAAb,EAAZ;AACA,WAAKX,MAAL,CAAYY,aAAZ,CAA0BF,GAAG,CAACG,IAA9B;AACD;AAfH;AAAA;AAAA,iCAiBeC,YAjBf,EAiB6BC,QAjB7B,EAiBuC;AACnC,UAAML,GAAG,GAAGK,QAAQ,CAACJ,OAAT,EAAZ;AACA,WAAKX,MAAL,CAAYgB,YAAZ,CAAyBF,YAAzB,EAAuCJ,GAAG,CAACG,IAA3C;AACD;AApBH;AAAA;AAAA,4BAsBU;AACN,WAAKb,MAAL,CAAYiB,KAAZ;AACD;AAxBH;;AAAA;AAAA","sourcesContent":["// Copyright (c) 2019 Uber Technologies, Inc.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nimport {XVIZBinaryWriter} from '../writers/xviz-binary-writer';\nimport {XVIZProtobufWriter} from '../writers/xviz-protobuf-writer';\nimport {XVIZJSONWriter} from '../writers/xviz-json-writer';\nimport {XVIZ_FORMAT} from '../common/constants';\n\n// Convenience class for Formatting JSON String vs ArrayBuffer\nclass XVIZJSONBufferWriter extends XVIZJSONWriter {\n  constructor(sink, options) {\n    super(sink, {...options, asArrayBuffer: true});\n  }\n}\n\nfunction determineWriter(sink, format, options) {\n  let writer = null;\n  switch (format) {\n    case XVIZ_FORMAT.BINARY_GLB:\n      writer = new XVIZBinaryWriter(sink, options);\n      break;\n    case XVIZ_FORMAT.BINARY_PBE:\n      writer = new XVIZProtobufWriter(sink, options);\n      break;\n    case XVIZ_FORMAT.JSON_BUFFER:\n      writer = new XVIZJSONBufferWriter(sink, options);\n      break;\n    case XVIZ_FORMAT.JSON_STRING:\n      writer = new XVIZJSONWriter(sink, options);\n      break;\n    default:\n      throw new Error(`Cannot convert XVIZData to format ${format}`);\n  }\n\n  return writer;\n}\n\n// Convert XVIZData to a different XVIZ_FORMAT\nexport class XVIZFormatWriter {\n  constructor(sink, {format, ...options}) {\n    this.format = format;\n    this.options = {flattenArrays: true, ...options};\n\n    if (!format || format === XVIZ_FORMAT.OBJECT) {\n      throw new Error(`Format ${format} is not supported by XVIZFormatter.`);\n    }\n\n    this.writer = determineWriter(sink, format, this.options);\n  }\n\n  writeMetadata(xvizMetadata) {\n    const msg = xvizMetadata.message();\n    this.writer.writeMetadata(msg.data);\n  }\n\n  writeMessage(messageIndex, xvizData) {\n    const msg = xvizData.message();\n    this.writer.writeMessage(messageIndex, msg.data);\n  }\n\n  close() {\n    this.writer.close();\n  }\n}\n"],"file":"xviz-format-writer.js"}