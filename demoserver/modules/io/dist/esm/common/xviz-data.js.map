{"version":3,"sources":["../../../src/common/xviz-data.js"],"names":["getDataContainer","parseBinaryXVIZ","isGLBXVIZ","isJSONString","isPBEXVIZ","getXVIZMessageType","XVIZMessage","TextDecoder","XVIZ_FORMAT","XVIZData","data","opts","_data","_opts","_dataFormat","undefined","_xvizType","_message","_determineFormat","Error","msg","BINARY_GLB","Buffer","buffer","slice","byteOffset","byteLength","BINARY_PBE","JSON_BUFFER","jsonString","toString","ArrayBuffer","isView","Uint8Array","decode","JSON","parse","JSON_STRING","OBJECT","xvizMsg","messageFormat","type","rawType","messageType","parts","split","namespace"],"mappings":"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","sourcesContent":["// Copyright (c) 2019 Uber Technologies, Inc.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n/* global Buffer */\n/* eslint-disable complexity */\nimport {\n  getDataContainer,\n  parseBinaryXVIZ,\n  isGLBXVIZ,\n  isJSONString,\n  isPBEXVIZ,\n  getXVIZMessageType\n} from './loaders';\nimport {XVIZMessage} from './xviz-message';\nimport {TextDecoder} from './text-encoding';\nimport {XVIZ_FORMAT} from './constants';\n\n// Represents raw xviz data and\n// can create an XVIZMessage\n//\n// Assume isXVIZMessage has been called\n//\n// Raw data formats supported:\n// - JSON string\n// - arraybuffer which is a JSON string\n// - JSON object\n// - arraybuffer which is a GLB\n// opts.messageType is the message type contained in data.\n// - If supplied it assume data does not have an Envelope.\n// - Can be one of ('xviz/state_update', 'xviz/metadata', etc.)\nexport class XVIZData {\n  constructor(data, opts = {}) {\n    this._data = data;\n    this._opts = opts;\n\n    // _dataFormat is an XVIZ_FORMAT for 'data'\n    this._dataFormat = undefined;\n\n    // _xvizType is the XVIZ Envelope 'type'\n    this._xvizType = undefined;\n\n    // _message is an XVIZMessage and has been fully parsed\n    this._message = undefined;\n\n    this._determineFormat();\n\n    if (!this._dataFormat) {\n      throw new Error('Unknown XVIZ data format');\n    }\n  }\n\n  get buffer() {\n    return this._data;\n  }\n\n  get format() {\n    return this._dataFormat;\n  }\n\n  // In some cases this can be as expensive as a parse, so we do not\n  // load this unless asked for explicitly.\n  get type() {\n    if (this._message) {\n      return this._message.type;\n    } else if (!this._xvizType) {\n      const rawType = this._opts.messageType || getXVIZMessageType(this._data);\n      if (rawType) {\n        const parts = rawType.split('/');\n        this._xvizType = {\n          namespace: parts[0],\n          type: parts[1]\n        };\n      }\n    }\n\n    return this._xvizType.type;\n  }\n\n  hasMessage() {\n    return this._message !== undefined;\n  }\n\n  // converts data to JS object\n  message() {\n    let msg = null;\n    if (this._message) {\n      return this._message;\n    }\n\n    let data = this._data;\n    switch (this._dataFormat) {\n      case XVIZ_FORMAT.BINARY_GLB:\n        if (data instanceof Buffer) {\n          data = data.buffer.slice(data.byteOffset, data.byteOffset + data.byteLength);\n        }\n        msg = parseBinaryXVIZ(data);\n        break;\n      case XVIZ_FORMAT.BINARY_PBE:\n        if (data instanceof Buffer) {\n          data = data.buffer.slice(data.byteOffset, data.byteOffset + data.byteLength);\n        }\n        msg = parseBinaryXVIZ(data, this._opts);\n        break;\n      case XVIZ_FORMAT.JSON_BUFFER:\n        let jsonString = null;\n        if (data instanceof Buffer) {\n          // Default to utf8 encoding\n          jsonString = data.toString();\n        } else if (data instanceof ArrayBuffer || ArrayBuffer.isView(data)) {\n          data = new Uint8Array(data);\n\n          // This is slow\n          jsonString = new TextDecoder('utf8').decode(data);\n        }\n\n        msg = JSON.parse(jsonString);\n        break;\n      case XVIZ_FORMAT.JSON_STRING:\n        msg = JSON.parse(data);\n        break;\n      case XVIZ_FORMAT.OBJECT:\n        msg = data;\n        break;\n      default:\n        throw new Error(`Unsupported format ${this._dataFormat}`);\n    }\n\n    const xvizMsg = new XVIZMessage(msg);\n    if (xvizMsg.data) {\n      this._message = xvizMsg;\n      return this._message;\n    }\n\n    return null;\n  }\n\n  _determineFormat() {\n    const {messageFormat} = this._opts;\n    if (messageFormat) {\n      this._dataFormat = messageFormat;\n      return;\n    }\n\n    let data = this._data;\n    switch (getDataContainer(data)) {\n      case 'binary':\n        if (data instanceof Buffer) {\n          data = data.buffer.slice(data.byteOffset, data.byteOffset + data.byteLength);\n        }\n\n        if (isPBEXVIZ(data)) {\n          this._dataFormat = XVIZ_FORMAT.BINARY_PBE;\n        } else if (isGLBXVIZ(data)) {\n          this._dataFormat = XVIZ_FORMAT.BINARY_GLB;\n        } else {\n          if (data instanceof ArrayBuffer) {\n            data = new Uint8Array(data);\n          }\n\n          if (isJSONString(data)) {\n            this._dataFormat = XVIZ_FORMAT.JSON_BUFFER;\n          }\n        }\n        break;\n      case 'string':\n        if (isJSONString(data)) {\n          this._dataFormat = XVIZ_FORMAT.JSON_STRING;\n        }\n        break;\n      case 'object':\n        this._dataFormat = XVIZ_FORMAT.OBJECT;\n        break;\n\n      default:\n    }\n  }\n}\n"],"file":"xviz-data.js"}