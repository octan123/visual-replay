{"version":3,"sources":["../../../src/gltf/gltf-parser.js"],"names":["fetchFile","getFullUri","getGLTFAccessors","getGLTFAccessor","KHR_DRACO_MESH_COMPRESSION","UBER_POINT_CLOUD_EXTENSION","GLBParser","GLTFPostProcessorOld","DEFAULT_OPTIONS","fetchLinkedResources","fetch","decompress","DracoLoader","postProcess","createImages","log","console","GLTFParser","gltf","options","Object","assign","parseSync","_loadLinkedAssets","_decompressMeshes","postProcessor","glbParser","ArrayBuffer","isGLB","textDecoder","TextDecoder","decode","JSON","parse","json","key","extras","extensionName","isExtension","getUsedExtensions","find","name","extensions","isRequired","getRequiredExtensions","getExtension","extensionsRequired","extensionsUsed","index","_get","array","object","warn","Promise","all","buffers","map","buffer","_loadBuffer","uri","window","response","arrayBuffer","data","meshes","mesh","primitives","primitive","_decompressKhronosDracoPrimitive","_decompressUberDracoPrimitive","attributes","keys","length","Error","_removeExtension","compressedMesh","_getBufferViewArray","bufferView","decodedData","indices","mode","bufferViewIndex","bufferViews","getBufferView","byteOffset","Uint8Array","byteLength","_removeStringFromArray","string","found","indexOf","splice"],"mappings":"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","sourcesContent":["// Copyright (c) 2019 Uber Technologies, Inc.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n/* global window, TextDecoder */\nimport '../common/text-encoding';\nimport {fetchFile} from '@loaders.gl/core';\nimport {getFullUri} from './gltf-utils/gltf-utils';\nimport {getGLTFAccessors, getGLTFAccessor} from './gltf-utils/gltf-attribute-utils';\nimport {KHR_DRACO_MESH_COMPRESSION, UBER_POINT_CLOUD_EXTENSION} from './gltf-constants';\nimport GLBParser from './glb-parser';\nimport GLTFPostProcessorOld from './gltf-post-processor-old';\n\nconst DEFAULT_OPTIONS = {\n  fetchLinkedResources: true, // Fetch any linked .BIN buffers, decode base64\n  fetch: fetchFile,\n  decompress: false, // Decompress Draco compressed meshes (if DracoLoader available)\n  DracoLoader: null,\n  postProcess: true,\n  createImages: false, // Create image objects\n  log: console // eslint-disable-line\n};\n\nexport class GLTFParser {\n  async parse(gltf, options = {}) {\n    options = Object.assign({}, DEFAULT_OPTIONS, options);\n\n    // Postpone decompressing/postprocessing to make sure we load any linked files first\n    // TODO - is this really needed?\n    this.parseSync(gltf, {...options, postProcess: false, decompress: false});\n\n    // Load linked buffers asynchronously and decodes base64 buffers in parallel\n    if (options.fetchLinkedResources) {\n      await this._loadLinkedAssets(options);\n    }\n\n    if (options.decompress) {\n      this._decompressMeshes(options);\n    }\n\n    if (options.postProcess) {\n      const postProcessor = new GLTFPostProcessorOld();\n      postProcessor.postProcess(this.gltf, this.glbParser, options);\n    }\n\n    return this.gltf;\n  }\n\n  // NOTE: The sync parser cannot handle linked assets or base64 encoded resources\n  // gtlf - input can be arrayBuffer (GLB or UTF8 encoded JSON), string (JSON), or parsed JSON.\n  parseSync(gltf, options = {}) {\n    options = Object.assign({}, DEFAULT_OPTIONS, options);\n\n    // If binary is not starting with magic bytes, convert to string\n    if (gltf instanceof ArrayBuffer && !GLBParser.isGLB(gltf, options)) {\n      const textDecoder = new TextDecoder();\n      gltf = textDecoder.decode(gltf);\n    }\n\n    // If string, try to parse as JSON\n    if (typeof gltf === 'string') {\n      gltf = JSON.parse(gltf);\n    }\n\n    if (gltf instanceof ArrayBuffer) {\n      // Extract JSON from the GLB container\n      this.glbParser = new GLBParser();\n      this.gltf = this.glbParser.parseSync(gltf).json;\n      this.json = this.gltf;\n    } else {\n      this.glbParser = null;\n      this.gltf = gltf;\n      this.json = gltf;\n    }\n\n    // TODO: we could handle base64 encoded files in the non-async path\n    // await this._loadBuffersSync(options);\n\n    // TODO: we could synchronously decode base64 encoded URIs in the non-async path\n    // await this._loadLinkedAssetsSync(options);\n\n    if (options.decompress) {\n      this._decompressMeshes(options);\n    }\n\n    if (options.postProcess) {\n      const postProcessor = new GLTFPostProcessorOld();\n      postProcessor.postProcess(this.gltf, this.glbParser, options);\n    }\n\n    return this.gltf;\n  }\n\n  // Accessors\n\n  getApplicationData(key) {\n    if (this.json) {\n      return this.json[key];\n    }\n\n    return null;\n  }\n\n  getExtraData(key) {\n    // TODO - Data is already unpacked by GLBParser\n    const extras = this.json.extras || {};\n    return extras[key];\n  }\n\n  getExtension(extensionName) {\n    const isExtension = this.getUsedExtensions().find(name => name === extensionName);\n    const extensions = this.json.extensions || {};\n    return isExtension ? extensions[extensionName] || true : null;\n  }\n\n  getRequiredExtension(extensionName) {\n    const isRequired = this.getRequiredExtensions().find(name => name === extensionName);\n    return isRequired ? this.getExtension(extensionName) : null;\n  }\n\n  getRequiredExtensions() {\n    return this.json.extensionsRequired || [];\n  }\n\n  getUsedExtensions() {\n    return this.json.extensionsUsed || [];\n  }\n\n  getScene(index) {\n    return this._get('scenes', index);\n  }\n\n  getNode(index) {\n    return this._get('nodes', index);\n  }\n\n  getSkin(index) {\n    return this._get('skins', index);\n  }\n\n  getMesh(index) {\n    return this._get('meshes', index);\n  }\n\n  getMaterial(index) {\n    return this._get('materials', index);\n  }\n\n  getAccessor(index) {\n    return this._get('accessors', index);\n  }\n\n  getCamera(index) {\n    return null; // TODO: fix this\n  }\n\n  getTexture(index) {\n    return this._get('textures', index);\n  }\n\n  getSampler(index) {\n    return this._get('samplers', index);\n  }\n\n  getImage(index) {\n    return this._get('images', index);\n  }\n\n  getBufferView(index) {\n    return this._get('bufferViews', index);\n  }\n\n  getBuffer(index) {\n    return this._get('buffers', index);\n  }\n\n  // PARSING HELPERS\n\n  _get(array, index) {\n    // check if already resolved\n    if (typeof index === 'object') {\n      return index;\n    }\n    const object = this.gltf[array] && this.gltf[array][index];\n    if (!object) {\n      console.warn(`glTF file error: Could not find ${array}[${index}]`); // eslint-disable-line\n    }\n    return object;\n  }\n\n  // PARSING HELPERS\n\n  // Load linked assets\n  async _loadLinkedAssets(options) {\n    return await Promise.all(this.gltf.buffers.map(buffer => this._loadBuffer(buffer, options)));\n  }\n\n  async _loadBuffer(buffer, options) {\n    // NOTE: options.uri is not correctly passed, however this class is deprecated...\n    if (buffer.uri && options.uri) {\n      const fetch = options.fetch || window.fetch;\n      const uri = getFullUri(buffer.uri, options.uri);\n      const response = await fetch(uri);\n      const arrayBuffer = await response.arrayBuffer();\n      buffer.data = arrayBuffer;\n      buffer.uri = null;\n    }\n  }\n\n  // POST PROCESSING\n\n  _decompressMeshes(options) {\n    // We have a \"soft dependency\" on Draco to avoid bundling it when not needed\n    // DracoEncoder needs to be imported and supplied by app\n    if (!options.DracoLoader || !options.decompress) {\n      return;\n    }\n\n    for (const mesh of this.gltf.meshes || []) {\n      // Decompress all the primitives in a mesh\n      for (const primitive of mesh.primitives) {\n        this._decompressKhronosDracoPrimitive(primitive, options);\n        this._decompressUberDracoPrimitive(primitive, options);\n        if (!primitive.attributes || Object.keys(primitive.attributes).length === 0) {\n          throw new Error('Empty glTF primitive: decompression failure?');\n        }\n      }\n    }\n\n    // We have now decompressed all primitives, we can remove the top-level extensions\n    this._removeExtension(KHR_DRACO_MESH_COMPRESSION);\n    this._removeExtension(UBER_POINT_CLOUD_EXTENSION);\n  }\n\n  // Unpacks one mesh primitive and removes the extension from the primitive\n  // TODO - Implement fallback behavior per KHR_DRACO_MESH_COMPRESSION spec\n  // TODO - Decompression could be threaded: Use DracoWorkerLoader?\n  //\n  // eslint-disable-next-line max-len\n  // https://github.com/KhronosGroup/glTF/tree/master/extensions/2.0/Khronos/KHR_draco_mesh_compression\n  _decompressKhronosDracoPrimitive(primitive, options) {\n    const compressedMesh = primitive.extensions && primitive.extensions[KHR_DRACO_MESH_COMPRESSION];\n    if (!compressedMesh) {\n      return;\n    }\n\n    // Extension will be processed, delete it\n    delete primitive.extensions[KHR_DRACO_MESH_COMPRESSION];\n\n    const buffer = this._getBufferViewArray(compressedMesh.bufferView);\n    const decodedData = options.DracoLoader.parseSync(buffer);\n    primitive.attributes = getGLTFAccessors(decodedData.attributes);\n    if (decodedData.indices) {\n      primitive.indices = getGLTFAccessor(decodedData.indices);\n    }\n  }\n\n  // Unpacks one mesh primitive and removes the extension from the primitive\n  _decompressUberDracoPrimitive(primitive, options) {\n    const compressedMesh = primitive.extensions && primitive.extensions[UBER_POINT_CLOUD_EXTENSION];\n    if (!compressedMesh) {\n      return;\n    }\n\n    if (primitive.mode !== 0) {\n      throw new Error(UBER_POINT_CLOUD_EXTENSION);\n    }\n\n    // Extension will be processed, delete it\n    delete primitive.extensions[UBER_POINT_CLOUD_EXTENSION];\n\n    const buffer = this._getBufferViewArray(compressedMesh.bufferView);\n    const decodedData = options.DracoLoader.parseSync(buffer);\n    primitive.attributes = decodedData.attributes;\n  }\n\n  _getBufferViewArray(bufferViewIndex) {\n    const bufferView = this.gltf.bufferViews[bufferViewIndex];\n    if (this.glbParser) {\n      return this.glbParser.getBufferView(bufferView);\n    }\n\n    const buffer = this.gltf.buffers[bufferView.buffer].data;\n    const byteOffset = bufferView.byteOffset || 0;\n    return new Uint8Array(buffer, byteOffset, bufferView.byteLength);\n  }\n\n  // Removes an extension from the top-level list\n  _removeExtension(extensionName) {\n    if (this.json.extensionsRequired) {\n      this._removeStringFromArray(this.json.extensionsRequired, extensionName);\n    }\n    if (this.json.extensionsUsed) {\n      this._removeStringFromArray(this.json.extensionsUsed, extensionName);\n    }\n    if (this.json.extensions) {\n      delete this.json.extensions[extensionName];\n    }\n  }\n\n  _removeStringFromArray(array, string) {\n    let found = true;\n    while (found) {\n      const index = array.indexOf(string);\n      if (index > -1) {\n        array.splice(index, 1);\n      } else {\n        found = false;\n      }\n    }\n  }\n}\n"],"file":"gltf-parser.js"}