{"version":3,"sources":["../../../src/io/memory-source-sink.js"],"names":["MemorySourceSink","data","Map","name","get","ArrayBuffer","isView","length","buffer","set","has","entries"],"mappings":";;AAgBA,WAAaA,gBAAb;AACE,8BAAc;AAAA;;AACZ,SAAKC,IAAL,GAAY,IAAIC,GAAJ,EAAZ;AACD;;AAHH;AAAA;AAAA,6BAKWC,IALX,EAKiB;AACb,aAAO,KAAKF,IAAL,CAAUG,GAAV,CAAcD,IAAd,CAAP;AACD;AAPH;AAAA;AAAA,8BASYA,IATZ,EASkBF,IATlB,EASwB;AAIpB,UAAII,WAAW,CAACC,MAAZ,CAAmBL,IAAnB,KAA4BA,IAAI,CAACM,MAAjC,IAA2CN,IAAI,CAACO,MAApD,EAA4D;AAC1D,aAAKP,IAAL,CAAUQ,GAAV,CAAcN,IAAd,EAAoBF,IAAI,CAACO,MAAzB;AACD,OAFD,MAEO;AACL,aAAKP,IAAL,CAAUQ,GAAV,CAAcN,IAAd,EAAoBF,IAApB;AACD;AACF;AAlBH;AAAA;AAAA,+BAoBaE,IApBb,EAoBmB;AACf,aAAO,KAAKF,IAAL,CAAUS,GAAV,CAAcP,IAAd,CAAP;AACD;AAtBH;AAAA;AAAA,4BAwBU,CAAE;AAxBZ;AAAA;AAAA,8BA0BY;AACR,aAAO,KAAKF,IAAL,CAAUU,OAAV,EAAP;AACD;AA5BH;AAAA;AAAA,wBA8BMR,IA9BN,EA8BY;AACR,aAAO,KAAKF,IAAL,CAAUS,GAAV,CAAcP,IAAd,CAAP;AACD;AAhCH;;AAAA;AAAA","sourcesContent":["// Copyright (c) 2019 Uber Technologies, Inc.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n/**\n * Memory storage for XVIZ data\n */\nexport class MemorySourceSink {\n  constructor() {\n    this.data = new Map();\n  }\n\n  readSync(name) {\n    return this.data.get(name);\n  }\n\n  writeSync(name, data) {\n    // Save the underlying arrayBuffer not the TypedArray\n    // because when reading we should have an ArrayBuffer\n    // and the consumer should make the Type decision\n    if (ArrayBuffer.isView(data) && data.length && data.buffer) {\n      this.data.set(name, data.buffer);\n    } else {\n      this.data.set(name, data);\n    }\n  }\n\n  existsSync(name) {\n    return this.data.has(name);\n  }\n\n  close() {}\n\n  entries() {\n    return this.data.entries();\n  }\n\n  has(name) {\n    return this.data.has(name);\n  }\n}\n"],"file":"memory-source-sink.js"}