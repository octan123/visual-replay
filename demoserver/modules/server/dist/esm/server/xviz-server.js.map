{"version":3,"sources":["../../../src/server/xviz-server.js"],"names":["URL","require","WebSocket","getRequestData","requestUrl","req","params","searchParams","entries","k","v","path","pathname","DEFAULT_OPTIONS","port","perMessageDeflate","maxPayload","XVIZServer","handlers","options","callback","Error","Object","assign","_server","Server","server","on","socket","request","handleSession","cb","close","log","url","handler","newSession","session","onConnect","logger"],"mappings":";;;;;;;;;;;;AAaA,IAAMA,GAAG,GAAGC,OAAO,CAAC,KAAD,CAAP,CAAeD,GAA3B;;AACA,IAAME,SAAS,GAAGD,OAAO,CAAC,IAAD,CAAzB;;AAGA,SAASE,cAAT,CAAwBC,UAAxB,EAAoC;AAClC,MAAMC,GAAG,GAAG,IAAIL,GAAJ,CAAQI,UAAR,EAAoB,mBAApB,CAAZ;AACA,MAAME,MAAM,GAAG,EAAf;;AAFkC,6CAGbD,GAAG,CAACE,YAAJ,CAAiBC,OAAjB,EAHa;AAAA;;AAAA;AAGlC,wDAAiD;AAAA;AAAA,UAArCC,CAAqC;AAAA,UAAlCC,CAAkC;;AAC/CJ,MAAAA,MAAM,CAACG,CAAD,CAAN,GAAYC,CAAZ;AACD;AALiC;AAAA;AAAA;AAAA;AAAA;;AAOlC,SAAO;AACLC,IAAAA,IAAI,EAAEN,GAAG,CAACO,QADL;AAELN,IAAAA,MAAM,EAANA;AAFK,GAAP;AAID;;AAID,IAAMO,eAAe,GAAG;AACtBC,EAAAA,IAAI,EAAE,IADgB;AAEtBC,EAAAA,iBAAiB,EAAE,IAFG;AAGtBC,EAAAA,UAAU,EAAE,KAAK,IAAL,GAAY;AAHF,CAAxB;AAMA,WAAaC,UAAb;AACE,sBAAYC,QAAZ,EAAsBC,OAAtB,EAA+BC,QAA/B,EAAyC;AAAA;;AAAA;;AACvC,QAAI,CAACF,QAAL,EAAe;AACb,YAAM,IAAIG,KAAJ,CAAU,qCAAV,CAAN;AACD;;AAED,SAAKH,QAAL,GAAgBA,QAAhB;AACA,SAAKC,OAAL,GAAeG,MAAM,CAACC,MAAP,CAAcV,eAAd,EAA+BM,OAA/B,CAAf;AACA,SAAKK,OAAL,GAAe,IAAItB,SAAS,CAACuB,MAAd,CAAqB,KAAKN,OAA1B,EAAmCC,QAAnC,CAAf;AAEA,SAAKM,MAAL,CAAYC,EAAZ,CAAe,YAAf,EAA6B,UAACC,MAAD,EAASC,OAAT;AAAA,aAAqB,KAAI,CAACC,aAAL,CAAmBF,MAAnB,EAA2BC,OAA3B,CAArB;AAAA,KAA7B;AACD;;AAXH;AAAA;AAAA,0BAiBQE,EAjBR,EAiBY;AACR,WAAKP,OAAL,CAAaQ,KAAb,CAAmBD,EAAnB;AACD;AAnBH;AAAA;AAAA;AAAA,uFAqBsBH,MArBtB,EAqB8BC,OArB9B;AAAA;;AAAA;AAAA;AAAA;AAAA;AAsBI,qBAAKI,GAAL,mCAAoCJ,OAAO,CAACK,GAA5C;AACM7B,gBAAAA,GAvBV,GAuBgBF,cAAc,CAAC0B,OAAO,CAACK,GAAT,CAvB9B;AAAA,wDAwB0B,KAAKhB,QAxB/B;AAAA;;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAwBeiB,gBAAAA,OAxBf;AAAA;AAAA,uBAyB4BA,OAAO,CAACC,UAAR,CAAmBR,MAAnB,EAA2BvB,GAA3B,CAzB5B;;AAAA;AAyBYgC,gBAAAA,OAzBZ;;AAAA,qBA0BUA,OA1BV;AAAA;AAAA;AAAA;;AA2BQA,gBAAAA,OAAO,CAACC,SAAR;AA3BR;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA;;AAAA;;AAAA;;AAAA;AAiCIV,gBAAAA,MAAM,CAACI,KAAP;AACA,qBAAKC,GAAL,CAAS,+CAAT;;AAlCJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA,0BAqCc;AAAA,UACHM,MADG,GACO,KAAKpB,OADZ,CACHoB,MADG;;AAEV,UAAIA,MAAM,IAAIA,MAAM,CAACN,GAArB,EAA0B;AACxBM,QAAAA,MAAM,CAACN,GAAP,OAAAM,MAAM,YAAN;AACD;AACF;AA1CH;AAAA;AAAA,wBAae;AACX,aAAO,KAAKf,OAAZ;AACD;AAfH;;AAAA;AAAA","sourcesContent":["// Copyright (c) 2019 Uber Technologies, Inc.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nconst URL = require('url').URL;\nconst WebSocket = require('ws');\n\n// Extract path and params from the request\nfunction getRequestData(requestUrl) {\n  const req = new URL(requestUrl, 'https://localhost');\n  const params = {};\n  for (const [k, v] of req.searchParams.entries()) {\n    params[k] = v;\n  }\n\n  return {\n    path: req.pathname,\n    params\n  };\n}\n\n// TODO: Allow a client supplied server to be used\n//       so clients can control routes\nconst DEFAULT_OPTIONS = {\n  port: 3000,\n  perMessageDeflate: true,\n  maxPayload: 64 * 1024 * 1024 // 64MiB\n};\n\nexport class XVIZServer {\n  constructor(handlers, options, callback) {\n    if (!handlers) {\n      throw new Error('Must specify a handler for messages');\n    }\n\n    this.handlers = handlers;\n    this.options = Object.assign(DEFAULT_OPTIONS, options);\n    this._server = new WebSocket.Server(this.options, callback);\n\n    this.server.on('connection', (socket, request) => this.handleSession(socket, request));\n  }\n\n  get server() {\n    return this._server;\n  }\n\n  close(cb) {\n    this._server.close(cb);\n  }\n\n  async handleSession(socket, request) {\n    this.log(`[> Connection] created: ${request.url}`);\n    const req = getRequestData(request.url);\n    for (const handler of this.handlers) {\n      const session = await handler.newSession(socket, req);\n      if (session) {\n        session.onConnect();\n        return;\n      }\n    }\n\n    // TODO: send XVIZ error and close connection\n    socket.close();\n    this.log('[> Connection] closed due to no handler found');\n  }\n\n  log(...msg) {\n    const {logger} = this.options;\n    if (logger && logger.log) {\n      logger.log(...msg);\n    }\n  }\n}\n"],"file":"xviz-server.js"}