{"version":3,"sources":["../../../src/cmds/server.js"],"names":["Log","XVIZServer","XVIZProviderHandler","XVIZProviderFactory","ScenarioProvider","serverArgs","inArgs","defaultCommand","console","log","cmd","command","format","describe","choices","nargs","live","delay","type","scenarios","group","duration","hz","directory","alias","required","port","verbose","count","serverCmd","args","id","enable","setLevel","v","logger","error","msg","warn","info","options","addProviderClass","handler","wss","server","address"],"mappings":";;;;;;AAaA,SAAQA,GAAR,QAAkB,UAAlB;AAEA,SAAQC,UAAR,QAAyB,uBAAzB;AACA,SAAQC,mBAAR,QAAkC,iCAAlC;AACA,SAAQC,mBAAR,QAAkC,UAAlC;AAGA,SAAQC,gBAAR,QAA+B,cAA/B;AAEA,OAAO,SAASC,UAAT,CAAoBC,MAApB,EAA2D;AAAA,iFAAJ,EAAI;AAAA,iCAA9BC,cAA8B;AAAA,MAA9BA,cAA8B,oCAAb,KAAa;;AAChEC,EAAAA,OAAO,CAACC,GAAR,CAAY,YAAZ;AACA,MAAMC,GAAG,GAAGH,cAAc,GAAG,CAAC,QAAD,EAAW,GAAX,CAAH,GAAqB,QAA/C;AAEA,SAAOD,MAAM,CAACK,OAAP,CACLD,GADK,EAEL,sBAFK,EAGL;AAEEE,IAAAA,MAAM,EAAE;AACNC,MAAAA,QAAQ,EAAE,oBADJ;AAENC,MAAAA,OAAO,EAAE,CAAC,aAAD,EAAgB,aAAhB,EAA+B,YAA/B,EAA6C,YAA7C,CAFH;AAGNC,MAAAA,KAAK,EAAE;AAHD,KAFV;AAOEC,IAAAA,IAAI,EAAE;AACJH,MAAAA,QAAQ,EAAE,sCADN;AAEJ,iBAAS;AAFL,KAPR;AAWEI,IAAAA,KAAK,EAAE;AACLJ,MAAAA,QAAQ,EAAE,oDADL;AAELK,MAAAA,IAAI,EAAE,QAFD;AAGL,iBAAS;AAHJ,KAXT;AAgBEC,IAAAA,SAAS,EAAE;AACTN,MAAAA,QAAQ,EAAE,yBADD;AAETK,MAAAA,IAAI,EAAE,SAFG;AAGT,iBAAS,IAHA;AAITE,MAAAA,KAAK,EAAE;AAJE,KAhBb;AAsBEC,IAAAA,QAAQ,EAAE;AACRR,MAAAA,QAAQ,EAAE,uDADF;AAERK,MAAAA,IAAI,EAAE,QAFE;AAGR,iBAAS,EAHD;AAIRE,MAAAA,KAAK,EAAE;AAJC,KAtBZ;AA4BEE,IAAAA,EAAE,EAAE;AACFT,MAAAA,QAAQ,EAAE,uDADR;AAEFK,MAAAA,IAAI,EAAE,QAFJ;AAGF,iBAAS,EAHP;AAIFE,MAAAA,KAAK,EAAE;AAJL,KA5BN;AAkCEG,IAAAA,SAAS,EAAE;AACTC,MAAAA,KAAK,EAAE,GADE;AAETX,MAAAA,QAAQ,EAAE,4DAFD;AAGTK,MAAAA,IAAI,EAAE,QAHG;AAITO,MAAAA,QAAQ,EAAE,IAJD;AAKTL,MAAAA,KAAK,EAAE;AALE,KAlCb;AAyCEM,IAAAA,IAAI,EAAE;AACJb,MAAAA,QAAQ,EAAE,mBADN;AAEJO,MAAAA,KAAK,EAAE;AAFH,KAzCR;AA6CEO,IAAAA,OAAO,EAAE;AACPH,MAAAA,KAAK,EAAE,GADA;AAEPI,MAAAA,KAAK,EAAE,IAFA;AAGPf,MAAAA,QAAQ,EAAE;AAHH;AA7CX,GAHK,EAsDLgB,SAtDK,CAAP;AAwDD;AAED,OAAO,SAASA,SAAT,CAAmBC,IAAnB,EAAyB;AAC9B,MAAMrB,IAAG,GAAG,IAAIT,GAAJ,CAAQ;AAAC+B,IAAAA,EAAE,EAAE;AAAL,GAAR,CAAZ;;AAGAtB,EAAAA,IAAG,CAACuB,MAAJ,CAAW,IAAX,EAAiBC,QAAjB,CAA0BH,IAAI,CAACI,CAA/B;;AAEA,MAAMC,MAAM,GAAG;AACb1B,IAAAA,GAAG,EAAE;AAAA,aAAYA,IAAG,CAACA,GAAJ,OAAAA,IAAG,YAAH,EAAZ;AAAA,KADQ;AAEb2B,IAAAA,KAAK,EAAE;AAAA,wCAAIC,GAAJ;AAAIA,QAAAA,GAAJ;AAAA;;AAAA,aAAY5B,IAAG,MAAH,UAAI,CAAJ,SAAU4B,GAAV,IAAZ;AAAA,KAFM;AAGbC,IAAAA,IAAI,EAAE;AAAA,yCAAID,GAAJ;AAAIA,QAAAA,GAAJ;AAAA;;AAAA,aAAY5B,IAAG,CAACA,GAAJ,OAAAA,IAAG,GAAK,CAAL,SAAW4B,GAAX,EAAH,EAAZ;AAAA,KAHO;AAIbE,IAAAA,IAAI,EAAE;AAAA,yCAAIF,GAAJ;AAAIA,QAAAA,GAAJ;AAAA;;AAAA,aAAY5B,IAAG,CAACA,GAAJ,OAAAA,IAAG,GAAK,CAAL,SAAW4B,GAAX,EAAH,EAAZ;AAAA,KAJO;AAKbV,IAAAA,OAAO,EAAE;AAAA,yCAAIU,GAAJ;AAAIA,QAAAA,GAAJ;AAAA;;AAAA,aAAY5B,IAAG,CAACA,GAAJ,OAAAA,IAAG,GAAK,CAAL,SAAW4B,GAAX,EAAH,EAAZ;AAAA;AALI,GAAf;;AAQA,MAAMG,OAAO,mCACRV,IADQ;AAEXK,IAAAA,MAAM,EAANA;AAFW,IAAb;;AAKA,MAAIL,IAAI,CAACX,SAAT,EAAoB;AAClBhB,IAAAA,mBAAmB,CAACsC,gBAApB,CAAqCrC,gBAArC;AACD;;AAED,MAAMsC,OAAO,GAAG,IAAIxC,mBAAJ,CAAwBC,mBAAxB,EAA6CqC,OAA7C,CAAhB;AACA,MAAMG,GAAG,GAAG,IAAI1C,UAAJ,CAAe,CAACyC,OAAD,CAAf,EAA0BF,OAA1B,EAAmC,YAAM;AACnDL,IAAAA,MAAM,CAAC1B,GAAP,kCAAqCkC,GAAG,CAACC,MAAJ,CAAWC,OAAX,GAAqBnB,IAA1D;AACD,GAFW,CAAZ;AAGD","sourcesContent":["// Copyright (c) 2019 Uber Technologies, Inc.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nimport {Log} from 'probe.gl';\n\nimport {XVIZServer} from '../server/xviz-server';\nimport {XVIZProviderHandler} from '../server/xviz-provider-handler';\nimport {XVIZProviderFactory} from '@xviz/io';\n\n// For default command automatically support scenarios\nimport {ScenarioProvider} from '../scenarios';\n\nexport function serverArgs(inArgs, {defaultCommand = false} = {}) {\n  console.log('cmd/server')\n  const cmd = defaultCommand ? ['server', '*'] : 'server';\n\n  return inArgs.command(\n    cmd,\n    'Start an XVIZ Server',\n    {\n      // client can request, otherwise default to source data format\n      format: {\n        describe: 'Output data format',\n        choices: ['JSON_STRING', 'JSON_BUFFER', 'BINARY_GLB', 'BINARY_PBE'],\n        nargs: 1\n      },\n      live: {\n        describe: 'Return data as if from a live stream',\n        boolean: true\n      },\n      delay: {\n        describe: 'The delay between sending messages in milliseconds',\n        type: 'number',\n        default: 50\n      },\n      scenarios: {\n        describe: 'Enable Scenario support',\n        type: 'boolean',\n        default: true,\n        group: 'Scenario Options:'\n      },\n      duration: {\n        describe: 'The duration in seconds of the generated scenario log',\n        type: 'number',\n        default: 30,\n        group: 'Scenario Options:'\n      },\n      hz: {\n        describe: 'The frequency of updates for a generated scenario log',\n        type: 'number',\n        default: 10,\n        group: 'Scenario Options:'\n      },\n      directory: {\n        alias: 'd',\n        describe: 'Data directory source.  Multiple directories are supported',\n        type: 'string',\n        required: true,\n        group: 'Hosting Options:'\n      },\n      port: {\n        describe: 'Port to listen on',\n        group: 'Hosting Options:'\n      },\n      verbose: {\n        alias: 'v',\n        count: true,\n        describe: 'Logging level'\n      }\n    },\n    serverCmd\n  );\n}\n\nexport function serverCmd(args) {\n  const log = new Log({id: 'xvizserver-log'});\n\n  // Enable logging and set the level to the verbose count\n  log.enable(true).setLevel(args.v);\n\n  const logger = {\n    log: (...msg) => log.log(...msg)(),\n    error: (...msg) => log(0, ...msg)(),\n    warn: (...msg) => log.log(1, ...msg)(),\n    info: (...msg) => log.log(1, ...msg)(),\n    verbose: (...msg) => log.log(2, ...msg)()\n  };\n\n  const options = {\n    ...args,\n    logger\n  };\n\n  if (args.scenarios) {\n    XVIZProviderFactory.addProviderClass(ScenarioProvider);\n  }\n\n  const handler = new XVIZProviderHandler(XVIZProviderFactory, options);\n  const wss = new XVIZServer([handler], options, () => {\n    logger.log(`test Listening on port ${wss.server.address().port}`);\n  });\n}\n"],"file":"server.js"}