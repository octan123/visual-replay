{"version":3,"sources":["../../../src/scenarios/scenario-reader.js"],"names":["ScenarioReader","source","options","index","_readIndex","metadata","messageIndex","messages","startTime","endTime","timing","length","undefined","timestamp","messageCount","lastMessage","first","last","findIndex","timeEntry","i"],"mappings":";;;;;;;;;;;;;IAcaA,c;AACX,0BAAYC,MAAZ,EAAkC;AAAA,QAAdC,OAAc,uEAAJ,EAAI;AAAA;AAChC,SAAKD,MAAL,GAAcA,MAAd;AAMA,SAAKC,OAAL,GAAeA,OAAf;AAGA,SAAKC,KAAL,GAAa,KAAKC,UAAL,EAAb;AAMD;;;;mCAEc;AACb,aAAO,KAAKH,MAAL,CAAYI,QAAnB;AACD;;;gCAEWC,Y,EAAc;AACxB,aAAO,KAAKL,MAAL,CAAYM,QAAZ,CAAqBD,YAArB,CAAP;AACD;;;gCAEW;AACV,UAAI,KAAKH,KAAT,EAAgB;AAAA,0BACe,KAAKA,KADpB;AAAA,YACPK,SADO,eACPA,SADO;AAAA,YACIC,OADJ,eACIA,OADJ;AAEd,eAAO;AAACD,UAAAA,SAAS,EAATA,SAAD;AAAYC,UAAAA,OAAO,EAAPA;AAAZ,SAAP;AACD;;AAED,aAAO;AAACD,QAAAA,SAAS,EAAE,IAAZ;AAAkBC,QAAAA,OAAO,EAAE;AAA3B,OAAP;AACD;;;mCAEc;AACb,UAAI,KAAKN,KAAT,EAAgB;AACd,eAAO,KAAKA,KAAL,CAAWO,MAAX,CAAkBC,MAAzB;AACD;;AAED,aAAOC,SAAP;AACD;;;gCAGWC,S,EAAW;AACrB,UAAI,CAAC,KAAKV,KAAV,EAAiB;AACf,eAAOS,SAAP;AACD;;AAHoB,yBAKgB,KAAKT,KALrB;AAAA,UAKdK,SALc,gBAKdA,SALc;AAAA,UAKHC,OALG,gBAKHA,OALG;AAAA,UAKMC,MALN,gBAKMA,MALN;AAMrB,UAAMI,YAAY,GAAG,KAAKA,YAAL,EAArB;AACA,UAAMC,WAAW,GAAGD,YAAY,GAAG,CAAf,GAAmBA,YAAY,GAAG,CAAlC,GAAsC,CAA1D;;AAEA,UAAID,SAAS,GAAGL,SAAhB,EAA2B;AACzB,eAAO;AAACQ,UAAAA,KAAK,EAAE,CAAR;AAAWC,UAAAA,IAAI,EAAE;AAAjB,SAAP;AACD;;AAED,UAAIJ,SAAS,GAAGJ,OAAhB,EAAyB;AACvB,eAAO;AAACO,UAAAA,KAAK,EAAED,WAAR;AAAqBE,UAAAA,IAAI,EAAEF;AAA3B,SAAP;AACD;;AAED,UAAIC,KAAK,GAAGN,MAAM,CAACQ,SAAP,CAAiB,UAAAC,SAAS;AAAA,eAAIA,SAAS,IAAIN,SAAjB;AAAA,OAA1B,CAAZ;AAGA,UAAII,IAAI,GAAG,CAAC,CAAZ;AACA,UAAIG,CAAC,GAAGL,WAAR;;AACA,aAAOK,CAAC,IAAI,CAAZ,EAAe;AACb,YAAIV,MAAM,CAACU,CAAD,CAAN,IAAaP,SAAjB,EAA4B;AAC1BI,UAAAA,IAAI,GAAGG,CAAP;AACA;AACD;;AAEDA,QAAAA,CAAC;AACF;;AAED,UAAIJ,KAAK,KAAK,CAAC,CAAf,EAAkB;AAChBA,QAAAA,KAAK,GAAG,CAAR;AACD;;AAED,UAAIC,IAAI,KAAK,CAAC,CAAd,EAAiB;AACfA,QAAAA,IAAI,GAAGF,WAAP;AACD;;AAED,aAAO;AAACC,QAAAA,KAAK,EAALA,KAAD;AAAQC,QAAAA,IAAI,EAAJA;AAAR,OAAP;AACD;;;4BAEO,CAAE;;;iCAEG;AACX,aAAO;AACLT,QAAAA,SAAS,EAAE,KAAKP,MAAL,CAAYS,MAAZ,CAAmB,CAAnB,CADN;AAELD,QAAAA,OAAO,EAAE,KAAKR,MAAL,CAAYS,MAAZ,CAAmB,KAAKT,MAAL,CAAYS,MAAZ,CAAmBC,MAAnB,GAA4B,CAA/C,CAFJ;AAGLD,QAAAA,MAAM,EAAE,KAAKT,MAAL,CAAYS;AAHf,OAAP;AAKD","sourcesContent":["// Copyright (c) 2019 Uber Technologies, Inc.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nexport class ScenarioReader {\n  constructor(source, options = {}) {\n    this.source = source;\n    /*\n     * metadata\n     * messages\n     * timing\n     */\n    this.options = options;\n\n    // Read the message index\n    this.index = this._readIndex();\n    /* \n     * startTime,\n     * endTime,\n     * timing: [ ts0, ts1, ...]\n     */\n  }\n\n  readMetadata() {\n    return this.source.metadata;\n  }\n\n  readMessage(messageIndex) {\n    return this.source.messages[messageIndex];\n  }\n\n  timeRange() {\n    if (this.index) {\n      const {startTime, endTime} = this.index;\n      return {startTime, endTime};\n    }\n\n    return {startTime: null, endTime: null};\n  }\n\n  messageCount() {\n    if (this.index) {\n      return this.index.timing.length;\n    }\n\n    return undefined;\n  }\n\n  // Returns 2 indices covering the messages that bound the requested timestamp\n  findMessage(timestamp) {\n    if (!this.index) {\n      return undefined;\n    }\n\n    const {startTime, endTime, timing} = this.index;\n    const messageCount = this.messageCount();\n    const lastMessage = messageCount > 0 ? messageCount - 1 : 0;\n\n    if (timestamp < startTime) {\n      return {first: 0, last: 0};\n    }\n\n    if (timestamp > endTime) {\n      return {first: lastMessage, last: lastMessage};\n    }\n\n    let first = timing.findIndex(timeEntry => timeEntry >= timestamp);\n\n    // Reverse search for end index\n    let last = -1;\n    let i = lastMessage;\n    while (i >= 0) {\n      if (timing[i] <= timestamp) {\n        last = i;\n        break;\n      }\n\n      i--;\n    }\n\n    if (first === -1) {\n      first = 0;\n    }\n\n    if (last === -1) {\n      last = lastMessage;\n    }\n\n    return {first, last};\n  }\n\n  close() {}\n\n  _readIndex() {\n    return {\n      startTime: this.source.timing[0],\n      endTime: this.source.timing[this.source.timing.length - 1],\n      timing: this.source.timing\n    };\n  }\n}\n"],"file":"scenario-reader.js"}