{"version":3,"sources":["../../../src/scenarios/scenario-circle.js"],"names":["DEG_1_AS_RAD","Math","PI","DEG_90_AS_RAD","circle_metadata","type","data","version","streams","coordinate","stream_style","fill_color","stroked","stroke_width","stroke_color","CircleScenario","options","timestamp","Date","now","radius","duration","live","speed","grid","_drawGrid","metadata","JSON","parse","stringify","log_start_time","log_info","log_end_time","timeOffset","_getMessage","update_type","updates","poses","_drawPose","primitives","circumference","degreesPerSecond","currentDegrees","angle","orientation","position","cos","sin","size","i","unshift","push","gridSize","_calculateGrid","gridXVIZ_h","map","x","vertices","gridXVIZ_v","y","polylines","circles","center","base","style","module","exports","circle"],"mappings":";;;;;;;;;;;;AAoBA,IAAMA,YAAY,GAAGC,IAAI,CAACC,EAAL,GAAU,GAA/B;AACA,IAAMC,aAAa,GAAG,KAAKH,YAA3B;AAEA,IAAMI,eAAe,GAAG;AACtBC,EAAAA,IAAI,EAAE,eADgB;AAEtBC,EAAAA,IAAI,EAAE;AACJC,IAAAA,OAAO,EAAE,OADL;AAEJC,IAAAA,OAAO,6DACJ,eADI,EACc,EADd,8CAEJ,SAFI,EAEQ;AACXC,MAAAA,UAAU,EAAE,UADD;AAEXC,MAAAA,YAAY,EAAE;AACZC,QAAAA,UAAU,EAAE,CAAC,GAAD,EAAM,CAAN,EAAS,EAAT,EAAa,GAAb;AADA;AAFH,KAFR,8CAQJ,gBARI,EAQe;AAClBF,MAAAA,UAAU,EAAE,UADM;AAElBC,MAAAA,YAAY,EAAE;AACZE,QAAAA,OAAO,EAAE,IADG;AAEZC,QAAAA,YAAY,EAAE,GAFF;AAGZC,QAAAA,YAAY,EAAE,CAAC,CAAD,EAAI,GAAJ,EAAS,CAAT,EAAY,GAAZ;AAHF;AAFI,KARf,8CAgBJ,gBAhBI,EAgBe;AAClBL,MAAAA,UAAU,EAAE,UADM;AAElBC,MAAAA,YAAY,EAAE;AACZE,QAAAA,OAAO,EAAE,IADG;AAEZC,QAAAA,YAAY,EAAE,GAFF;AAGZC,QAAAA,YAAY,EAAE,CAAC,CAAD,EAAI,GAAJ,EAAS,CAAT,EAAY,GAAZ;AAHF;AAFI,KAhBf;AAFH;AAFgB,CAAxB;;IAgCMC,c;AACJ,4BAA0B;AAAA,QAAdC,OAAc,uEAAJ,EAAI;AAAA;AAExB,SAAKC,SAAL,GAAiBC,IAAI,CAACC,GAAL,KAAa,IAA9B;AAEA,SAAKC,MAAL,GAAcJ,OAAO,CAACI,MAAR,IAAkB,EAAhC;AACA,SAAKC,QAAL,GAAgBL,OAAO,CAACK,QAAR,IAAoB,EAApC;AACA,SAAKC,IAAL,GAAYN,OAAO,CAACM,IAApB;AACA,SAAKC,KAAL,GAAaP,OAAO,CAACO,KAAR,IAAiB,EAA9B;AAEA,SAAKC,IAAL,GAAY,KAAKC,SAAL,EAAZ;AACD;;;;kCAEa;AACZ,UAAMC,QAAQ,GAAGC,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,SAAL,CAAezB,eAAf,CAAX,CAAjB;;AAEA,UAAI,CAAC,KAAKkB,IAAV,EAAgB;AACd,YAAMQ,cAAc,GAAG,KAAKb,SAA5B;AACAS,QAAAA,QAAQ,CAACpB,IAAT,CAAcyB,QAAd,GAAyB;AACvBD,UAAAA,cAAc,EAAdA,cADuB;AAEvBE,UAAAA,YAAY,EAAEF,cAAc,GAAG,KAAKT;AAFb,SAAzB;AAID;;AAED,aAAOK,QAAP;AACD;;;+BAEUO,U,EAAY;AACrB,aAAO,KAAKC,WAAL,CAAiBD,UAAjB,CAAP;AACD;;;gCAEWA,U,EAAY;AACtB,UAAMhB,SAAS,GAAG,KAAKA,SAAL,GAAiBgB,UAAnC;AAEA,aAAO;AACL5B,QAAAA,IAAI,EAAE,mBADD;AAELC,QAAAA,IAAI,EAAE;AACJ6B,UAAAA,WAAW,EAAE,UADT;AAEJC,UAAAA,OAAO,EAAE,CACP;AACEnB,YAAAA,SAAS,EAATA,SADF;AAEEoB,YAAAA,KAAK,EAAE,KAAKC,SAAL,CAAerB,SAAf,CAFT;AAGEsB,YAAAA,UAAU,EAAE,KAAKf;AAHnB,WADO;AAFL;AAFD,OAAP;AAaD;;;8BAESP,S,EAAW;AACnB,UAAMuB,aAAa,GAAGvC,IAAI,CAACC,EAAL,GAAU,KAAKkB,MAAf,GAAwB,CAA9C;AACA,UAAMqB,gBAAgB,GAAG,OAAOD,aAAa,GAAG,KAAKjB,KAA5B,CAAzB;AACA,UAAMmB,cAAc,GAAGzB,SAAS,GAAGwB,gBAAnC;AACA,UAAME,KAAK,GAAGD,cAAc,GAAG1C,YAA/B;AACA,aAAO;AACL,yBAAiB;AACfiB,UAAAA,SAAS,EAATA,SADe;AAGf2B,UAAAA,WAAW,EAAE,CAAC,CAAD,EAAI,CAAJ,EAAOzC,aAAa,GAAGuC,cAAc,GAAG1C,YAAxC,CAHE;AAIf6C,UAAAA,QAAQ,EAAE,CAAC,KAAKzB,MAAL,GAAcnB,IAAI,CAAC6C,GAAL,CAASH,KAAT,CAAf,EAAgC,KAAKvB,MAAL,GAAcnB,IAAI,CAAC8C,GAAL,CAASJ,KAAT,CAA9C,EAA+D,CAA/D;AAJK;AADZ,OAAP;AAQD;;;mCAEcK,I,EAAM;AAEnB,UAAMxB,IAAI,GAAG,CAAC,CAAD,CAAb;;AACA,WAAK,IAAIyB,CAAC,GAAG,EAAb,EAAiBA,CAAC,IAAID,IAAtB,EAA4BC,CAAC,IAAI,EAAjC,EAAqC;AACnCzB,QAAAA,IAAI,CAAC0B,OAAL,CAAa,CAACD,CAAd;AACAzB,QAAAA,IAAI,CAAC2B,IAAL,CAAUF,CAAV;AACD;;AAED,aAAOzB,IAAP;AACD;;;gCAEW;AAAA;;AAEV,UAAM4B,QAAQ,GAAG,KAAKhC,MAAL,GAAc,EAA/B;;AACA,UAAMI,IAAI,GAAG,KAAK6B,cAAL,CAAoBD,QAApB,CAAb;;AAEA,UAAME,UAAU,GAAG9B,IAAI,CAAC+B,GAAL,CAAS,UAAAC,CAAC,EAAI;AAC/B,eAAO;AACLC,UAAAA,QAAQ,EAAE,CAACD,CAAD,EAAI,CAACJ,QAAL,EAAe,CAAf,EAAkBI,CAAlB,EAAqBJ,QAArB,EAA+B,CAA/B;AADL,SAAP;AAGD,OAJkB,CAAnB;AAMA,UAAMM,UAAU,GAAGlC,IAAI,CAAC+B,GAAL,CAAS,UAAAI,CAAC,EAAI;AAC/B,eAAO;AACLF,UAAAA,QAAQ,EAAE,CAAC,CAACL,QAAF,EAAYO,CAAZ,EAAe,CAAf,EAAkBP,QAAlB,EAA4BO,CAA5B,EAA+B,CAA/B;AADL,SAAP;AAGD,OAJkB,CAAnB;AAMA,+DACG,gBADH,EACsB;AAClBC,QAAAA,SAAS,EAAEN;AADO,OADtB,0CAIG,gBAJH,EAIsB;AAClBM,QAAAA,SAAS,EAAEF;AADO,OAJtB,0CAOG,SAPH,EAOe;AACXG,QAAAA,OAAO,EAAE,CACP;AACEC,UAAAA,MAAM,EAAE,CAAC,GAAD,EAAM,GAAN,EAAW,GAAX,CADV;AAEE1C,UAAAA,MAAM,EAAE,KAAKA;AAFf,SADO,EAKP;AACE0C,UAAAA,MAAM,EAAE,CAAC,KAAK1C,MAAN,EAAc,GAAd,EAAmB,GAAnB,CADV;AAEEA,UAAAA,MAAM,EAAE,CAFV;AAGE2C,UAAAA,IAAI,EAAE;AACJC,YAAAA,KAAK,EAAE;AACLrD,cAAAA,UAAU,EAAE,CAAC,CAAD,EAAI,CAAJ,EAAO,GAAP;AADP;AADH;AAHR,SALO;AADE,OAPf;AAyBD;;;;;AAGHsD,MAAM,CAACC,OAAP,GAAiB;AACfC,EAAAA,MAAM,EAAE,gBAAAnD,OAAO;AAAA,WAAI,IAAID,cAAJ,CAAmBC,OAAnB,CAAJ;AAAA;AADA,CAAjB","sourcesContent":["// Copyright (c) 2019 Uber Technologies, Inc.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n/* Generated XVIZ for a scenario that is a\n * circular path on a grid\n * - no start end time in metadata\n * - stream metadata for coordinate & styling\n */\n/* eslint-disable camelcase */\nconst DEG_1_AS_RAD = Math.PI / 180;\nconst DEG_90_AS_RAD = 90 * DEG_1_AS_RAD;\n\nconst circle_metadata = {\n  type: 'xviz/metadata',\n  data: {\n    version: '2.0.0',\n    streams: {\n      ['/vehicle_pose']: {},\n      ['/circle']: {\n        coordinate: 'IDENTITY',\n        stream_style: {\n          fill_color: [200, 0, 70, 128]\n        }\n      },\n      ['/ground_grid_h']: {\n        coordinate: 'IDENTITY',\n        stream_style: {\n          stroked: true,\n          stroke_width: 0.2,\n          stroke_color: [0, 255, 0, 128]\n        }\n      },\n      ['/ground_grid_v']: {\n        coordinate: 'IDENTITY',\n        stream_style: {\n          stroked: true,\n          stroke_width: 0.2,\n          stroke_color: [0, 255, 0, 128]\n        }\n      }\n    }\n  }\n};\n\nclass CircleScenario {\n  constructor(options = {}) {\n    // timestamp needs to be seconds, not milliseconds\n    this.timestamp = Date.now() / 1000;\n\n    this.radius = options.radius || 30;\n    this.duration = options.duration || 10;\n    this.live = options.live;\n    this.speed = options.speed || 10; // meters per second\n\n    this.grid = this._drawGrid();\n  }\n\n  getMetadata() {\n    const metadata = JSON.parse(JSON.stringify(circle_metadata));\n\n    if (!this.live) {\n      const log_start_time = this.timestamp;\n      metadata.data.log_info = {\n        log_start_time,\n        log_end_time: log_start_time + this.duration\n      };\n    }\n\n    return metadata;\n  }\n\n  getMessage(timeOffset) {\n    return this._getMessage(timeOffset);\n  }\n\n  _getMessage(timeOffset) {\n    const timestamp = this.timestamp + timeOffset;\n\n    return {\n      type: 'xviz/state_update',\n      data: {\n        update_type: 'snapshot',\n        updates: [\n          {\n            timestamp,\n            poses: this._drawPose(timestamp),\n            primitives: this.grid\n          }\n        ]\n      }\n    };\n  }\n\n  _drawPose(timestamp) {\n    const circumference = Math.PI * this.radius * 2;\n    const degreesPerSecond = 360 / (circumference / this.speed);\n    const currentDegrees = timestamp * degreesPerSecond;\n    const angle = currentDegrees * DEG_1_AS_RAD;\n    return {\n      '/vehicle_pose': {\n        timestamp,\n        // Make the car orient the the proper direction on the circle\n        orientation: [0, 0, DEG_90_AS_RAD + currentDegrees * DEG_1_AS_RAD],\n        position: [this.radius * Math.cos(angle), this.radius * Math.sin(angle), 0]\n      }\n    };\n  }\n\n  _calculateGrid(size) {\n    // Make marks every +/-10 units\n    const grid = [0];\n    for (let i = 10; i <= size; i += 10) {\n      grid.unshift(-i);\n      grid.push(i);\n    }\n\n    return grid;\n  }\n\n  _drawGrid() {\n    // Have grid extend beyond car path\n    const gridSize = this.radius + 10;\n    const grid = this._calculateGrid(gridSize);\n\n    const gridXVIZ_h = grid.map(x => {\n      return {\n        vertices: [x, -gridSize, 0, x, gridSize, 0]\n      };\n    });\n\n    const gridXVIZ_v = grid.map(y => {\n      return {\n        vertices: [-gridSize, y, 0, gridSize, y, 0]\n      };\n    });\n\n    return {\n      ['/ground_grid_h']: {\n        polylines: gridXVIZ_h\n      },\n      ['/ground_grid_v']: {\n        polylines: gridXVIZ_v\n      },\n      ['/circle']: {\n        circles: [\n          {\n            center: [0.0, 0.0, 0.0],\n            radius: this.radius\n          },\n          {\n            center: [this.radius, 0.0, 0.1],\n            radius: 1,\n            base: {\n              style: {\n                fill_color: [0, 0, 255]\n              }\n            }\n          }\n        ]\n      }\n    };\n  }\n}\n\nmodule.exports = {\n  circle: options => new CircleScenario(options)\n};\n"],"file":"scenario-circle.js"}