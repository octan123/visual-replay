{"version":3,"sources":["../../../src/server/xviz-provider-handler.js"],"names":["XVIZProviderHandler","factory","options","sessionCount","socket","req","provider","dirs","Array","isArray","d","i","length","root","path","join","source","FileSource","open","params","logger","XVIZProviderSession","id"],"mappings":";;;;;;;;;;;;;;;;;;;AAaA;;AAEA;;AACA;;;;;;IAGaA,mB;AACX,+BAAYC,OAAZ,EAAqBC,OAArB,EAA8B;AAAA;AAC5B,SAAKD,OAAL,GAAeA,OAAf;AACA,SAAKC,OAAL,GAAeA,OAAf;AAEA,SAAKC,YAAL,GAAoB,CAApB;AACD;;;;;yGAEgBC,M,EAAQC,G;;;;;;AACnBC,gBAAAA,Q,GAAW,I;AAETC,gBAAAA,I,GAAOC,KAAK,CAACC,OAAN,CAAc,KAAKP,OAAL,CAAaQ,CAA3B,IAAgC,KAAKR,OAAL,CAAaQ,CAA7C,GAAiD,CAAC,KAAKR,OAAL,CAAaQ,CAAd,C;AACrDC,gBAAAA,C,GAAI,C;;;sBAAGA,CAAC,GAAGJ,IAAI,CAACK,M;;;;;AAEjBC,gBAAAA,I,GAAOC,iBAAKC,IAAL,CAAUR,IAAI,CAACI,CAAD,CAAd,EAAmBN,GAAG,CAACS,IAAvB,C;AAGPE,gBAAAA,M,GAAS,IAAIC,gBAAJ,CAAeJ,IAAf,C;;uBAEE,KAAKZ,OAAL,CAAaiB,IAAb,CAAkB;AACjCF,kBAAAA,MAAM,EAANA,MADiC;AAEjCd,kBAAAA,OAAO,kCAAMG,GAAG,CAACc,MAAV;AAAkBC,oBAAAA,MAAM,EAAE,KAAKlB,OAAL,CAAakB;AAAvC,oBAF0B;AAGjCP,kBAAAA,IAAI,EAAJA;AAHiC,iBAAlB,C;;;AAAjBP,gBAAAA,Q;;qBAMIA,Q;;;;;;;;AAb2BK,gBAAAA,CAAC,E;;;;;qBAkB9BL,Q;;;;;iDACK,IAAIe,wCAAJ,CAAwBjB,MAAxB,EAAgCC,GAAhC,EAAqCC,QAArC,kCACF,KAAKJ,OADH;AAELoB,kBAAAA,EAAE,EAAE,KAAKnB,YAAL;AAFC,mB;;;iDAMF,I","sourcesContent":["// Copyright (c) 2019 Uber Technologies, Inc.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nimport {default as path} from 'path';\n\nimport {XVIZProviderSession} from './xviz-provider-session';\nimport {FileSource} from '@xviz/io/node';\n\n// Setup the source and return an XVIZSession or null\nexport class XVIZProviderHandler {\n  constructor(factory, options) {\n    this.factory = factory;\n    this.options = options;\n\n    this.sessionCount = 0;\n  }\n\n  async newSession(socket, req) {\n    let provider = null;\n\n    const dirs = Array.isArray(this.options.d) ? this.options.d : [this.options.d];\n    for (let i = 0; i < dirs.length; i++) {\n      // Root is used by some XVIZ providers\n      const root = path.join(dirs[i], req.path);\n\n      // FileSource is used for a JSON/BINARY providers\n      const source = new FileSource(root);\n      // TODO: reconsile cli options with request options\n      provider = await this.factory.open({\n        source,\n        options: {...req.params, logger: this.options.logger},\n        root\n      });\n\n      if (provider) {\n        break;\n      }\n    }\n\n    if (provider) {\n      return new XVIZProviderSession(socket, req, provider, {\n        ...this.options,\n        id: this.sessionCount++\n      });\n    }\n\n    return null;\n  }\n}\n"],"file":"xviz-provider-handler.js"}