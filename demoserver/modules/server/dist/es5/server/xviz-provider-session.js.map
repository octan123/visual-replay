{"version":3,"sources":["../../../src/server/xviz-provider-session.js"],"names":["XVIZProviderSession","socket","request","provider","options","middleware","context","XVIZSessionContext","id","set","_setupSocket","_setupMiddleware","handler","XVIZMessageToMiddleware","msg","logger","log","args","info","onerror","err","_onSocketError","onclose","event","_onSocketClose","onopen","_onSocketOpen","onmessage","message","_onSocketMessage","XVIZServerMiddlewareStack","stack","XVIZProviderRequestHandler","XVIZWebsocketSender","error","toString","code","reason","onMessage","JSON","stringify","slice","params","callMiddleware","session_type"],"mappings":"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","sourcesContent":["// Copyright (c) 2019 Uber Technologies, Inc.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport {XVIZProviderRequestHandler} from '../middlewares/xviz-provider-request-handler';\nimport {XVIZWebsocketSender} from '../middlewares/xviz-websocket-sender';\nimport {XVIZMessageToMiddleware} from '../middlewares/xviz-message-to-middleware';\n\nimport {XVIZServerMiddlewareStack} from '../middlewares/xviz-server-middleware-stack';\nimport {XVIZSessionContext} from '../middlewares/xviz-session-context';\n\n// XVIZProviderSession handles the socket and dispatching to the middleware\n//\n// anyone else can add their own session\n// - Would someone want to \"mix\" sessions?\n// - if so they just create a wrapper that if XVIZ session is happy\n//   they can attach to it and proxy as necessary\n// - say they want to handle xvIZ data, but then want to mutate or\n//   add data (custom) for messages, they could try to handle first,\n//   else send to XVIZ\nexport class XVIZProviderSession {\n  constructor(socket, request, provider, options) {\n    this.socket = socket;\n    this.request = request;\n    this.provider = provider;\n    this.options = options;\n    this.middleware = null;\n\n    // session shared storage for the middlewares\n    this.context = new XVIZSessionContext();\n    if (options.id) {\n      this.context.set('id', options.id);\n    }\n\n    this._setupSocket();\n    this._setupMiddleware();\n\n    this.handler = new XVIZMessageToMiddleware(this.middleware);\n  }\n\n  log(msg, ...args) {\n    const {logger} = this.options;\n    if (logger && logger.log) {\n      logger.log(`${msg}`, ...args);\n    }\n  }\n\n  info(...msg) {\n    const {logger} = this.options;\n    if (logger && logger.info) {\n      logger.info(...msg);\n    }\n  }\n\n  _setupSocket() {\n    this.socket.onerror = err => {\n      this._onSocketError(err);\n    };\n\n    this.socket.onclose = event => {\n      this._onSocketClose(event);\n    };\n\n    this.socket.onopen = () => {\n      this._onSocketOpen();\n    };\n\n    this.socket.onmessage = message => {\n      this._onSocketMessage(message);\n    };\n  }\n\n  _setupMiddleware() {\n    this.middleware = new XVIZServerMiddlewareStack();\n\n    const stack = [\n      new XVIZProviderRequestHandler(this.context, this.provider, this.middleware, this.options),\n      new XVIZWebsocketSender(this.context, this.socket, this.options)\n    ];\n    this.middleware.set(stack);\n  }\n\n  _onSocketOpen() {\n    this.log('[> Socket] Open');\n  }\n\n  _onSocketError(error) {\n    this.log('[> Socket] Error: ', error.toString());\n  }\n\n  _onSocketClose(event) {\n    this.log(`[> Socket] Close: Code ${event.code} Reason: ${event.reason}`);\n  }\n\n  _onSocketMessage(message) {\n    if (!this.handler.onMessage(message)) {\n      this.log('[> Socket] Unknown message: ', JSON.stringify(message, null, 2).slice(0, 100));\n    }\n  }\n\n  onConnect() {\n    this.log('[> Connection] made');\n\n    const params = this.request.params;\n    // Providers have already decided via the URL Path\n    // that this is a valid source, so we can\n    // treat connection as 'start' and send metadata\n    this.handler.callMiddleware('start', params);\n\n    if (params.session_type === 'live') {\n      // If 'live' we start sending data immediately\n      this.handler.callMiddleware('transform_log', {id: 'live', ...params});\n    }\n  }\n}\n"],"file":"xviz-provider-session.js"}