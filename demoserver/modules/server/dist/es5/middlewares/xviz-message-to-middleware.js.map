{"version":3,"sources":["../../../src/middlewares/xviz-message-to-middleware.js"],"names":["XVIZMessageToMiddleware","middleware","options","logger","info","message","data","xvizData","XVIZData","callMiddleware","type","xvizType","msg","toUpperCase","onConnect","onClose","onStart","onMetadata","onStateUpdate","onTransformLog","onTransformLogDone","onTransformPointInTime","onReconfigure","onError"],"mappings":";;;;;;;;;;;;;AAeA;;IAGaA,uB;AACX,mCAAYC,UAAZ,EAAsC;AAAA,QAAdC,OAAc,uEAAJ,EAAI;AAAA;AACpC,SAAKD,UAAL,GAAkBA,UAAlB;AACA,SAAKC,OAAL,GAAeA,OAAf;AACD;;;;2BAEY;AAAA,UACJC,MADI,GACM,KAAKD,OADX,CACJC,MADI;;AAEX,UAAIA,MAAM,IAAIA,MAAM,CAACC,IAArB,EAA2B;AACzBD,QAAAA,MAAM,CAACC,IAAP,OAAAD,MAAM,YAAN;AACD;AACF;;;8BAOSE,O,EAAS;AACjB,UAAI,uBAAcA,OAAO,CAACC,IAAtB,CAAJ,EAAiC;AAI/B,YAAMC,QAAQ,GAAG,IAAIC,YAAJ,CAAaH,OAAO,CAACC,IAArB,CAAjB;AACA,aAAKG,cAAL,CAAoBF,QAAQ,CAACG,IAA7B,EAAmCH,QAAnC;AACA,eAAO,IAAP;AACD;;AAED,aAAO,KAAP;AACD;;;mCAEcI,Q,EAAoB;AAAA,UAAVC,GAAU,uEAAJ,EAAI;AACjC,WAAKR,IAAL,cAAgBO,QAAQ,CAACE,WAAT,EAAhB;;AACA,cAAQF,QAAR;AAEE,aAAK,SAAL;AACE,eAAKV,UAAL,CAAgBa,SAAhB;AACA;;AACF,aAAK,OAAL;AACE,eAAKb,UAAL,CAAgBc,OAAhB;AACA;;AAGF,aAAK,OAAL;AACE,eAAKd,UAAL,CAAgBe,OAAhB,CAAwBJ,GAAxB;AACA;;AACF,aAAK,UAAL;AACE,eAAKX,UAAL,CAAgBgB,UAAhB,CAA2BL,GAA3B;AACA;;AACF,aAAK,cAAL;AACE,eAAKX,UAAL,CAAgBiB,aAAhB,CAA8BN,GAA9B;AACA;;AACF,aAAK,eAAL;AACE,eAAKX,UAAL,CAAgBkB,cAAhB,CAA+BP,GAA/B;AACA;;AACF,aAAK,gBAAL;AACE,eAAKX,UAAL,CAAgBmB,kBAAhB,CAAmCR,GAAnC;AACA;;AACF,aAAK,yBAAL;AACE,eAAKX,UAAL,CAAgBoB,sBAAhB,CAAuCT,GAAvC;AACA;;AACF,aAAK,aAAL;AACE,eAAKX,UAAL,CAAgBqB,aAAhB,CAA8BV,GAA9B;AACA;;AACF,aAAK,OAAL;AACE,eAAKX,UAAL,CAAgBsB,OAAhB,CAAwBX,GAAxB;AACA;;AAEF;AACE,cAAMP,OAAO,8CAAuCM,QAAvC,CAAb;AACA,eAAKV,UAAL,CAAgBsB,OAAhB,CAAwB;AAACb,YAAAA,IAAI,EAAE,YAAP;AAAqBJ,YAAAA,IAAI,EAAE;AAACD,cAAAA,OAAO,EAAPA;AAAD;AAA3B,WAAxB;AACA;AAtCJ;AAwCD","sourcesContent":["// Copyright (c) 2019 Uber Technologies, Inc.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n/* eslint-disable camelcase */\n\nimport {isXVIZMessage, XVIZData} from '@xviz/io';\n\n// Map XVIZ messages to the middleware\nexport class XVIZMessageToMiddleware {\n  constructor(middleware, options = {}) {\n    this.middleware = middleware;\n    this.options = options;\n  }\n\n  info(...msg) {\n    const {logger} = this.options;\n    if (logger && logger.info) {\n      logger.info(...msg);\n    }\n  }\n\n  // onMessage takes an Event and if the message.data\n  // contains an XVIZ message will dispatch to the middleware.\n  //\n  // Returns true if XVIZ message was dispatched\n  // Returns false if was not an XVIZ message\n  onMessage(message) {\n    if (isXVIZMessage(message.data)) {\n      // Since this is the server we assume the message\n      // we get is simple and instantiate the message immediately\n      // We also need to do this to get the \"type()\"\n      const xvizData = new XVIZData(message.data);\n      this.callMiddleware(xvizData.type, xvizData);\n      return true;\n    }\n\n    return false;\n  }\n\n  callMiddleware(xvizType, msg = {}) {\n    this.info(`[> ${xvizType.toUpperCase()}]`);\n    switch (xvizType) {\n      // Connection events\n      case 'connect':\n        this.middleware.onConnect();\n        break;\n      case 'close':\n        this.middleware.onClose();\n        break;\n\n      // XVIZ Message Types\n      case 'start':\n        this.middleware.onStart(msg);\n        break;\n      case 'metadata':\n        this.middleware.onMetadata(msg);\n        break;\n      case 'state_update':\n        this.middleware.onStateUpdate(msg);\n        break;\n      case 'transform_log':\n        this.middleware.onTransformLog(msg);\n        break;\n      case 'transform_done':\n        this.middleware.onTransformLogDone(msg);\n        break;\n      case 'transform_point_in_time':\n        this.middleware.onTransformPointInTime(msg);\n        break;\n      case 'reconfigure':\n        this.middleware.onReconfigure(msg);\n        break;\n      case 'error':\n        this.middleware.onError(msg);\n        break;\n\n      default:\n        const message = `Error: unknown XVIZ message type ${xvizType}`;\n        this.middleware.onError({type: 'xviz/error', data: {message}});\n        break;\n    }\n  }\n}\n"],"file":"xviz-message-to-middleware.js"}