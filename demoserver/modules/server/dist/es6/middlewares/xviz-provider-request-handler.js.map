{"version":3,"sources":["../../../src/middlewares/xviz-provider-request-handler.js"],"names":["Stats","XVIZEnvelope","DEFAULT_OPTIONS","delay","XVIZProviderRequestHandler","constructor","context","provider","middleware","options","metrics","id","Object","assign","_setupContext","metadata","xvizMetadata","message","data","log_info","start_time","end_time","set","onStart","msg","console","log","error","onError","Error","message_format","profile","session_type","onMetadata","_setupTransformMetrics","totalTimer","get","loadTimer","sendTimer","onTransformLog","_clearActiveTransforms","_startTransform","onTransformPointInTime","onReconfigure","logger","_sendStateUpdate","transformState","interval","iterator","timeStart","clearTimeout","valid","transform","xvizMessage","timeEnd","onStateUpdate","logMsgSent","value","setTimeout","onTransformLogDone","TransformLogDone","logDone","endTransform","reset","transforms","tKey","tformState","request","startTransform","getMessageIterator","startTime","start_timestamp","endTime","end_timestamp","_sendAllStateUpdates","index","verbose","name","lastTiming","toFixed","load","send","total","info","getAverageTime","time","getHz","count"],"mappings":"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","sourcesContent":["// Copyright (c) 2019 Uber Technologies, Inc.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n/* global setTimeout, clearTimeout */\n/* eslint-disable camelcase, no-unused-expressions */\nimport {Stats} from 'probe.gl';\nimport {XVIZEnvelope} from '@xviz/io';\n\nconst DEFAULT_OPTIONS = {\n  delay: 0 // time in milliseconds\n};\n\n// Server middleware that handles the logic of responding\n// to a request with data from a provider, processing\n// the data through the supplied middleware\nexport class XVIZProviderRequestHandler {\n  constructor(context, provider, middleware, options = {}) {\n    this.context = context;\n    this.provider = provider;\n    this.middleware = middleware;\n\n    this.metrics = new Stats({id: 'xviz-provider-request-handler'});\n    this.options = Object.assign({}, DEFAULT_OPTIONS, options);\n\n    this._setupContext();\n  }\n\n  _setupContext() {\n    // TODO: make a context specific 'configuration' methods\n    // this.context.set('providerSettings', this.provider.settings());\n\n    const metadata = this.provider.xvizMetadata().message();\n    if (metadata && metadata.data && metadata.data.log_info) {\n      const {start_time, end_time} = metadata.data.log_info;\n      if (start_time) {\n        // TODO: make a context specific source methods\n        this.context.set('start_time', start_time);\n      }\n\n      if (end_time) {\n        this.context.set('end_time', start_time);\n      }\n    }\n  }\n\n  onStart(msg) {\n    console.log('onStart');\n    // TODO; validation\n    const error = null;\n    if (error) {\n      this.middleware.onError(XVIZEnvelope.Error({message: error}));\n    } else {\n      // fill in profile, format, session_type\n      // make context specific configuration fields\n      const message = msg.message();\n      if (message.data.message_format) {\n        this.context.set('message_format', message.data.message_format);\n      } else {\n        this.context.set('message_format', 'BINARY');\n      }\n\n      if (message.data.profile) {\n        this.context.set('profile', message.data.profile);\n      } else {\n        this.context.set('profile', 'default');\n      }\n\n      if (message.data.session_type) {\n        this.context.set('session_type', message.data.session_type);\n      } else {\n        this.context.set('session_type', 'LOG');\n      }\n    }\n\n    // send metadata\n    const metadata = this.provider.xvizMetadata();\n    this.middleware.onMetadata(metadata);\n  }\n\n  _setupTransformMetrics() {\n    return {\n      totalTimer: this.metrics.get(`total`),\n      loadTimer: this.metrics.get(`load`),\n      sendTimer: this.metrics.get(`send`)\n    };\n  }\n\n  onTransformLog(msg) {\n    // TODO: validation\n    const error = null;\n    if (error) {\n      this.middleware.onError(XVIZEnvelope.Error({message: error}));\n    } else {\n      this._clearActiveTransforms();\n      this._startTransform(msg);\n    }\n  }\n\n  onTransformPointInTime(msg) {\n    this.middleware.onError(\n      XVIZEnvelope.Error({message: 'Error: transform_point_in_time is not supported.'})\n    );\n  }\n\n  onReconfigure(msg) {\n    this.middleware.onError(XVIZEnvelope.Error({message: 'Error: reconfigure is not supported.'}));\n  }\n\n  log(...msg) {\n    const {logger} = this.options;\n    if (logger && logger.log) {\n      logger.log(...msg);\n    }\n  }\n\n  /* eslint-disable complexity */\n  async _sendStateUpdate(id, transformState) {\n    const {delay, interval, iterator} = transformState;\n    const {loadTimer, sendTimer, totalTimer} = transformState;\n\n    if (!interval) {\n      // The interval is only falsy if it is the very first call\n      totalTimer && totalTimer.timeStart();\n    }\n\n    if (interval) {\n      clearTimeout(interval);\n      transformState.interval = null;\n    }\n\n    // End when finished iteration or transform has been removed.\n    if (iterator.valid() && this.context.transform(id)) {\n      loadTimer && loadTimer.timeStart();\n      const data = await this.provider.xvizMessage(iterator);\n      loadTimer && loadTimer.timeEnd();\n\n      if (data) {\n        sendTimer && sendTimer.timeStart();\n        this.middleware.onStateUpdate(data);\n        sendTimer && sendTimer.timeEnd();\n\n        this.logMsgSent(id, iterator.value(), loadTimer, sendTimer);\n      }\n\n      transformState.interval = setTimeout(() => this._sendStateUpdate(id, transformState), delay);\n    } else {\n      this.middleware.onTransformLogDone(XVIZEnvelope.TransformLogDone({id}));\n      totalTimer && totalTimer.timeEnd();\n      this.logDone(id, loadTimer, sendTimer, totalTimer);\n      this.context.endTransform(id);\n      this.metrics.reset();\n    }\n  }\n  /* eslint-enable complexity */\n\n  _clearActiveTransforms() {\n    const transforms = this.context.transforms();\n    // Remove all current inflight transforms from list\n    for (const tKey of transforms) {\n      this.context.endTransform(tKey);\n    }\n  }\n\n  _startTransform(msg) {\n    //  store id, start_timestamp, end_timestamp, desired_streams\n    const message = msg.message();\n    const id = message.data.id;\n\n    // setup new transform request\n    const tformState = {\n      request: message.data,\n      iterator: null,\n      interval: null,\n      delay: this.options.delay,\n      ...this._setupTransformMetrics()\n    };\n    this.context.startTransform(id, tformState);\n\n    tformState.iterator = this.provider.getMessageIterator({\n      startTime: message.data.start_timestamp,\n      endTime: message.data.end_timestamp\n    });\n\n    // send state_updates || error\n    if (tformState.delay < 1) {\n      this._sendAllStateUpdates(id, tformState);\n    } else {\n      this._sendStateUpdate(id, tformState);\n    }\n  }\n\n  async _sendAllStateUpdates(id, transformState) {\n    const {iterator} = transformState;\n    const {loadTimer, sendTimer, totalTimer} = transformState;\n\n    totalTimer && totalTimer.timeStart();\n    // End when finished iteration or transform has been removed.\n    while (iterator.valid() && this.context.transform(id)) {\n      loadTimer && loadTimer.timeStart();\n      const data = await this.provider.xvizMessage(iterator);\n      loadTimer && loadTimer.timeEnd();\n\n      if (data) {\n        sendTimer && sendTimer.timeStart();\n        this.middleware.onStateUpdate(data);\n        sendTimer && sendTimer.timeEnd();\n\n        this.logMsgSent(id, iterator.value(), loadTimer, sendTimer);\n      }\n    }\n\n    this.middleware.onTransformLogDone(XVIZEnvelope.TransformLogDone({id}));\n    totalTimer && totalTimer.timeEnd();\n    this.logDone(id, loadTimer, sendTimer, totalTimer);\n    this.context.endTransform(id);\n    this.metrics.reset();\n  }\n\n  logMsgSent(id, index, loadTimer, sendTimer) {\n    const {logger} = this.options;\n    if (logger && logger.verbose) {\n      let msg = `id: ${id} [< STATE_UPDATE] message: ${index}`;\n      if (loadTimer) {\n        msg += ` ${loadTimer.name}:${loadTimer.lastTiming.toFixed(3)}ms`;\n      }\n      if (sendTimer) {\n        msg += ` ${sendTimer.name}:${sendTimer.lastTiming.toFixed(3)}ms`;\n      }\n\n      logger.verbose(msg);\n    }\n  }\n\n  logDone(id, load, send, total) {\n    const {logger} = this.options;\n    if (logger && logger.info) {\n      const msg = `id: ${id} [< DONE]`;\n      if (load) {\n        logger.info(\n          `${msg} ${load.name} Avg:${load.getAverageTime().toFixed(3)}ms Total:${load.time.toFixed(\n            3\n          )}ms Hz:${load.getHz().toFixed(3)}/sec Count:${load.count}`\n        );\n      }\n      if (send) {\n        logger.info(\n          `${msg} ${send.name} Avg:${send.getAverageTime().toFixed(3)}ms Total:${send.time.toFixed(\n            3\n          )}ms Hz:${send.getHz().toFixed(3)}/sec Count:${send.count}`\n        );\n      }\n      if (total) {\n        logger.info(`${msg} ${total.name} ${total.lastTiming.toFixed(3)}ms`);\n      }\n    }\n  }\n}\n"],"file":"xviz-provider-request-handler.js"}