{"version":3,"sources":["../../../src/server/xviz-server.js"],"names":["URL","require","WebSocket","getRequestData","requestUrl","req","params","k","v","searchParams","entries","path","pathname","DEFAULT_OPTIONS","port","perMessageDeflate","maxPayload","XVIZServer","constructor","handlers","options","callback","Error","Object","assign","_server","Server","server","on","socket","request","handleSession","close","cb","log","url","handler","session","newSession","onConnect","msg","logger"],"mappings":"AAaA,MAAMA,GAAG,GAAGC,OAAO,CAAC,KAAD,CAAP,CAAeD,GAA3B;;AACA,MAAME,SAAS,GAAGD,OAAO,CAAC,IAAD,CAAzB;;AAGA,SAASE,cAAT,CAAwBC,UAAxB,EAAoC;AAClC,QAAMC,GAAG,GAAG,IAAIL,GAAJ,CAAQI,UAAR,EAAoB,mBAApB,CAAZ;AACA,QAAME,MAAM,GAAG,EAAf;;AACA,OAAK,MAAM,CAACC,CAAD,EAAIC,CAAJ,CAAX,IAAqBH,GAAG,CAACI,YAAJ,CAAiBC,OAAjB,EAArB,EAAiD;AAC/CJ,IAAAA,MAAM,CAACC,CAAD,CAAN,GAAYC,CAAZ;AACD;;AAED,SAAO;AACLG,IAAAA,IAAI,EAAEN,GAAG,CAACO,QADL;AAELN,IAAAA;AAFK,GAAP;AAID;;AAID,MAAMO,eAAe,GAAG;AACtBC,EAAAA,IAAI,EAAE,IADgB;AAEtBC,EAAAA,iBAAiB,EAAE,IAFG;AAGtBC,EAAAA,UAAU,EAAE,KAAK,IAAL,GAAY;AAHF,CAAxB;AAMA,OAAO,MAAMC,UAAN,CAAiB;AACtBC,EAAAA,WAAW,CAACC,QAAD,EAAWC,OAAX,EAAoBC,QAApB,EAA8B;AACvC,QAAI,CAACF,QAAL,EAAe;AACb,YAAM,IAAIG,KAAJ,CAAU,qCAAV,CAAN;AACD;;AAED,SAAKH,QAAL,GAAgBA,QAAhB;AACA,SAAKC,OAAL,GAAeG,MAAM,CAACC,MAAP,CAAcX,eAAd,EAA+BO,OAA/B,CAAf;AACA,SAAKK,OAAL,GAAe,IAAIvB,SAAS,CAACwB,MAAd,CAAqB,KAAKN,OAA1B,EAAmCC,QAAnC,CAAf;AAEA,SAAKM,MAAL,CAAYC,EAAZ,CAAe,YAAf,EAA6B,CAACC,MAAD,EAASC,OAAT,KAAqB,KAAKC,aAAL,CAAmBF,MAAnB,EAA2BC,OAA3B,CAAlD;AACD;;AAED,MAAIH,MAAJ,GAAa;AACX,WAAO,KAAKF,OAAZ;AACD;;AAEDO,EAAAA,KAAK,CAACC,EAAD,EAAK;AACR,SAAKR,OAAL,CAAaO,KAAb,CAAmBC,EAAnB;AACD;;AAED,QAAMF,aAAN,CAAoBF,MAApB,EAA4BC,OAA5B,EAAqC;AACnC,SAAKI,GAAL,mCAAoCJ,OAAO,CAACK,GAA5C;AACA,UAAM9B,GAAG,GAAGF,cAAc,CAAC2B,OAAO,CAACK,GAAT,CAA1B;;AACA,SAAK,MAAMC,OAAX,IAAsB,KAAKjB,QAA3B,EAAqC;AACnC,YAAMkB,OAAO,GAAG,MAAMD,OAAO,CAACE,UAAR,CAAmBT,MAAnB,EAA2BxB,GAA3B,CAAtB;;AACA,UAAIgC,OAAJ,EAAa;AACXA,QAAAA,OAAO,CAACE,SAAR;AACA;AACD;AACF;;AAGDV,IAAAA,MAAM,CAACG,KAAP;AACA,SAAKE,GAAL,CAAS,+CAAT;AACD;;AAEDA,EAAAA,GAAG,CAAC,GAAGM,GAAJ,EAAS;AACV,UAAM;AAACC,MAAAA;AAAD,QAAW,KAAKrB,OAAtB;;AACA,QAAIqB,MAAM,IAAIA,MAAM,CAACP,GAArB,EAA0B;AACxBO,MAAAA,MAAM,CAACP,GAAP,CAAW,GAAGM,GAAd;AACD;AACF;;AA1CqB","sourcesContent":["// Copyright (c) 2019 Uber Technologies, Inc.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nconst URL = require('url').URL;\nconst WebSocket = require('ws');\n\n// Extract path and params from the request\nfunction getRequestData(requestUrl) {\n  const req = new URL(requestUrl, 'https://localhost');\n  const params = {};\n  for (const [k, v] of req.searchParams.entries()) {\n    params[k] = v;\n  }\n\n  return {\n    path: req.pathname,\n    params\n  };\n}\n\n// TODO: Allow a client supplied server to be used\n//       so clients can control routes\nconst DEFAULT_OPTIONS = {\n  port: 3000,\n  perMessageDeflate: true,\n  maxPayload: 64 * 1024 * 1024 // 64MiB\n};\n\nexport class XVIZServer {\n  constructor(handlers, options, callback) {\n    if (!handlers) {\n      throw new Error('Must specify a handler for messages');\n    }\n\n    this.handlers = handlers;\n    this.options = Object.assign(DEFAULT_OPTIONS, options);\n    this._server = new WebSocket.Server(this.options, callback);\n\n    this.server.on('connection', (socket, request) => this.handleSession(socket, request));\n  }\n\n  get server() {\n    return this._server;\n  }\n\n  close(cb) {\n    this._server.close(cb);\n  }\n\n  async handleSession(socket, request) {\n    this.log(`[> Connection] created: ${request.url}`);\n    const req = getRequestData(request.url);\n    for (const handler of this.handlers) {\n      const session = await handler.newSession(socket, req);\n      if (session) {\n        session.onConnect();\n        return;\n      }\n    }\n\n    // TODO: send XVIZ error and close connection\n    socket.close();\n    this.log('[> Connection] closed due to no handler found');\n  }\n\n  log(...msg) {\n    const {logger} = this.options;\n    if (logger && logger.log) {\n      logger.log(...msg);\n    }\n  }\n}\n"],"file":"xviz-server.js"}