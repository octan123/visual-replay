{"version":3,"sources":["../../../src/server/xviz-provider-session.js"],"names":["XVIZProviderRequestHandler","XVIZWebsocketSender","XVIZMessageToMiddleware","XVIZServerMiddlewareStack","XVIZSessionContext","XVIZProviderSession","constructor","socket","request","provider","options","middleware","context","id","set","_setupSocket","_setupMiddleware","handler","log","msg","args","logger","info","onerror","err","_onSocketError","onclose","event","_onSocketClose","onopen","_onSocketOpen","onmessage","message","_onSocketMessage","stack","error","toString","code","reason","onMessage","JSON","stringify","slice","onConnect","params","callMiddleware","session_type"],"mappings":";;;;;;AAcA,SAAQA,0BAAR,QAAyC,8CAAzC;AACA,SAAQC,mBAAR,QAAkC,sCAAlC;AACA,SAAQC,uBAAR,QAAsC,2CAAtC;AAEA,SAAQC,yBAAR,QAAwC,6CAAxC;AACA,SAAQC,kBAAR,QAAiC,qCAAjC;AAWA,OAAO,MAAMC,mBAAN,CAA0B;AAC/BC,EAAAA,WAAW,CAACC,MAAD,EAASC,OAAT,EAAkBC,QAAlB,EAA4BC,OAA5B,EAAqC;AAC9C,SAAKH,MAAL,GAAcA,MAAd;AACA,SAAKC,OAAL,GAAeA,OAAf;AACA,SAAKC,QAAL,GAAgBA,QAAhB;AACA,SAAKC,OAAL,GAAeA,OAAf;AACA,SAAKC,UAAL,GAAkB,IAAlB;AAGA,SAAKC,OAAL,GAAe,IAAIR,kBAAJ,EAAf;;AACA,QAAIM,OAAO,CAACG,EAAZ,EAAgB;AACd,WAAKD,OAAL,CAAaE,GAAb,CAAiB,IAAjB,EAAuBJ,OAAO,CAACG,EAA/B;AACD;;AAED,SAAKE,YAAL;;AACA,SAAKC,gBAAL;;AAEA,SAAKC,OAAL,GAAe,IAAIf,uBAAJ,CAA4B,KAAKS,UAAjC,CAAf;AACD;;AAEDO,EAAAA,GAAG,CAACC,GAAD,EAAM,GAAGC,IAAT,EAAe;AAChB,UAAM;AAACC,MAAAA;AAAD,QAAW,KAAKX,OAAtB;;AACA,QAAIW,MAAM,IAAIA,MAAM,CAACH,GAArB,EAA0B;AACxBG,MAAAA,MAAM,CAACH,GAAP,WAAcC,GAAd,GAAqB,GAAGC,IAAxB;AACD;AACF;;AAEDE,EAAAA,IAAI,CAAC,GAAGH,GAAJ,EAAS;AACX,UAAM;AAACE,MAAAA;AAAD,QAAW,KAAKX,OAAtB;;AACA,QAAIW,MAAM,IAAIA,MAAM,CAACC,IAArB,EAA2B;AACzBD,MAAAA,MAAM,CAACC,IAAP,CAAY,GAAGH,GAAf;AACD;AACF;;AAEDJ,EAAAA,YAAY,GAAG;AACb,SAAKR,MAAL,CAAYgB,OAAZ,GAAsBC,GAAG,IAAI;AAC3B,WAAKC,cAAL,CAAoBD,GAApB;AACD,KAFD;;AAIA,SAAKjB,MAAL,CAAYmB,OAAZ,GAAsBC,KAAK,IAAI;AAC7B,WAAKC,cAAL,CAAoBD,KAApB;AACD,KAFD;;AAIA,SAAKpB,MAAL,CAAYsB,MAAZ,GAAqB,MAAM;AACzB,WAAKC,aAAL;AACD,KAFD;;AAIA,SAAKvB,MAAL,CAAYwB,SAAZ,GAAwBC,OAAO,IAAI;AACjC,WAAKC,gBAAL,CAAsBD,OAAtB;AACD,KAFD;AAGD;;AAEDhB,EAAAA,gBAAgB,GAAG;AACjB,SAAKL,UAAL,GAAkB,IAAIR,yBAAJ,EAAlB;AAEA,UAAM+B,KAAK,GAAG,CACZ,IAAIlC,0BAAJ,CAA+B,KAAKY,OAApC,EAA6C,KAAKH,QAAlD,EAA4D,KAAKE,UAAjE,EAA6E,KAAKD,OAAlF,CADY,EAEZ,IAAIT,mBAAJ,CAAwB,KAAKW,OAA7B,EAAsC,KAAKL,MAA3C,EAAmD,KAAKG,OAAxD,CAFY,CAAd;AAIA,SAAKC,UAAL,CAAgBG,GAAhB,CAAoBoB,KAApB;AACD;;AAEDJ,EAAAA,aAAa,GAAG;AACd,SAAKZ,GAAL,CAAS,iBAAT;AACD;;AAEDO,EAAAA,cAAc,CAACU,KAAD,EAAQ;AACpB,SAAKjB,GAAL,CAAS,oBAAT,EAA+BiB,KAAK,CAACC,QAAN,EAA/B;AACD;;AAEDR,EAAAA,cAAc,CAACD,KAAD,EAAQ;AACpB,SAAKT,GAAL,kCAAmCS,KAAK,CAACU,IAAzC,sBAAyDV,KAAK,CAACW,MAA/D;AACD;;AAEDL,EAAAA,gBAAgB,CAACD,OAAD,EAAU;AACxB,QAAI,CAAC,KAAKf,OAAL,CAAasB,SAAb,CAAuBP,OAAvB,CAAL,EAAsC;AACpC,WAAKd,GAAL,CAAS,8BAAT,EAAyCsB,IAAI,CAACC,SAAL,CAAeT,OAAf,EAAwB,IAAxB,EAA8B,CAA9B,EAAiCU,KAAjC,CAAuC,CAAvC,EAA0C,GAA1C,CAAzC;AACD;AACF;;AAEDC,EAAAA,SAAS,GAAG;AACV,SAAKzB,GAAL,CAAS,qBAAT;AAEA,UAAM0B,MAAM,GAAG,KAAKpC,OAAL,CAAaoC,MAA5B;AAIA,SAAK3B,OAAL,CAAa4B,cAAb,CAA4B,OAA5B,EAAqCD,MAArC;;AAEA,QAAIA,MAAM,CAACE,YAAP,KAAwB,MAA5B,EAAoC;AAElC,WAAK7B,OAAL,CAAa4B,cAAb,CAA4B,eAA5B;AAA8ChC,QAAAA,EAAE,EAAE;AAAlD,SAA6D+B,MAA7D;AACD;AACF;;AA7F8B","sourcesContent":["// Copyright (c) 2019 Uber Technologies, Inc.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport {XVIZProviderRequestHandler} from '../middlewares/xviz-provider-request-handler';\nimport {XVIZWebsocketSender} from '../middlewares/xviz-websocket-sender';\nimport {XVIZMessageToMiddleware} from '../middlewares/xviz-message-to-middleware';\n\nimport {XVIZServerMiddlewareStack} from '../middlewares/xviz-server-middleware-stack';\nimport {XVIZSessionContext} from '../middlewares/xviz-session-context';\n\n// XVIZProviderSession handles the socket and dispatching to the middleware\n//\n// anyone else can add their own session\n// - Would someone want to \"mix\" sessions?\n// - if so they just create a wrapper that if XVIZ session is happy\n//   they can attach to it and proxy as necessary\n// - say they want to handle xvIZ data, but then want to mutate or\n//   add data (custom) for messages, they could try to handle first,\n//   else send to XVIZ\nexport class XVIZProviderSession {\n  constructor(socket, request, provider, options) {\n    this.socket = socket;\n    this.request = request;\n    this.provider = provider;\n    this.options = options;\n    this.middleware = null;\n\n    // session shared storage for the middlewares\n    this.context = new XVIZSessionContext();\n    if (options.id) {\n      this.context.set('id', options.id);\n    }\n\n    this._setupSocket();\n    this._setupMiddleware();\n\n    this.handler = new XVIZMessageToMiddleware(this.middleware);\n  }\n\n  log(msg, ...args) {\n    const {logger} = this.options;\n    if (logger && logger.log) {\n      logger.log(`${msg}`, ...args);\n    }\n  }\n\n  info(...msg) {\n    const {logger} = this.options;\n    if (logger && logger.info) {\n      logger.info(...msg);\n    }\n  }\n\n  _setupSocket() {\n    this.socket.onerror = err => {\n      this._onSocketError(err);\n    };\n\n    this.socket.onclose = event => {\n      this._onSocketClose(event);\n    };\n\n    this.socket.onopen = () => {\n      this._onSocketOpen();\n    };\n\n    this.socket.onmessage = message => {\n      this._onSocketMessage(message);\n    };\n  }\n\n  _setupMiddleware() {\n    this.middleware = new XVIZServerMiddlewareStack();\n\n    const stack = [\n      new XVIZProviderRequestHandler(this.context, this.provider, this.middleware, this.options),\n      new XVIZWebsocketSender(this.context, this.socket, this.options)\n    ];\n    this.middleware.set(stack);\n  }\n\n  _onSocketOpen() {\n    this.log('[> Socket] Open');\n  }\n\n  _onSocketError(error) {\n    this.log('[> Socket] Error: ', error.toString());\n  }\n\n  _onSocketClose(event) {\n    this.log(`[> Socket] Close: Code ${event.code} Reason: ${event.reason}`);\n  }\n\n  _onSocketMessage(message) {\n    if (!this.handler.onMessage(message)) {\n      this.log('[> Socket] Unknown message: ', JSON.stringify(message, null, 2).slice(0, 100));\n    }\n  }\n\n  onConnect() {\n    this.log('[> Connection] made');\n\n    const params = this.request.params;\n    // Providers have already decided via the URL Path\n    // that this is a valid source, so we can\n    // treat connection as 'start' and send metadata\n    this.handler.callMiddleware('start', params);\n\n    if (params.session_type === 'live') {\n      // If 'live' we start sending data immediately\n      this.handler.callMiddleware('transform_log', {id: 'live', ...params});\n    }\n  }\n}\n"],"file":"xviz-provider-session.js"}