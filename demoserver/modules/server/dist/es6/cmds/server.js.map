{"version":3,"sources":["../../../src/cmds/server.js"],"names":["Log","XVIZServer","XVIZProviderHandler","XVIZProviderFactory","ScenarioProvider","serverArgs","inArgs","defaultCommand","console","log","cmd","command","format","describe","choices","nargs","live","boolean","delay","type","default","scenarios","group","duration","hz","directory","alias","required","port","verbose","count","serverCmd","args","id","enable","setLevel","v","logger","msg","error","warn","info","options","addProviderClass","handler","wss","server","address"],"mappings":"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","sourcesContent":["// Copyright (c) 2019 Uber Technologies, Inc.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nimport {Log} from 'probe.gl';\n\nimport {XVIZServer} from '../server/xviz-server';\nimport {XVIZProviderHandler} from '../server/xviz-provider-handler';\nimport {XVIZProviderFactory} from '@xviz/io';\n\n// For default command automatically support scenarios\nimport {ScenarioProvider} from '../scenarios';\n\nexport function serverArgs(inArgs, {defaultCommand = false} = {}) {\n  console.log('cmd/server')\n  const cmd = defaultCommand ? ['server', '*'] : 'server';\n\n  return inArgs.command(\n    cmd,\n    'Start an XVIZ Server',\n    {\n      // client can request, otherwise default to source data format\n      format: {\n        describe: 'Output data format',\n        choices: ['JSON_STRING', 'JSON_BUFFER', 'BINARY_GLB', 'BINARY_PBE'],\n        nargs: 1\n      },\n      live: {\n        describe: 'Return data as if from a live stream',\n        boolean: true\n      },\n      delay: {\n        describe: 'The delay between sending messages in milliseconds',\n        type: 'number',\n        default: 50\n      },\n      scenarios: {\n        describe: 'Enable Scenario support',\n        type: 'boolean',\n        default: true,\n        group: 'Scenario Options:'\n      },\n      duration: {\n        describe: 'The duration in seconds of the generated scenario log',\n        type: 'number',\n        default: 30,\n        group: 'Scenario Options:'\n      },\n      hz: {\n        describe: 'The frequency of updates for a generated scenario log',\n        type: 'number',\n        default: 10,\n        group: 'Scenario Options:'\n      },\n      directory: {\n        alias: 'd',\n        describe: 'Data directory source.  Multiple directories are supported',\n        type: 'string',\n        required: true,\n        group: 'Hosting Options:'\n      },\n      port: {\n        describe: 'Port to listen on',\n        group: 'Hosting Options:'\n      },\n      verbose: {\n        alias: 'v',\n        count: true,\n        describe: 'Logging level'\n      }\n    },\n    serverCmd\n  );\n}\n\nexport function serverCmd(args) {\n  const log = new Log({id: 'xvizserver-log'});\n\n  // Enable logging and set the level to the verbose count\n  log.enable(true).setLevel(args.v);\n\n  const logger = {\n    log: (...msg) => log.log(...msg)(),\n    error: (...msg) => log(0, ...msg)(),\n    warn: (...msg) => log.log(1, ...msg)(),\n    info: (...msg) => log.log(1, ...msg)(),\n    verbose: (...msg) => log.log(2, ...msg)()\n  };\n\n  const options = {\n    ...args,\n    logger\n  };\n\n  if (args.scenarios) {\n    XVIZProviderFactory.addProviderClass(ScenarioProvider);\n  }\n\n  const handler = new XVIZProviderHandler(XVIZProviderFactory, options);\n  const wss = new XVIZServer([handler], options, () => {\n    logger.log(`test Listening on port ${wss.server.address().port}`);\n  });\n}\n"],"file":"server.js"}