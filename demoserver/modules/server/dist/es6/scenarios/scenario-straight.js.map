{"version":3,"sources":["../../../src/scenarios/scenario-straight.js"],"names":["DEG_1_AS_RAD","Math","PI","straight_metadata","type","data","version","StraightScenario","constructor","options","timestamp","Date","now","lineGap","duration","live","speed","getMetadata","metadata","JSON","parse","stringify","log_start_time","log_info","log_end_time","getMessage","timeOffset","_getMessage","x","_getPositionX","update_type","updates","poses","_drawPose","primitives","_drawLines","orientation","position","_range","start","end","increment","range","i","push","_lineColor","cos","sin","lineStart","lineEnd","lineSpacing","ceil","floor","lineSpacingXVIZ","map","lineX","base","style","stroke_width","stroke_color","vertices","polylines","module","exports","straight"],"mappings":"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","sourcesContent":["// Copyright (c) 2019 Uber Technologies, Inc.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n/* Generated XVIZ for a scenario that is a\n * straight path with relative horizontal lines\n * for movement indication\n * - no start end time in metadata\n * - no streams in metadata\n *   - this means primitives have the coordinate IDENTITY\n */\n/* eslint-disable camelcase */\nconst DEG_1_AS_RAD = Math.PI / 180;\n\nconst straight_metadata = {\n  type: 'xviz/metadata',\n  data: {\n    version: '2.0.0'\n  }\n};\n\nclass StraightScenario {\n  constructor(options = {}) {\n    // timestamp needs to be seconds, not milliseconds\n    this.timestamp = Date.now() / 1000;\n\n    this.lineGap = 5;\n    this.duration = options.duration || 30;\n    this.live = options.live;\n    this.speed = options.speed || 10; // meters per second\n  }\n\n  getMetadata() {\n    const metadata = JSON.parse(JSON.stringify(straight_metadata));\n\n    if (!this.live) {\n      const log_start_time = this.timestamp;\n      metadata.data.log_info = {\n        log_start_time,\n        log_end_time: log_start_time + this.duration\n      };\n    }\n\n    return metadata;\n  }\n\n  getMessage(timeOffset) {\n    return this._getMessage(timeOffset);\n  }\n\n  _getMessage(timeOffset) {\n    const timestamp = this.timestamp + timeOffset;\n\n    const x = this._getPositionX(timestamp);\n    return {\n      type: 'xviz/state_update',\n      data: {\n        update_type: 'snapshot',\n        updates: [\n          {\n            timestamp,\n            poses: this._drawPose(timestamp, x),\n            primitives: this._drawLines(x)\n          }\n        ]\n      }\n    };\n  }\n\n  _drawPose(timestamp, x) {\n    return {\n      '/vehicle_pose': {\n        timestamp,\n        orientation: [0, 0, 0],\n        position: [x, 0, 0]\n      }\n    };\n  }\n\n  _range(start, end, increment = 1) {\n    const range = [];\n    for (let i = start; i <= end; i += increment) {\n      range.push(i * this.lineGap);\n    }\n\n    return range;\n  }\n\n  _lineColor(x) {\n    return [\n      // Generate cyclical colors\n      120 + Math.cos(x * 2 * DEG_1_AS_RAD) * 90,\n      200 + Math.cos(x * DEG_1_AS_RAD) * 30,\n      170 + Math.sin(x * 3 * DEG_1_AS_RAD) * 60\n    ];\n  }\n\n  _getPositionX(timestamp) {\n    return this.speed * (timestamp - this.timestamp);\n  }\n\n  _drawLines(x) {\n    // Car position matches the messageNumber\n    // place the farthest 20\n    const lineStart = (x - 15) / this.lineGap;\n    const lineEnd = (x + 20) / this.lineGap;\n\n    const lineSpacing = this._range(Math.ceil(lineStart), Math.floor(lineEnd));\n    const lineSpacingXVIZ = lineSpacing.map(lineX => {\n      return {\n        base: {\n          style: {\n            stroke_width: 0.2,\n            stroke_color: this._lineColor(lineX)\n          }\n        },\n        vertices: [lineX, -40, 0, lineX, 40, 0]\n      };\n    });\n\n    return {\n      ['/ground_lines']: {\n        polylines: lineSpacingXVIZ\n      }\n    };\n  }\n}\n\nmodule.exports = {\n  straight: options => new StraightScenario(options)\n};\n"],"file":"scenario-straight.js"}