{"version":3,"sources":["../../../src/scenarios/scenario-circle.js"],"names":["DEG_1_AS_RAD","Math","PI","DEG_90_AS_RAD","circle_metadata","type","data","version","streams","coordinate","stream_style","fill_color","stroked","stroke_width","stroke_color","CircleScenario","constructor","options","timestamp","Date","now","radius","duration","live","speed","grid","_drawGrid","getMetadata","metadata","JSON","parse","stringify","log_start_time","log_info","log_end_time","getMessage","timeOffset","_getMessage","update_type","updates","poses","_drawPose","primitives","circumference","degreesPerSecond","currentDegrees","angle","orientation","position","cos","sin","_calculateGrid","size","i","unshift","push","gridSize","gridXVIZ_h","map","x","vertices","gridXVIZ_v","y","polylines","circles","center","base","style","module","exports","circle"],"mappings":"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","sourcesContent":["// Copyright (c) 2019 Uber Technologies, Inc.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n/* Generated XVIZ for a scenario that is a\n * circular path on a grid\n * - no start end time in metadata\n * - stream metadata for coordinate & styling\n */\n/* eslint-disable camelcase */\nconst DEG_1_AS_RAD = Math.PI / 180;\nconst DEG_90_AS_RAD = 90 * DEG_1_AS_RAD;\n\nconst circle_metadata = {\n  type: 'xviz/metadata',\n  data: {\n    version: '2.0.0',\n    streams: {\n      ['/vehicle_pose']: {},\n      ['/circle']: {\n        coordinate: 'IDENTITY',\n        stream_style: {\n          fill_color: [200, 0, 70, 128]\n        }\n      },\n      ['/ground_grid_h']: {\n        coordinate: 'IDENTITY',\n        stream_style: {\n          stroked: true,\n          stroke_width: 0.2,\n          stroke_color: [0, 255, 0, 128]\n        }\n      },\n      ['/ground_grid_v']: {\n        coordinate: 'IDENTITY',\n        stream_style: {\n          stroked: true,\n          stroke_width: 0.2,\n          stroke_color: [0, 255, 0, 128]\n        }\n      }\n    }\n  }\n};\n\nclass CircleScenario {\n  constructor(options = {}) {\n    // timestamp needs to be seconds, not milliseconds\n    this.timestamp = Date.now() / 1000;\n\n    this.radius = options.radius || 30;\n    this.duration = options.duration || 10;\n    this.live = options.live;\n    this.speed = options.speed || 10; // meters per second\n\n    this.grid = this._drawGrid();\n  }\n\n  getMetadata() {\n    const metadata = JSON.parse(JSON.stringify(circle_metadata));\n\n    if (!this.live) {\n      const log_start_time = this.timestamp;\n      metadata.data.log_info = {\n        log_start_time,\n        log_end_time: log_start_time + this.duration\n      };\n    }\n\n    return metadata;\n  }\n\n  getMessage(timeOffset) {\n    return this._getMessage(timeOffset);\n  }\n\n  _getMessage(timeOffset) {\n    const timestamp = this.timestamp + timeOffset;\n\n    return {\n      type: 'xviz/state_update',\n      data: {\n        update_type: 'snapshot',\n        updates: [\n          {\n            timestamp,\n            poses: this._drawPose(timestamp),\n            primitives: this.grid\n          }\n        ]\n      }\n    };\n  }\n\n  _drawPose(timestamp) {\n    const circumference = Math.PI * this.radius * 2;\n    const degreesPerSecond = 360 / (circumference / this.speed);\n    const currentDegrees = timestamp * degreesPerSecond;\n    const angle = currentDegrees * DEG_1_AS_RAD;\n    return {\n      '/vehicle_pose': {\n        timestamp,\n        // Make the car orient the the proper direction on the circle\n        orientation: [0, 0, DEG_90_AS_RAD + currentDegrees * DEG_1_AS_RAD],\n        position: [this.radius * Math.cos(angle), this.radius * Math.sin(angle), 0]\n      }\n    };\n  }\n\n  _calculateGrid(size) {\n    // Make marks every +/-10 units\n    const grid = [0];\n    for (let i = 10; i <= size; i += 10) {\n      grid.unshift(-i);\n      grid.push(i);\n    }\n\n    return grid;\n  }\n\n  _drawGrid() {\n    // Have grid extend beyond car path\n    const gridSize = this.radius + 10;\n    const grid = this._calculateGrid(gridSize);\n\n    const gridXVIZ_h = grid.map(x => {\n      return {\n        vertices: [x, -gridSize, 0, x, gridSize, 0]\n      };\n    });\n\n    const gridXVIZ_v = grid.map(y => {\n      return {\n        vertices: [-gridSize, y, 0, gridSize, y, 0]\n      };\n    });\n\n    return {\n      ['/ground_grid_h']: {\n        polylines: gridXVIZ_h\n      },\n      ['/ground_grid_v']: {\n        polylines: gridXVIZ_v\n      },\n      ['/circle']: {\n        circles: [\n          {\n            center: [0.0, 0.0, 0.0],\n            radius: this.radius\n          },\n          {\n            center: [this.radius, 0.0, 0.1],\n            radius: 1,\n            base: {\n              style: {\n                fill_color: [0, 0, 255]\n              }\n            }\n          }\n        ]\n      }\n    };\n  }\n}\n\nmodule.exports = {\n  circle: options => new CircleScenario(options)\n};\n"],"file":"scenario-circle.js"}