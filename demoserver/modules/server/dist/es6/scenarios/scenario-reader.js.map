{"version":3,"sources":["../../../src/scenarios/scenario-reader.js"],"names":["ScenarioReader","constructor","source","options","index","_readIndex","readMetadata","metadata","readMessage","messageIndex","messages","timeRange","startTime","endTime","messageCount","timing","length","undefined","findMessage","timestamp","lastMessage","first","last","findIndex","timeEntry","i","close"],"mappings":"AAcA,OAAO,MAAMA,cAAN,CAAqB;AAC1BC,EAAAA,WAAW,CAACC,MAAD,EAASC,OAAO,GAAG,EAAnB,EAAuB;AAChC,SAAKD,MAAL,GAAcA,MAAd;AAMA,SAAKC,OAAL,GAAeA,OAAf;AAGA,SAAKC,KAAL,GAAa,KAAKC,UAAL,EAAb;AAMD;;AAEDC,EAAAA,YAAY,GAAG;AACb,WAAO,KAAKJ,MAAL,CAAYK,QAAnB;AACD;;AAEDC,EAAAA,WAAW,CAACC,YAAD,EAAe;AACxB,WAAO,KAAKP,MAAL,CAAYQ,QAAZ,CAAqBD,YAArB,CAAP;AACD;;AAEDE,EAAAA,SAAS,GAAG;AACV,QAAI,KAAKP,KAAT,EAAgB;AACd,YAAM;AAACQ,QAAAA,SAAD;AAAYC,QAAAA;AAAZ,UAAuB,KAAKT,KAAlC;AACA,aAAO;AAACQ,QAAAA,SAAD;AAAYC,QAAAA;AAAZ,OAAP;AACD;;AAED,WAAO;AAACD,MAAAA,SAAS,EAAE,IAAZ;AAAkBC,MAAAA,OAAO,EAAE;AAA3B,KAAP;AACD;;AAEDC,EAAAA,YAAY,GAAG;AACb,QAAI,KAAKV,KAAT,EAAgB;AACd,aAAO,KAAKA,KAAL,CAAWW,MAAX,CAAkBC,MAAzB;AACD;;AAED,WAAOC,SAAP;AACD;;AAGDC,EAAAA,WAAW,CAACC,SAAD,EAAY;AACrB,QAAI,CAAC,KAAKf,KAAV,EAAiB;AACf,aAAOa,SAAP;AACD;;AAED,UAAM;AAACL,MAAAA,SAAD;AAAYC,MAAAA,OAAZ;AAAqBE,MAAAA;AAArB,QAA+B,KAAKX,KAA1C;AACA,UAAMU,YAAY,GAAG,KAAKA,YAAL,EAArB;AACA,UAAMM,WAAW,GAAGN,YAAY,GAAG,CAAf,GAAmBA,YAAY,GAAG,CAAlC,GAAsC,CAA1D;;AAEA,QAAIK,SAAS,GAAGP,SAAhB,EAA2B;AACzB,aAAO;AAACS,QAAAA,KAAK,EAAE,CAAR;AAAWC,QAAAA,IAAI,EAAE;AAAjB,OAAP;AACD;;AAED,QAAIH,SAAS,GAAGN,OAAhB,EAAyB;AACvB,aAAO;AAACQ,QAAAA,KAAK,EAAED,WAAR;AAAqBE,QAAAA,IAAI,EAAEF;AAA3B,OAAP;AACD;;AAED,QAAIC,KAAK,GAAGN,MAAM,CAACQ,SAAP,CAAiBC,SAAS,IAAIA,SAAS,IAAIL,SAA3C,CAAZ;AAGA,QAAIG,IAAI,GAAG,CAAC,CAAZ;AACA,QAAIG,CAAC,GAAGL,WAAR;;AACA,WAAOK,CAAC,IAAI,CAAZ,EAAe;AACb,UAAIV,MAAM,CAACU,CAAD,CAAN,IAAaN,SAAjB,EAA4B;AAC1BG,QAAAA,IAAI,GAAGG,CAAP;AACA;AACD;;AAEDA,MAAAA,CAAC;AACF;;AAED,QAAIJ,KAAK,KAAK,CAAC,CAAf,EAAkB;AAChBA,MAAAA,KAAK,GAAG,CAAR;AACD;;AAED,QAAIC,IAAI,KAAK,CAAC,CAAd,EAAiB;AACfA,MAAAA,IAAI,GAAGF,WAAP;AACD;;AAED,WAAO;AAACC,MAAAA,KAAD;AAAQC,MAAAA;AAAR,KAAP;AACD;;AAEDI,EAAAA,KAAK,GAAG,CAAE;;AAEVrB,EAAAA,UAAU,GAAG;AACX,WAAO;AACLO,MAAAA,SAAS,EAAE,KAAKV,MAAL,CAAYa,MAAZ,CAAmB,CAAnB,CADN;AAELF,MAAAA,OAAO,EAAE,KAAKX,MAAL,CAAYa,MAAZ,CAAmB,KAAKb,MAAL,CAAYa,MAAZ,CAAmBC,MAAnB,GAA4B,CAA/C,CAFJ;AAGLD,MAAAA,MAAM,EAAE,KAAKb,MAAL,CAAYa;AAHf,KAAP;AAKD;;AA/FyB","sourcesContent":["// Copyright (c) 2019 Uber Technologies, Inc.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nexport class ScenarioReader {\n  constructor(source, options = {}) {\n    this.source = source;\n    /*\n     * metadata\n     * messages\n     * timing\n     */\n    this.options = options;\n\n    // Read the message index\n    this.index = this._readIndex();\n    /* \n     * startTime,\n     * endTime,\n     * timing: [ ts0, ts1, ...]\n     */\n  }\n\n  readMetadata() {\n    return this.source.metadata;\n  }\n\n  readMessage(messageIndex) {\n    return this.source.messages[messageIndex];\n  }\n\n  timeRange() {\n    if (this.index) {\n      const {startTime, endTime} = this.index;\n      return {startTime, endTime};\n    }\n\n    return {startTime: null, endTime: null};\n  }\n\n  messageCount() {\n    if (this.index) {\n      return this.index.timing.length;\n    }\n\n    return undefined;\n  }\n\n  // Returns 2 indices covering the messages that bound the requested timestamp\n  findMessage(timestamp) {\n    if (!this.index) {\n      return undefined;\n    }\n\n    const {startTime, endTime, timing} = this.index;\n    const messageCount = this.messageCount();\n    const lastMessage = messageCount > 0 ? messageCount - 1 : 0;\n\n    if (timestamp < startTime) {\n      return {first: 0, last: 0};\n    }\n\n    if (timestamp > endTime) {\n      return {first: lastMessage, last: lastMessage};\n    }\n\n    let first = timing.findIndex(timeEntry => timeEntry >= timestamp);\n\n    // Reverse search for end index\n    let last = -1;\n    let i = lastMessage;\n    while (i >= 0) {\n      if (timing[i] <= timestamp) {\n        last = i;\n        break;\n      }\n\n      i--;\n    }\n\n    if (first === -1) {\n      first = 0;\n    }\n\n    if (last === -1) {\n      last = lastMessage;\n    }\n\n    return {first, last};\n  }\n\n  close() {}\n\n  _readIndex() {\n    return {\n      startTime: this.source.timing[0],\n      endTime: this.source.timing[this.source.timing.length - 1],\n      timing: this.source.timing\n    };\n  }\n}\n"],"file":"scenario-reader.js"}