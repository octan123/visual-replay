{"version":3,"sources":["../../../src/messages/sensor-navsatfix-converter.js"],"names":["Converter","quaternionToEuler","TimeUtil","SensorNavSatFix","config","frame","xvizBuilder","imuTopic","msg","message","length","rotation","orientation","topic","timestamp","state","_getOrientationFromIMU","ts","toDate","getTime","poseBuilder","pose","xvizStream","mapOrigin","longitude","latitude","altitude","position","roll","pitch","yaw","xvizMetaBuilder","context","stream","category"],"mappings":";;;;;;;;;;;;AAaA,OAAOA,SAAP,MAAsB,aAAtB;AACA,SAAQC,iBAAR,QAAgC,sBAAhC;AACA,SAAQC,QAAR,QAAuB,QAAvB;AAEA,WAAaC,eAAb;AAAA;;AAAA;;AACE,2BAAYC,MAAZ,EAAoB;AAAA;;AAAA,6BACZA,MADY;AAEnB;;AAHH;AAAA;AAAA,2CAayBC,KAbzB,EAagCC,WAbhC,EAa6C;AACzC,UAAI,CAAC,KAAKF,MAAL,CAAYG,QAAjB,EAA2B;AACzB,eAAO,IAAP;AACD;;AAED,UAAMC,GAAG,GAAGH,KAAK,CAAC,KAAKD,MAAL,CAAYG,QAAb,CAAjB;;AACA,UAAI,CAACC,GAAL,EAAU;AACR,eAAO,IAAP;AACD;;AARwC,UAUlCC,OAVkC,GAUvBD,GAAG,CAACA,GAAG,CAACE,MAAJ,GAAa,CAAd,CAVoB,CAUlCD,OAVkC;AAWzC,UAAME,QAAQ,GAAGV,iBAAiB,CAACQ,OAAO,CAACG,WAAT,CAAlC;AACA,aAAO;AAACD,QAAAA,QAAQ,EAARA;AAAD,OAAP;AACD;AA1BH;AAAA;AAAA;AAAA,wFA4BuBN,KA5BvB,EA4B8BC,WA5B9B;AAAA;;AAAA;AAAA;AAAA;AAAA;AA6BUE,gBAAAA,GA7BV,GA6BgBH,KAAK,CAAC,KAAKQ,KAAN,CA7BrB;;AAAA,oBA8BSL,GA9BT;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA,uBAkCiCA,GAAG,CAACA,GAAG,CAACE,MAAJ,GAAa,CAAd,CAlCpC,EAkCWI,SAlCX,QAkCWA,SAlCX,EAkCsBL,OAlCtB,QAkCsBA,OAlCtB;AAoCUM,gBAAAA,KApCV,GAoCkB,KAAKC,sBAAL,CAA4BX,KAA5B,EAAmCC,WAAnC,CApClB;AAyCUW,gBAAAA,EAzCV,GAyCef,QAAQ,CAACgB,MAAT,CAAgBJ,SAAhB,EAA2BK,OAA3B,KAAuC,GAzCtD;AA0CUC,gBAAAA,WA1CV,GA0CwBd,WAAW,CAC5Be,IADiB,CACZ,KAAKC,UADO,EAEjBC,SAFiB,CAEPd,OAAO,CAACe,SAFD,EAEYf,OAAO,CAACgB,QAFpB,EAE8BhB,OAAO,CAACiB,QAFtC,EAGjBZ,SAHiB,CAGPG,EAHO,EAIjBU,QAJiB,CAIR,CAJQ,EAIL,CAJK,EAIF,CAJE,CA1CxB;;AAiDI,oBAAIZ,KAAK,IAAIA,KAAK,CAACJ,QAAnB,EAA6B;AACpBA,kBAAAA,QADoB,GACRI,KADQ,CACpBJ,QADoB;AAE3BS,kBAAAA,WAAW,CAACR,WAAZ,CAAwBD,QAAQ,CAACiB,IAAjC,EAAuCjB,QAAQ,CAACkB,KAAhD,EAAuDlB,QAAQ,CAACmB,GAAhE;AACD;;AApDL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA,gCAuDcC,eAvDd,EAuD+BC,OAvD/B,EAuDwC;AACpCD,MAAAA,eAAe,CAACE,MAAhB,CAAuB,KAAKX,UAA5B,EAAwCY,QAAxC,CAAiD,MAAjD;AACD;AAzDH;AAAA;AAAA,wBAKoB;AAChB,aAAO,iBAAP;AACD;AAPH;AAAA;AAAA,wBAS2B;AACvB,aAAO,uBAAP;AACD;AAXH;;AAAA;AAAA,EAAqClC,SAArC","sourcesContent":["// Copyright (c) 2019 Uber Technologies, Inc.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nimport Converter from './converter';\nimport {quaternionToEuler} from '../common/quaternion';\nimport {TimeUtil} from 'rosbag';\n\nexport class SensorNavSatFix extends Converter {\n  constructor(config) {\n    super(config);\n  }\n\n  static get name() {\n    return 'SensorNavSatFix';\n  }\n\n  static get messageType() {\n    return 'sensor_msgs/NavSatFix';\n  }\n\n  _getOrientationFromIMU(frame, xvizBuilder) {\n    if (!this.config.imuTopic) {\n      return null;\n    }\n\n    const msg = frame[this.config.imuTopic];\n    if (!msg) {\n      return null;\n    }\n\n    const {message} = msg[msg.length - 1];\n    const rotation = quaternionToEuler(message.orientation);\n    return {rotation};\n  }\n\n  async convertMessage(frame, xvizBuilder) {\n    const msg = frame[this.topic];\n    if (!msg) {\n      return;\n    }\n\n    const {timestamp, message} = msg[msg.length - 1];\n\n    const state = this._getOrientationFromIMU(frame, xvizBuilder);\n\n    // Every frame *MUST* have a pose. The pose can be considered\n    // the core reference point for other data and usually drives the timing\n    // of the system.\n    const ts = TimeUtil.toDate(timestamp).getTime() / 1e3;\n    const poseBuilder = xvizBuilder\n      .pose(this.xvizStream)\n      .mapOrigin(message.longitude, message.latitude, message.altitude)\n      .timestamp(ts)\n      .position(0, 0, 0);\n\n    // Add rotation to the pose\n    if (state && state.rotation) {\n      const {rotation} = state;\n      poseBuilder.orientation(rotation.roll, rotation.pitch, rotation.yaw);\n    }\n  }\n\n  getMetadata(xvizMetaBuilder, context) {\n    xvizMetaBuilder.stream(this.xvizStream).category('pose');\n  }\n}\n"],"file":"sensor-navsatfix-converter.js"}