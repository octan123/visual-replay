{"version":3,"sources":["../../../src/messages/visualization-markerarray-converter.js"],"names":["Converter","_","Vector3","ACTION_ADD","ACTION_DELETE","ACTION_DELETE_ALL","NAMESPACE_SEPARATOR","VisualizationMarkerArray","config","acceptMarker","markersMap","ARROW_STREAM","xvizStream","join","SPHERE_STREAM","LINESTRIP_STREAM","LINELIST_STREAM","TEXT_STREAM","frame","xvizBuilder","messages","topic","message","markers","forEach","marker","_processMarker","writeMarkers","xvizMetaBuilder","stream","coordinate","category","type","streamStyle","stroke_width","stroke_width_min_pixels","size","fill_color","WRITERS","_writeArrow","bind","_writeSphere","_writeLineStrip","_writeLineList","_writeText","forOwn","writer","points","_makeArrow","pose","primitive","polyline","style","stroke_color","_toColor","id","_getMarkerId","RADIUS","scale","x","_mapPoints","y","z","circle","lines","chunk","line","index","position","text","color","colors","r","g","b","a","map","v","Math","round","origin","p","clone","add","toArray","base","vector","vecA","_makeVector","pCrossVec","pCross","_makePoint","vecB","leftPt","rotateZ","radians","PI","rightPt","push","markerId","action","ns","pickBy","value","key","startsWith"],"mappings":"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","sourcesContent":["// Copyright (c) 2019 Uber Technologies, Inc.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n/* eslint-disable camelcase, no-invalid-this */\nimport Converter from './converter';\nimport _ from 'lodash';\nimport {Vector3} from 'math.gl';\n\nconst ACTION_ADD = 0;\nconst ACTION_DELETE = 2;\nconst ACTION_DELETE_ALL = 3;\n\nconst NAMESPACE_SEPARATOR = '/';\n\n/**\n * Handles converting MarkerArray messages\n */\nexport class VisualizationMarkerArray extends Converter {\n  constructor(config) {\n    // acceptMarker /* Function to filter the markers to use (if not defined, uses all markers) */\n    super(config);\n    this.acceptMarker = this.config.acceptMarker || (() => true);\n\n    this.markersMap = {};\n\n    this.ARROW_STREAM = [this.xvizStream, 'arrow'].join(NAMESPACE_SEPARATOR);\n    this.SPHERE_STREAM = [this.xvizStream, 'sphere'].join(NAMESPACE_SEPARATOR);\n    this.LINESTRIP_STREAM = [this.xvizStream, 'linestrip'].join(NAMESPACE_SEPARATOR);\n    this.LINELIST_STREAM = [this.xvizStream, 'linelist'].join(NAMESPACE_SEPARATOR);\n    this.TEXT_STREAM = [this.xvizStream, 'text'].join(NAMESPACE_SEPARATOR);\n  }\n\n  static get name() {\n    return 'VisualizationMarkerArray';\n  }\n\n  static get messageType() {\n    return 'visualization_msgs/MarkerArray';\n  }\n\n  convertMessage(frame, xvizBuilder) {\n    const messages = frame[this.topic];\n    if (messages) {\n      for (const {message} of messages) {\n        message.markers.forEach(marker => this._processMarker(marker));\n      }\n    }\n\n    this.writeMarkers(xvizBuilder);\n  }\n\n  getMetadata(xvizMetaBuilder) {\n    xvizMetaBuilder\n      .stream(this.ARROW_STREAM)\n      .coordinate('IDENTITY')\n      .category('primitive')\n      .type('polyline')\n\n      .stream(this.LINESTRIP_STREAM)\n      .coordinate('IDENTITY')\n      .category('primitive')\n      .type('polyline')\n      .streamStyle({\n        stroke_width: 0.2,\n        stroke_width_min_pixels: 1\n      })\n\n      .stream(this.LINELIST_STREAM)\n      .coordinate('IDENTITY')\n      .category('primitive')\n      .type('polyline')\n      .streamStyle({\n        stroke_width: 0.2,\n        stroke_width_min_pixels: 1\n      })\n\n      .stream(this.SPHERE_STREAM)\n      .coordinate('IDENTITY')\n      .category('primitive')\n      .type('circle')\n      .streamStyle({\n        stroke_width: 0.2\n      })\n\n      .stream(this.TEXT_STREAM)\n      .category('primitive')\n      .type('text')\n      .streamStyle({\n        size: 18,\n        fill_color: '#0000FF'\n      });\n  }\n\n  writeMarkers(xvizBuilder) {\n    /* Unimplemented markers\n    uint8 CUBE=1\n    uint8 CYLINDER=3\n    uint8 CUBE_LIST=6\n    uint8 SPHERE_LIST=7\n    uint8 POINTS=8\n    uint8 MESH_RESOURCE=10\n    uint8 TRIANGLE_LIST=11\n    */\n\n    const WRITERS = {\n      '0': this._writeArrow.bind(this),\n      '2': this._writeSphere.bind(this),\n      '4': this._writeLineStrip.bind(this),\n      '5': this._writeLineList.bind(this),\n      '9': this._writeText.bind(this)\n    };\n\n    /*\n    const writerName = {\n      '0': 'Arrow',\n      '2': 'Sphere',\n      '4': 'LineStrip',\n      '5': 'LineList',\n      '9': 'Text'\n    };\n    */\n\n    _.forOwn(this.markersMap, marker => {\n      const writer = WRITERS[marker.type];\n      if (writer) {\n        writer(marker, xvizBuilder);\n      }\n    });\n  }\n\n  _writeArrow(marker, xvizBuilder) {\n    const points = this._makeArrow(marker.points, marker.pose);\n    xvizBuilder\n      .primitive(this.ARROW_STREAM)\n      .polyline(points)\n      .style({stroke_color: this._toColor(marker)})\n      .id(this._getMarkerId(marker));\n  }\n\n  _writeSphere(marker, xvizBuilder) {\n    const RADIUS = marker.scale.x / 2;\n    const points = this._mapPoints([{x: 0, y: 0, z: 0}], marker.pose);\n\n    xvizBuilder\n      .primitive(this.SPHERE_STREAM)\n      .circle(points[0], RADIUS)\n      .style({fill_color: this._toColor(marker)})\n      .id(this._getMarkerId(marker));\n  }\n\n  _writeLineStrip(marker, xvizBuilder) {\n    xvizBuilder\n      .primitive(this.LINESTRIP_STREAM)\n      .polyline(this._mapPoints(marker.points, marker.pose))\n      .style({stroke_color: this._toColor(marker)})\n      .id(this._getMarkerId(marker));\n  }\n\n  _writeLineList(marker, xvizBuilder) {\n    const lines = _.chunk(marker.points, 2);\n    lines.forEach((line, index) => {\n      xvizBuilder\n        .primitive(this.LINELIST_STREAM)\n        .polyline(this._mapPoints(line, marker.pose))\n        .style({stroke_color: this._toColor(marker)})\n        .id([this._getMarkerId(marker), index].join(NAMESPACE_SEPARATOR));\n    });\n  }\n\n  _writeText(marker, xvizBuilder) {\n    const points = this._mapPoints(\n      [\n        {x: 0, y: 0, z: 2} // z=2 to float above\n      ],\n      marker.pose\n    );\n\n    xvizBuilder\n      .primitive(this.TEXT_STREAM)\n      .position(points[0])\n      .text(marker.text);\n  }\n\n  _toColor(marker) {\n    const color = marker.color || (marker.colors || [])[0];\n    if (color) {\n      return [color.r, color.g, color.b, color.a].map(v => Math.round(v * 255));\n    }\n\n    return [128, 128, 128, 255]; // default color\n  }\n\n  _mapPoints(points, pose) {\n    const origin = new Vector3([pose.position.x, pose.position.y, 0]);\n\n    return points.map(p => {\n      p = [p.x, p.y, 0];\n      return origin\n        .clone()\n        .add(p)\n        .toArray();\n    });\n  }\n\n  _makeVector(p) {\n    const v = [p[1][0] - p[0][0], p[1][1] - p[0][1], p[1][2] - p[0][2]];\n    return v;\n  }\n\n  _makePoint(base, vector) {\n    const v = [base[0] + vector[0], base[1] + vector[1], base[2] + vector[2]];\n    return v;\n  }\n\n  _makeArrow(points, pose) {\n    const p = this._mapPoints(points, pose);\n\n    // vector pointing to starting point\n    const vecA = new Vector3(this._makeVector([p[1], p[0]]));\n\n    const pCrossVec = vecA.clone().scale(0.3);\n    const pCross = this._makePoint(p[1], pCrossVec.toArray());\n\n    vecA.scale(0.5);\n    const vecB = vecA.clone();\n\n    const leftPt = this._makePoint(p[1], vecB.rotateZ({radians: -Math.PI / 4}).toArray());\n    const rightPt = this._makePoint(p[1], vecA.rotateZ({radians: Math.PI / 4}).toArray());\n\n    p.push(p[1]);\n\n    return [p[0], pCross, leftPt, p[1], rightPt, pCross];\n  }\n\n  _processMarker(marker) {\n    const markerId = this._getMarkerId(marker);\n\n    if (marker.action === ACTION_ADD) {\n      // We only run the acceptMarker filter for ADD because we want to avoid accidentally filtering\n      // out DELETE messages. It's safe to process all DELETE messages because worse case they're just a noop\n      // if they don't apply\n      if (this.acceptMarker(marker)) {\n        this.markersMap[markerId] = marker;\n      }\n    } else if (marker.action === ACTION_DELETE) {\n      if (!marker.ns) {\n        this.markersMap = {};\n      } else {\n        this.markersMap = _.pickBy(this.markersMap, (value, key) => {\n          // Using `startsWith` to support removing entire namespaces when an id isn't specified\n          return !key.startsWith(markerId);\n        });\n      }\n    } else if (marker.action === ACTION_DELETE_ALL) {\n      this.markersMap = {};\n    }\n  }\n\n  _getMarkerId(marker) {\n    return [marker.ns, marker.id].join(NAMESPACE_SEPARATOR);\n  }\n}\n"],"file":"visualization-markerarray-converter.js"}