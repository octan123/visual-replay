{"version":3,"sources":["../../../src/messages/sensor-image-converter.js"],"names":["Converter","sharp","SensorImage","config","frame","xvizBuilder","msgs","topic","length","message","width","height","data","raw","channels","resize","toFormat","toBuffer","imgData","primitive","xvizStream","image","nodeBufferToTypedArray","dimensions","xvizMetaBuilder","xb","stream","category","type","buffer","typedArray","Uint8Array"],"mappings":";;;;;;;;;;;;AAaA,OAAOA,SAAP,MAAsB,aAAtB;AACA,OAAOC,KAAP,MAAkB,OAAlB;AAEA,WAAaC,WAAb;AAAA;;AAAA;;AACE,uBAAYC,MAAZ,EAAoB;AAAA;;AAAA,6BACZA,MADY;AAEnB;;AAHH;AAAA;AAAA;AAAA,wFAauBC,KAbvB,EAa8BC,WAb9B;AAAA;AAAA;AAAA;AAAA;AAAA;AAcUC,gBAAAA,IAdV,GAciBF,KAAK,CAAC,KAAKG,KAAN,CAdtB;;AAAA,oBAeSD,IAfT;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA,qBAmBQA,IAAI,CAACE,MAnBb;AAAA;AAAA;AAAA;;AAoBaC,gBAAAA,OApBb,GAoBwBH,IAAI,CAACA,IAAI,CAACE,MAAL,GAAc,CAAf,CApB5B,CAoBaC,OApBb;AAqBaC,gBAAAA,KArBb,GAqB0DD,OArB1D,CAqBaC,KArBb,EAqBoBC,MArBpB,GAqB0DF,OArB1D,CAqBoBE,MArBpB,EAqBkDC,IArBlD,GAqB0DH,OArB1D,CAqBkDG,IArBlD;AAAA;AAAA,uBA0B4BX,KAAK,CAACW,IAAD,EAAO;AAChCC,kBAAAA,GAAG,EAAE;AACHH,oBAAAA,KAAK,EAALA,KADG;AAEHC,oBAAAA,MAAM,EAANA,MAFG;AAGHG,oBAAAA,QAAQ,EAAE;AAHP;AAD2B,iBAAP,CAAL,CAOnBC,MAPmB,CAOZ,GAPY,EAQnBC,QARmB,CAQV,KARU,EASnBC,QATmB,EA1B5B;;AAAA;AA0BYC,gBAAAA,OA1BZ;AAqCMb,gBAAAA,WAAW,CACRc,SADH,CACa,KAAKC,UADlB,EAEGC,KAFH,CAESC,sBAAsB,CAACJ,OAAD,CAF/B,EAE0C,KAF1C,EAGGK,UAHH,CAGcb,KAHd,EAGqBC,MAHrB;;AArCN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA,gCA4Cca,eA5Cd,EA4C+B;AAC3B,UAAMC,EAAE,GAAGD,eAAX;AACAC,MAAAA,EAAE,CAACC,MAAH,CAAU,KAAKN,UAAf,EACGO,QADH,CACY,WADZ,EAEGC,IAFH,CAEQ,OAFR;AAGD;AAjDH;AAAA;AAAA,wBAKoB;AAChB,aAAO,aAAP;AACD;AAPH;AAAA;AAAA,wBAS2B;AACvB,aAAO,mBAAP;AACD;AAXH;;AAAA;AAAA,EAAiC5B,SAAjC;;AAoDA,SAASsB,sBAAT,CAAgCO,MAAhC,EAAwC;AAEtC,MAAMC,UAAU,GAAG,IAAIC,UAAJ,CAAeF,MAAf,CAAnB;AACA,SAAOC,UAAP;AACD","sourcesContent":["// Copyright (c) 2019 Uber Technologies, Inc.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nimport Converter from './converter';\nimport sharp from 'sharp';\n\nexport class SensorImage extends Converter {\n  constructor(config) {\n    super(config);\n  }\n\n  static get name() {\n    return 'SensorImage';\n  }\n\n  static get messageType() {\n    return 'sensor_msgs/Image';\n  }\n\n  async convertMessage(frame, xvizBuilder) {\n    const msgs = frame[this.topic];\n    if (!msgs) {\n      return;\n    }\n\n    if (msgs.length) {\n      const {message} = msgs[msgs.length - 1];\n      const {width, height, /* encoding, step, */ data} = message;\n\n      // TODO: encoding should be handled properly instead of assuming a 3 channel image.\n      // http://docs.ros.org/jade/api/sensor_msgs/html/image__encodings_8h_source.html\n\n      const imgData = await sharp(data, {\n        raw: {\n          width,\n          height,\n          channels: 3\n        }\n      })\n        .resize(400)\n        .toFormat('png')\n        .toBuffer();\n\n      xvizBuilder\n        .primitive(this.xvizStream)\n        .image(nodeBufferToTypedArray(imgData), 'png')\n        .dimensions(width, height);\n    }\n  }\n\n  getMetadata(xvizMetaBuilder) {\n    const xb = xvizMetaBuilder;\n    xb.stream(this.xvizStream)\n      .category('primitive')\n      .type('image');\n  }\n}\n\nfunction nodeBufferToTypedArray(buffer) {\n  // TODO - per docs we should just be able to call buffer.buffer, but there are issues\n  const typedArray = new Uint8Array(buffer);\n  return typedArray;\n}\n"],"file":"sensor-image-converter.js"}