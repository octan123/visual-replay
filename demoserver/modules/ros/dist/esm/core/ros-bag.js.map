{"version":3,"sources":["../../../src/core/ros-bag.js"],"names":["open","TimeUtil","quaternionToEuler","ROSBag","bagPath","rosConfig","options","bagContext","topicMessageTypes","ros2xviz","_openBag","bag","_initBag","needsTopicTypes","_gatherTopicsTypes","_initTopics","TF","TF_STATIC","start_time","toDate","startTime","getTime","end_time","endTime","frameIdToPoseMap","readMessages","topics","topic","message","transforms","forEach","t","child_frame_id","transform","translation","rotation","conn","connections","type","includes","Error","initializeConverters","metadataBuilder","buildMetadata","start","end","frame","fromDate","Date","result","data","Buffer","from","push"],"mappings":"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","sourcesContent":["// Copyright (c) 2019 Uber Technologies, Inc.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n/* global Buffer */\n/* eslint-disable camelcase */\nimport {open, TimeUtil} from 'rosbag';\nimport {quaternionToEuler} from '../common/quaternion';\n\nexport class ROSBag {\n  constructor(bagPath, rosConfig, options = {}) {\n    this.bagPath = bagPath;\n    this.rosConfig = rosConfig;\n    this.options = options;\n\n    this.bagContext = {};\n    this.topicMessageTypes = {};\n  }\n\n  // Open the ROS Bag and collect information\n  async init(ros2xviz) {\n    const bag = await this._openBag();\n\n    await this._initBag(bag);\n\n    // If we already have types for every topic, then\n    // we do not need to scan the bag file.\n    if (this.rosConfig.needsTopicTypes()) {\n      this._gatherTopicsTypes(bag);\n    }\n\n    this._initTopics(ros2xviz);\n\n    return true;\n  }\n\n  async _openBag() {\n    return await open(this.bagPath);\n  }\n\n  /**\n   * Clients may subclass and expand this method\n   * in order to support any special processing for their specific\n   * topics.\n   *\n   * Extracts:\n   *   frameIdToPoseMap: ROS /tf transform tree\n   *   start_time,\n   *   end_time,\n   *   origin: map origin\n   */\n  async _initBag(bag) {\n    const TF = '/tf';\n    const TF_STATIC = '/tf_static';\n\n    this.bagContext.start_time = TimeUtil.toDate(bag.startTime).getTime() / 1e3;\n    this.bagContext.end_time = TimeUtil.toDate(bag.endTime).getTime() / 1e3;\n\n    const frameIdToPoseMap = {};\n    await bag.readMessages({topics: [TF, TF_STATIC]}, ({topic, message}) => {\n      message.transforms.forEach(t => {\n        frameIdToPoseMap[t.child_frame_id] = {\n          ...t.transform.translation,\n          ...quaternionToEuler(t.transform.rotation)\n        };\n      });\n    });\n\n    this.bagContext.frameIdToPoseMap = frameIdToPoseMap;\n  }\n\n  // Collecting the topic & types can be expensive, so we only\n  // collect them if they are not already in the configuration\n  _gatherTopicsTypes(bag) {\n    const topics = this.rosConfig.topics;\n\n    for (const conn in bag.connections) {\n      const {topic, type} = bag.connections[conn];\n\n      // Filter if 'topics' are provided\n      if (!topics || topics.includes(topic)) {\n        // Validate that the message type does not change\n        if (this.topicMessageTypes[topic] && this.topicMessageTypes[topic] !== type) {\n          throw new Error(\n            `Unexpected change in topic type ${topic} has ${\n              this.topicMessageTypes[topic]\n            } with new type ${type}`\n          );\n        } else if (!this.topicMessageTypes[topic]) {\n          // track we have seen it and add to list\n          this.topicMessageTypes[topic] = type;\n        }\n      }\n    }\n  }\n\n  // Using topics and message type, ensure we create a converter\n  // for each topic.\n  _initTopics(ros2xviz) {\n    ros2xviz.initializeConverters(this.topicMessageTypes, this.bagContext);\n  }\n\n  getMetadata(metadataBuilder, ros2xviz) {\n    ros2xviz.buildMetadata(metadataBuilder, this.bagContext);\n\n    metadataBuilder.startTime(this.bagContext.start_time);\n    metadataBuilder.endTime(this.bagContext.end_time);\n  }\n\n  // Synchronize xviz messages by timestep\n  async readMessages(start, end) {\n    const bag = await this._openBag();\n    const frame = {};\n\n    const options = {\n      topics: this.rosConfig.topics\n    };\n\n    if (start) {\n      options.startTime = TimeUtil.fromDate(new Date(start * 1e3));\n    }\n\n    if (end) {\n      options.endTime = TimeUtil.fromDate(new Date(end * 1e3));\n    }\n\n    await bag.readMessages(options, async result => {\n      // rosbag.js reuses the data buffer for subsequent messages, so we need to make a copy\n      if (result.message.data) {\n        // Used for binary data in images, point clouds, etc\n        // TODO(this needs to work in the browser)\n        result.message.data = Buffer.from(result.message.data);\n      }\n\n      frame[result.topic] = frame[result.topic] || [];\n      frame[result.topic].push(result);\n    });\n\n    return frame;\n  }\n}\n"],"file":"ros-bag.js"}