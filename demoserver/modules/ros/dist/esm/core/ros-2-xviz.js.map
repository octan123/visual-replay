{"version":3,"sources":["../../../src/core/ros-2-xviz.js"],"names":["XVIZBuilder","ROS2XVIZConverter","converters","rosConfig","options","instances","msg","logger","verbose","entry","topicMessageTypes","aux","topic","type","converter","config","ConverterClass","find","conv","name","msgType","messageType","converterConfig","push","count","entryCount","topicConfig","_makeConvertersForTopic","key","length","Error","metadataBuilder","instance","getMetadata","metadata","frame","xvizBuilder","disableStreams","convertMessage","frm","getMessage"],"mappings":"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","sourcesContent":["// Copyright (c) 2019 Uber Technologies, Inc.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n// Given a mapping, this will initialize the converter classes and manage delegating\n// the building of metadata and messsages to the converters\n/* eslint-disable no-continue, max-depth */\n\nimport {XVIZBuilder} from '@xviz/builder';\n\nexport class ROS2XVIZConverter {\n  constructor(converters, rosConfig, options = {}) {\n    // options: {logger}\n    this.options = options;\n\n    // Converters: [\n    //  converterClass { name, messageType }\n    // ]\n    this.converters = converters;\n\n    // Would represent all available topics handled\n    // or null if just mapping by converters.messageType\n    // rosConfig: {\n    //  topicConfig: [\n    //    { topic, type, converter, config: {xvizStream}\n    //  ]\n    // }\n    this.rosConfig = rosConfig;\n\n    this.instances = [];\n  }\n\n  verbose(msg) {\n    const {logger} = this.options;\n    if (logger && logger.verbose) {\n      logger.verbose(msg);\n    }\n  }\n\n  // Make a converter for each topic.\n  // If we have a rosConfig, that will be used to find a converter\n  //\n  // if we don't have a rosConfig, we will just find one based on\n  // the message type\n  _makeConvertersForTopic(entry, topicMessageTypes, aux) {\n    const {topic, type, converter, config} = entry;\n    const {converters} = this;\n\n    let ConverterClass = null;\n\n    // Specific converter by name\n    if (converter) {\n      this.verbose(`ROS2XVIZConverter setting up converter by name for '${topic}'`);\n      ConverterClass = converters.find(conv => conv.name === converter);\n      if (!ConverterClass) {\n        this.verbose(\n          `ROS2XVIZConverter cannot find the converter with name '${converter}' for topic '${topic}'`\n        );\n      }\n    } else {\n      // converter by message type\n      const msgType = type || topicMessageTypes[topic];\n      if (!msgType) {\n        this.verbose(`ROS2XVIZConverter does not have a type for the '${topic}', skipping`);\n      } else {\n        this.verbose(`ROS2XVIZConverter setting up converter by type '${msgType}' for '${topic}'`);\n        ConverterClass = converters.find(conv => conv.messageType === msgType);\n        if (!ConverterClass) {\n          this.verbose(\n            `ROS2XVIZConverter cannot find the converter for message type '${msgType}' for topic '${topic}'`\n          );\n        }\n      }\n    }\n\n    if (ConverterClass) {\n      // aux could have origin, frameIdToPoseMap\n      const converterConfig = {...this.options, ...aux, ...config, topic};\n      this.instances.push(new ConverterClass(converterConfig));\n    }\n  }\n\n  // Using the rosConfig, we have to initialize a converter for each entry.\n  // Note this must support 1-1 and 1-m topic to Converter mappings.\n  //\n  // topicMessageTypes is used if the entries in the rosConfig\n  // to not have a type or converter named.\n  initializeConverters(topicMessageTypes, aux) {\n    const {rosConfig} = this;\n    // topicMessageTypes {topic: type, ...}\n    // aux { origin, frameIdToPoseMap }\n\n    const count = rosConfig.entryCount;\n\n    if (count > 0) {\n      // Construct by rosConfig\n      for (const entry of rosConfig.topicConfig) {\n        this._makeConvertersForTopic(entry, topicMessageTypes, aux);\n      }\n    } else {\n      // Construct by topic type\n      for (const key in topicMessageTypes) {\n        this._makeConvertersForTopic(\n          {topic: key, type: topicMessageTypes[key]},\n          topicMessageTypes,\n          aux\n        );\n      }\n    }\n\n    if (this.instances.length === 0) {\n      throw new Error(\n        'No converters where created. Check that the configuration is correct and the Converter classes are properly registered.'\n      );\n    }\n  }\n\n  buildMetadata(metadataBuilder, aux) {\n    // aux = { frameIdToPoseMap }\n\n    for (const instance of this.instances) {\n      instance.getMetadata(metadataBuilder, aux);\n    }\n\n    this.metadata = metadataBuilder.getMetadata();\n  }\n\n  async buildMessage(frame) {\n    const xvizBuilder = new XVIZBuilder(this.metadata, this.disableStreams, {});\n\n    for (const instance of this.instances) {\n      await instance.convertMessage(frame, xvizBuilder);\n    }\n\n    try {\n      const frm = xvizBuilder.getMessage();\n      return frm;\n    } catch (err) {\n      return null;\n    }\n  }\n}\n"],"file":"ros-2-xviz.js"}