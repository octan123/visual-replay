{"version":3,"sources":["../../../src/core/ros-bag.js"],"names":["ROSBag","bagPath","rosConfig","options","bagContext","topicMessageTypes","ros2xviz","_openBag","bag","_initBag","needsTopicTypes","_gatherTopicsTypes","_initTopics","TF","TF_STATIC","start_time","TimeUtil","toDate","startTime","getTime","end_time","endTime","frameIdToPoseMap","readMessages","topics","topic","message","transforms","forEach","t","child_frame_id","transform","translation","rotation","conn","connections","type","includes","Error","initializeConverters","metadataBuilder","buildMetadata","start","end","frame","fromDate","Date","result","data","Buffer","from","push"],"mappings":"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","sourcesContent":["// Copyright (c) 2019 Uber Technologies, Inc.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n/* global Buffer */\n/* eslint-disable camelcase */\nimport {open, TimeUtil} from 'rosbag';\nimport {quaternionToEuler} from '../common/quaternion';\n\nexport class ROSBag {\n  constructor(bagPath, rosConfig, options = {}) {\n    this.bagPath = bagPath;\n    this.rosConfig = rosConfig;\n    this.options = options;\n\n    this.bagContext = {};\n    this.topicMessageTypes = {};\n  }\n\n  // Open the ROS Bag and collect information\n  async init(ros2xviz) {\n    const bag = await this._openBag();\n\n    await this._initBag(bag);\n\n    // If we already have types for every topic, then\n    // we do not need to scan the bag file.\n    if (this.rosConfig.needsTopicTypes()) {\n      this._gatherTopicsTypes(bag);\n    }\n\n    this._initTopics(ros2xviz);\n\n    return true;\n  }\n\n  async _openBag() {\n    return await open(this.bagPath);\n  }\n\n  /**\n   * Clients may subclass and expand this method\n   * in order to support any special processing for their specific\n   * topics.\n   *\n   * Extracts:\n   *   frameIdToPoseMap: ROS /tf transform tree\n   *   start_time,\n   *   end_time,\n   *   origin: map origin\n   */\n  async _initBag(bag) {\n    const TF = '/tf';\n    const TF_STATIC = '/tf_static';\n\n    this.bagContext.start_time = TimeUtil.toDate(bag.startTime).getTime() / 1e3;\n    this.bagContext.end_time = TimeUtil.toDate(bag.endTime).getTime() / 1e3;\n\n    const frameIdToPoseMap = {};\n    await bag.readMessages({topics: [TF, TF_STATIC]}, ({topic, message}) => {\n      message.transforms.forEach(t => {\n        frameIdToPoseMap[t.child_frame_id] = {\n          ...t.transform.translation,\n          ...quaternionToEuler(t.transform.rotation)\n        };\n      });\n    });\n\n    this.bagContext.frameIdToPoseMap = frameIdToPoseMap;\n  }\n\n  // Collecting the topic & types can be expensive, so we only\n  // collect them if they are not already in the configuration\n  _gatherTopicsTypes(bag) {\n    const topics = this.rosConfig.topics;\n\n    for (const conn in bag.connections) {\n      const {topic, type} = bag.connections[conn];\n\n      // Filter if 'topics' are provided\n      if (!topics || topics.includes(topic)) {\n        // Validate that the message type does not change\n        if (this.topicMessageTypes[topic] && this.topicMessageTypes[topic] !== type) {\n          throw new Error(\n            `Unexpected change in topic type ${topic} has ${\n              this.topicMessageTypes[topic]\n            } with new type ${type}`\n          );\n        } else if (!this.topicMessageTypes[topic]) {\n          // track we have seen it and add to list\n          this.topicMessageTypes[topic] = type;\n        }\n      }\n    }\n  }\n\n  // Using topics and message type, ensure we create a converter\n  // for each topic.\n  _initTopics(ros2xviz) {\n    ros2xviz.initializeConverters(this.topicMessageTypes, this.bagContext);\n  }\n\n  getMetadata(metadataBuilder, ros2xviz) {\n    ros2xviz.buildMetadata(metadataBuilder, this.bagContext);\n\n    metadataBuilder.startTime(this.bagContext.start_time);\n    metadataBuilder.endTime(this.bagContext.end_time);\n  }\n\n  // Synchronize xviz messages by timestep\n  async readMessages(start, end) {\n    const bag = await this._openBag();\n    const frame = {};\n\n    const options = {\n      topics: this.rosConfig.topics\n    };\n\n    if (start) {\n      options.startTime = TimeUtil.fromDate(new Date(start * 1e3));\n    }\n\n    if (end) {\n      options.endTime = TimeUtil.fromDate(new Date(end * 1e3));\n    }\n\n    await bag.readMessages(options, async result => {\n      // rosbag.js reuses the data buffer for subsequent messages, so we need to make a copy\n      if (result.message.data) {\n        // Used for binary data in images, point clouds, etc\n        // TODO(this needs to work in the browser)\n        result.message.data = Buffer.from(result.message.data);\n      }\n\n      frame[result.topic] = frame[result.topic] || [];\n      frame[result.topic].push(result);\n    });\n\n    return frame;\n  }\n}\n"],"file":"ros-bag.js"}