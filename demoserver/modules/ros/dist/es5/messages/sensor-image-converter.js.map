{"version":3,"sources":["../../../src/messages/sensor-image-converter.js"],"names":["SensorImage","config","frame","xvizBuilder","msgs","topic","length","message","width","height","data","raw","channels","resize","toFormat","toBuffer","imgData","primitive","xvizStream","image","nodeBufferToTypedArray","dimensions","xvizMetaBuilder","xb","stream","category","type","Converter","buffer","typedArray","Uint8Array"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;AAaA;;AACA;;;;;;IAEaA,W;;;;;AACX,uBAAYC,MAAZ,EAAoB;AAAA;AAAA,6BACZA,MADY;AAEnB;;;;;6GAUoBC,K,EAAOC,W;;;;;;AACpBC,gBAAAA,I,GAAOF,KAAK,CAAC,KAAKG,KAAN,C;;oBACbD,I;;;;;;;;qBAIDA,IAAI,CAACE,M;;;;;AACAC,gBAAAA,O,GAAWH,IAAI,CAACA,IAAI,CAACE,MAAL,GAAc,CAAf,C,CAAfC,O;AACAC,gBAAAA,K,GAA6CD,O,CAA7CC,K,EAAOC,M,GAAsCF,O,CAAtCE,M,EAA8BC,I,GAAQH,O,CAARG,I;;uBAKtB,uBAAMA,IAAN,EAAY;AAChCC,kBAAAA,GAAG,EAAE;AACHH,oBAAAA,KAAK,EAALA,KADG;AAEHC,oBAAAA,MAAM,EAANA,MAFG;AAGHG,oBAAAA,QAAQ,EAAE;AAHP;AAD2B,iBAAZ,EAOnBC,MAPmB,CAOZ,GAPY,EAQnBC,QARmB,CAQV,KARU,EASnBC,QATmB,E;;;AAAhBC,gBAAAA,O;AAWNb,gBAAAA,WAAW,CACRc,SADH,CACa,KAAKC,UADlB,EAEGC,KAFH,CAESC,sBAAsB,CAACJ,OAAD,CAF/B,EAE0C,KAF1C,EAGGK,UAHH,CAGcb,KAHd,EAGqBC,MAHrB;;;;;;;;;;;;;;;;;;gCAOQa,e,EAAiB;AAC3B,UAAMC,EAAE,GAAGD,eAAX;AACAC,MAAAA,EAAE,CAACC,MAAH,CAAU,KAAKN,UAAf,EACGO,QADH,CACY,WADZ,EAEGC,IAFH,CAEQ,OAFR;AAGD;;;wBA5CiB;AAChB,aAAO,aAAP;AACD;;;wBAEwB;AACvB,aAAO,mBAAP;AACD;;;EAX8BC,qB;;;;AAoDjC,SAASP,sBAAT,CAAgCQ,MAAhC,EAAwC;AAEtC,MAAMC,UAAU,GAAG,IAAIC,UAAJ,CAAeF,MAAf,CAAnB;AACA,SAAOC,UAAP;AACD","sourcesContent":["// Copyright (c) 2019 Uber Technologies, Inc.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nimport Converter from './converter';\nimport sharp from 'sharp';\n\nexport class SensorImage extends Converter {\n  constructor(config) {\n    super(config);\n  }\n\n  static get name() {\n    return 'SensorImage';\n  }\n\n  static get messageType() {\n    return 'sensor_msgs/Image';\n  }\n\n  async convertMessage(frame, xvizBuilder) {\n    const msgs = frame[this.topic];\n    if (!msgs) {\n      return;\n    }\n\n    if (msgs.length) {\n      const {message} = msgs[msgs.length - 1];\n      const {width, height, /* encoding, step, */ data} = message;\n\n      // TODO: encoding should be handled properly instead of assuming a 3 channel image.\n      // http://docs.ros.org/jade/api/sensor_msgs/html/image__encodings_8h_source.html\n\n      const imgData = await sharp(data, {\n        raw: {\n          width,\n          height,\n          channels: 3\n        }\n      })\n        .resize(400)\n        .toFormat('png')\n        .toBuffer();\n\n      xvizBuilder\n        .primitive(this.xvizStream)\n        .image(nodeBufferToTypedArray(imgData), 'png')\n        .dimensions(width, height);\n    }\n  }\n\n  getMetadata(xvizMetaBuilder) {\n    const xb = xvizMetaBuilder;\n    xb.stream(this.xvizStream)\n      .category('primitive')\n      .type('image');\n  }\n}\n\nfunction nodeBufferToTypedArray(buffer) {\n  // TODO - per docs we should just be able to call buffer.buffer, but there are issues\n  const typedArray = new Uint8Array(buffer);\n  return typedArray;\n}\n"],"file":"sensor-image-converter.js"}