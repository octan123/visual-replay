{"version":3,"sources":["../../../src/messages/sensor-pointcloud2-converter.js"],"names":["SensorPointCloud2","config","previousData","frame","xvizBuilder","_buildPoints","topic","color","data","message","pointsSize","length","height","width","positions","primitive","xvizStream","points","style","fill_color","xvizMetaBuilder","context","frameIdToPoseMap","streamMetadata","stream","category","type","streamStyle","radiusPixels","frameId","pose","_","pick","coordinate","Converter"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;AAcA;;AACA;;AACA;;;;;;;;;;;;IAEaA,iB;;;;;AACX,6BAAYC,MAAZ,EAAoB;AAAA;;AAAA;AAClB,8BAAMA,MAAN;AACA,UAAKC,YAAL,GAAoB,EAApB;AAFkB;AAGnB;;;;;6GAUoBC,K,EAAOC,W;;;;;AAC1B,qBAAKC,YAAL,CAAkBF,KAAlB,EAAyBC,WAAzB,EAAsC;AACpCE,kBAAAA,KAAK,EAAE,KAAKA,KADwB;AAEpCC,kBAAAA,KAAK,EAAE;AAF6B,iBAAtC;;;;;;;;;;;;;;;;;;iCAMWJ,K,EAAOC,W,QAA6B;AAAA,UAAfG,KAAe,QAAfA,KAAe;AAAA,UAARD,KAAQ,QAARA,KAAQ;AAC/C,UAAIE,IAAI,GAAGL,KAAK,CAACG,KAAD,CAAhB;;AACA,UAAI,CAACE,IAAL,EAAW;AACTA,QAAAA,IAAI,GAAG,KAAKN,YAAL,CAAkBI,KAAlB,CAAP;;AACA,YAAI,CAACE,IAAL,EAAW;AACT;AACD;AACF;;AACD,WAAKN,YAAL,CAAkBI,KAAlB,IAA2BE,IAA3B;;AAR+C,iDAUvBA,IAVuB;AAAA;;AAAA;AAU/C,4DAA8B;AAAA,cAAlBC,OAAkB,eAAlBA,OAAkB;AAC5B,cAAMC,UAAU,GAAGD,OAAO,CAACD,IAAR,CAAaG,MAAb,IAAuBF,OAAO,CAACG,MAAR,GAAiBH,OAAO,CAACI,KAAhD,CAAnB;;AAD4B,sCAER,8CAAuBJ,OAAO,CAACD,IAA/B,EAAqCE,UAArC,CAFQ;AAAA,cAErBI,SAFqB,yBAErBA,SAFqB;;AAI5BV,UAAAA,WAAW,CACRW,SADH,CACa,KAAKC,UADlB,EAEGC,MAFH,CAEUH,SAFV,EAGGI,KAHH,CAGS;AAACC,YAAAA,UAAU,EAAEZ;AAAb,WAHT;AAID;AAlB8C;AAAA;AAAA;AAAA;AAAA;AAmBhD;;;gCAEWa,e,EAAiBC,O,EAAS;AAAA,UAC7BC,gBAD6B,GACTD,OADS,CAC7BC,gBAD6B;AAGpC,UAAMC,cAAc,GAAGH,eAAe,CACnCI,MADoB,CACb,KAAKR,UADQ,EAEpBS,QAFoB,CAEX,WAFW,EAGpBC,IAHoB,CAGf,OAHe,EAIpBC,WAJoB,CAIR;AACXR,QAAAA,UAAU,EAAE,MADD;AAEXS,QAAAA,YAAY,EAAE;AAFH,OAJQ,CAAvB;AAUA,UAAMC,OAAO,GAAG,KAAK5B,MAAL,CAAY4B,OAAZ,IAAuB,UAAvC;AACA,UAAMC,IAAI,GAAG,CAACR,gBAAgB,IAAI,EAArB,EAAyBO,OAAzB,CAAb;;AAEA,UAAIC,IAAJ,EAAU;AACRP,QAAAA,cAAc,CACXO,IADH,CACQC,mBAAEC,IAAF,CAAOF,IAAP,EAAa,CAAC,GAAD,EAAM,GAAN,EAAW,GAAX,CAAb,CADR,EACuCC,mBAAEC,IAAF,CAAOF,IAAP,EAAa,CAAC,OAAD,EAAU,MAAV,EAAkB,KAAlB,CAAb,CADvC,EAEGG,UAFH,CAEc,kBAFd;AAGD;AACF;;;wBAzDiB;AAChB,aAAO,mBAAP;AACD;;;wBAEwB;AACvB,aAAO,yBAAP;AACD;;;EAZoCC,qB","sourcesContent":["// Copyright (c) 2019 Uber Technologies, Inc.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n/* eslint-disable camelcase */\nimport Converter from './converter';\nimport _ from 'lodash';\nimport {loadProcessedLidarData} from './lib/parse-lidar-points';\n\nexport class SensorPointCloud2 extends Converter {\n  constructor(config) {\n    super(config);\n    this.previousData = {};\n  }\n\n  static get name() {\n    return 'SensorPointCloud2';\n  }\n\n  static get messageType() {\n    return 'sensor_msgs/PointCloud2';\n  }\n\n  async convertMessage(frame, xvizBuilder) {\n    this._buildPoints(frame, xvizBuilder, {\n      topic: this.topic,\n      color: '#00ff00aa'\n    });\n  }\n\n  _buildPoints(frame, xvizBuilder, {color, topic}) {\n    let data = frame[topic];\n    if (!data) {\n      data = this.previousData[topic];\n      if (!data) {\n        return;\n      }\n    }\n    this.previousData[topic] = data;\n\n    for (const {message} of data) {\n      const pointsSize = message.data.length / (message.height * message.width);\n      const {positions} = loadProcessedLidarData(message.data, pointsSize);\n\n      xvizBuilder\n        .primitive(this.xvizStream)\n        .points(positions)\n        .style({fill_color: color});\n    }\n  }\n\n  getMetadata(xvizMetaBuilder, context) {\n    const {frameIdToPoseMap} = context;\n\n    const streamMetadata = xvizMetaBuilder\n      .stream(this.xvizStream)\n      .category('primitive')\n      .type('point')\n      .streamStyle({\n        fill_color: '#00a',\n        radiusPixels: 3\n      });\n\n    // By convention velodyne is common, but it others may be used.\n    const frameId = this.config.frameId || 'velodyne';\n    const pose = (frameIdToPoseMap || {})[frameId];\n\n    if (pose) {\n      streamMetadata\n        .pose(_.pick(pose, ['x', 'y', 'z']), _.pick(pose, ['pitch', 'roll', 'yaw']))\n        .coordinate('VEHICLE_RELATIVE');\n    }\n  }\n}\n"],"file":"sensor-pointcloud2-converter.js"}