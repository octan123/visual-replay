{"version":3,"sources":["../../../src/messages/sensor-navsatfix-converter.js"],"names":["Converter","quaternionToEuler","TimeUtil","SensorNavSatFix","constructor","config","name","messageType","_getOrientationFromIMU","frame","xvizBuilder","imuTopic","msg","message","length","rotation","orientation","convertMessage","topic","timestamp","state","ts","toDate","getTime","poseBuilder","pose","xvizStream","mapOrigin","longitude","latitude","altitude","position","roll","pitch","yaw","getMetadata","xvizMetaBuilder","context","stream","category"],"mappings":"AAaA,OAAOA,SAAP,MAAsB,aAAtB;AACA,SAAQC,iBAAR,QAAgC,sBAAhC;AACA,SAAQC,QAAR,QAAuB,QAAvB;AAEA,OAAO,MAAMC,eAAN,SAA8BH,SAA9B,CAAwC;AAC7CI,EAAAA,WAAW,CAACC,MAAD,EAAS;AAClB,UAAMA,MAAN;AACD;;AAED,aAAWC,IAAX,GAAkB;AAChB,WAAO,iBAAP;AACD;;AAED,aAAWC,WAAX,GAAyB;AACvB,WAAO,uBAAP;AACD;;AAEDC,EAAAA,sBAAsB,CAACC,KAAD,EAAQC,WAAR,EAAqB;AACzC,QAAI,CAAC,KAAKL,MAAL,CAAYM,QAAjB,EAA2B;AACzB,aAAO,IAAP;AACD;;AAED,UAAMC,GAAG,GAAGH,KAAK,CAAC,KAAKJ,MAAL,CAAYM,QAAb,CAAjB;;AACA,QAAI,CAACC,GAAL,EAAU;AACR,aAAO,IAAP;AACD;;AAED,UAAM;AAACC,MAAAA;AAAD,QAAYD,GAAG,CAACA,GAAG,CAACE,MAAJ,GAAa,CAAd,CAArB;AACA,UAAMC,QAAQ,GAAGd,iBAAiB,CAACY,OAAO,CAACG,WAAT,CAAlC;AACA,WAAO;AAACD,MAAAA;AAAD,KAAP;AACD;;AAED,QAAME,cAAN,CAAqBR,KAArB,EAA4BC,WAA5B,EAAyC;AACvC,UAAME,GAAG,GAAGH,KAAK,CAAC,KAAKS,KAAN,CAAjB;;AACA,QAAI,CAACN,GAAL,EAAU;AACR;AACD;;AAED,UAAM;AAACO,MAAAA,SAAD;AAAYN,MAAAA;AAAZ,QAAuBD,GAAG,CAACA,GAAG,CAACE,MAAJ,GAAa,CAAd,CAAhC;;AAEA,UAAMM,KAAK,GAAG,KAAKZ,sBAAL,CAA4BC,KAA5B,EAAmCC,WAAnC,CAAd;;AAKA,UAAMW,EAAE,GAAGnB,QAAQ,CAACoB,MAAT,CAAgBH,SAAhB,EAA2BI,OAA3B,KAAuC,GAAlD;AACA,UAAMC,WAAW,GAAGd,WAAW,CAC5Be,IADiB,CACZ,KAAKC,UADO,EAEjBC,SAFiB,CAEPd,OAAO,CAACe,SAFD,EAEYf,OAAO,CAACgB,QAFpB,EAE8BhB,OAAO,CAACiB,QAFtC,EAGjBX,SAHiB,CAGPE,EAHO,EAIjBU,QAJiB,CAIR,CAJQ,EAIL,CAJK,EAIF,CAJE,CAApB;;AAOA,QAAIX,KAAK,IAAIA,KAAK,CAACL,QAAnB,EAA6B;AAC3B,YAAM;AAACA,QAAAA;AAAD,UAAaK,KAAnB;AACAI,MAAAA,WAAW,CAACR,WAAZ,CAAwBD,QAAQ,CAACiB,IAAjC,EAAuCjB,QAAQ,CAACkB,KAAhD,EAAuDlB,QAAQ,CAACmB,GAAhE;AACD;AACF;;AAEDC,EAAAA,WAAW,CAACC,eAAD,EAAkBC,OAAlB,EAA2B;AACpCD,IAAAA,eAAe,CAACE,MAAhB,CAAuB,KAAKZ,UAA5B,EAAwCa,QAAxC,CAAiD,MAAjD;AACD;;AAzD4C","sourcesContent":["// Copyright (c) 2019 Uber Technologies, Inc.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nimport Converter from './converter';\nimport {quaternionToEuler} from '../common/quaternion';\nimport {TimeUtil} from 'rosbag';\n\nexport class SensorNavSatFix extends Converter {\n  constructor(config) {\n    super(config);\n  }\n\n  static get name() {\n    return 'SensorNavSatFix';\n  }\n\n  static get messageType() {\n    return 'sensor_msgs/NavSatFix';\n  }\n\n  _getOrientationFromIMU(frame, xvizBuilder) {\n    if (!this.config.imuTopic) {\n      return null;\n    }\n\n    const msg = frame[this.config.imuTopic];\n    if (!msg) {\n      return null;\n    }\n\n    const {message} = msg[msg.length - 1];\n    const rotation = quaternionToEuler(message.orientation);\n    return {rotation};\n  }\n\n  async convertMessage(frame, xvizBuilder) {\n    const msg = frame[this.topic];\n    if (!msg) {\n      return;\n    }\n\n    const {timestamp, message} = msg[msg.length - 1];\n\n    const state = this._getOrientationFromIMU(frame, xvizBuilder);\n\n    // Every frame *MUST* have a pose. The pose can be considered\n    // the core reference point for other data and usually drives the timing\n    // of the system.\n    const ts = TimeUtil.toDate(timestamp).getTime() / 1e3;\n    const poseBuilder = xvizBuilder\n      .pose(this.xvizStream)\n      .mapOrigin(message.longitude, message.latitude, message.altitude)\n      .timestamp(ts)\n      .position(0, 0, 0);\n\n    // Add rotation to the pose\n    if (state && state.rotation) {\n      const {rotation} = state;\n      poseBuilder.orientation(rotation.roll, rotation.pitch, rotation.yaw);\n    }\n  }\n\n  getMetadata(xvizMetaBuilder, context) {\n    xvizMetaBuilder.stream(this.xvizStream).category('pose');\n  }\n}\n"],"file":"sensor-navsatfix-converter.js"}