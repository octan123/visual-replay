{"version":3,"sources":["../../../src/messages/sensor-image-converter.js"],"names":["Converter","sharp","SensorImage","constructor","config","name","messageType","convertMessage","frame","xvizBuilder","msgs","topic","length","message","width","height","data","imgData","raw","channels","resize","toFormat","toBuffer","primitive","xvizStream","image","nodeBufferToTypedArray","dimensions","getMetadata","xvizMetaBuilder","xb","stream","category","type","buffer","typedArray","Uint8Array"],"mappings":"AAaA,OAAOA,SAAP,MAAsB,aAAtB;AACA,OAAOC,KAAP,MAAkB,OAAlB;AAEA,OAAO,MAAMC,WAAN,SAA0BF,SAA1B,CAAoC;AACzCG,EAAAA,WAAW,CAACC,MAAD,EAAS;AAClB,UAAMA,MAAN;AACD;;AAED,aAAWC,IAAX,GAAkB;AAChB,WAAO,aAAP;AACD;;AAED,aAAWC,WAAX,GAAyB;AACvB,WAAO,mBAAP;AACD;;AAED,QAAMC,cAAN,CAAqBC,KAArB,EAA4BC,WAA5B,EAAyC;AACvC,UAAMC,IAAI,GAAGF,KAAK,CAAC,KAAKG,KAAN,CAAlB;;AACA,QAAI,CAACD,IAAL,EAAW;AACT;AACD;;AAED,QAAIA,IAAI,CAACE,MAAT,EAAiB;AACf,YAAM;AAACC,QAAAA;AAAD,UAAYH,IAAI,CAACA,IAAI,CAACE,MAAL,GAAc,CAAf,CAAtB;AACA,YAAM;AAACE,QAAAA,KAAD;AAAQC,QAAAA,MAAR;AAAsCC,QAAAA;AAAtC,UAA8CH,OAApD;AAKA,YAAMI,OAAO,GAAG,MAAMhB,KAAK,CAACe,IAAD,EAAO;AAChCE,QAAAA,GAAG,EAAE;AACHJ,UAAAA,KADG;AAEHC,UAAAA,MAFG;AAGHI,UAAAA,QAAQ,EAAE;AAHP;AAD2B,OAAP,CAAL,CAOnBC,MAPmB,CAOZ,GAPY,EAQnBC,QARmB,CAQV,KARU,EASnBC,QATmB,EAAtB;AAWAb,MAAAA,WAAW,CACRc,SADH,CACa,KAAKC,UADlB,EAEGC,KAFH,CAESC,sBAAsB,CAACT,OAAD,CAF/B,EAE0C,KAF1C,EAGGU,UAHH,CAGcb,KAHd,EAGqBC,MAHrB;AAID;AACF;;AAEDa,EAAAA,WAAW,CAACC,eAAD,EAAkB;AAC3B,UAAMC,EAAE,GAAGD,eAAX;AACAC,IAAAA,EAAE,CAACC,MAAH,CAAU,KAAKP,UAAf,EACGQ,QADH,CACY,WADZ,EAEGC,IAFH,CAEQ,OAFR;AAGD;;AAjDwC;;AAoD3C,SAASP,sBAAT,CAAgCQ,MAAhC,EAAwC;AAEtC,QAAMC,UAAU,GAAG,IAAIC,UAAJ,CAAeF,MAAf,CAAnB;AACA,SAAOC,UAAP;AACD","sourcesContent":["// Copyright (c) 2019 Uber Technologies, Inc.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nimport Converter from './converter';\nimport sharp from 'sharp';\n\nexport class SensorImage extends Converter {\n  constructor(config) {\n    super(config);\n  }\n\n  static get name() {\n    return 'SensorImage';\n  }\n\n  static get messageType() {\n    return 'sensor_msgs/Image';\n  }\n\n  async convertMessage(frame, xvizBuilder) {\n    const msgs = frame[this.topic];\n    if (!msgs) {\n      return;\n    }\n\n    if (msgs.length) {\n      const {message} = msgs[msgs.length - 1];\n      const {width, height, /* encoding, step, */ data} = message;\n\n      // TODO: encoding should be handled properly instead of assuming a 3 channel image.\n      // http://docs.ros.org/jade/api/sensor_msgs/html/image__encodings_8h_source.html\n\n      const imgData = await sharp(data, {\n        raw: {\n          width,\n          height,\n          channels: 3\n        }\n      })\n        .resize(400)\n        .toFormat('png')\n        .toBuffer();\n\n      xvizBuilder\n        .primitive(this.xvizStream)\n        .image(nodeBufferToTypedArray(imgData), 'png')\n        .dimensions(width, height);\n    }\n  }\n\n  getMetadata(xvizMetaBuilder) {\n    const xb = xvizMetaBuilder;\n    xb.stream(this.xvizStream)\n      .category('primitive')\n      .type('image');\n  }\n}\n\nfunction nodeBufferToTypedArray(buffer) {\n  // TODO - per docs we should just be able to call buffer.buffer, but there are issues\n  const typedArray = new Uint8Array(buffer);\n  return typedArray;\n}\n"],"file":"sensor-image-converter.js"}