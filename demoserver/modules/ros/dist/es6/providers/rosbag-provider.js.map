{"version":3,"sources":["../../../src/providers/rosbag-provider.js"],"names":["XVIZData","XVIZEnvelope","XVIZMetadataBuilder","ROSBag","ROSConfig","MessageIterator","constructor","start","end","increment","current","valid","value","next","val","data","ROSBagProvider","root","options","bagPath","endsWith","BagClass","ros2xvizFactory","rosConfig","metadata","ros2xviz","isValid","Error","log","msg","logger","info","init","create","bag","_getMetadata","err","console","xvizMetadataBuilder","getMetadata","rawMetadata","Metadata","xvizMetadata","getMessageIterator","startTime","endTime","start_time","end_time","log_info","xvizMessage","iterator","dataset","readMessages","buildMessage","StateUpdate"],"mappings":"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","sourcesContent":["// Copyright (c) 2019 Uber Technologies, Inc.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n/* global console */\n/* eslint-disable no-console */\nimport {XVIZData, XVIZEnvelope} from '@xviz/io';\nimport {XVIZMetadataBuilder} from '@xviz/builder';\nimport {ROSBag} from '../core/ros-bag';\nimport {ROSConfig} from '../core/ros-config';\n\n// Generic iterator that stores context for an iterator\nclass MessageIterator {\n  constructor(start, end, increment = 1) {\n    this.start = start;\n    this.end = end;\n    this.increment = increment;\n    this.current = start;\n  }\n\n  valid() {\n    return this.current <= this.end;\n  }\n\n  value() {\n    return this.current;\n  }\n\n  next() {\n    const valid = this.valid();\n    if (!valid) {\n      return {valid};\n    }\n\n    const val = this.current;\n    this.current += this.increment;\n\n    return {\n      valid,\n      data: {\n        start: val,\n        end: this.current\n      }\n    };\n  }\n}\n\nexport class ROSBagProvider {\n  constructor({root, options}) {\n    this.bagPath = root.endsWith('.bag') ? root : `${root}.bag`;\n    this.BagClass = (options && options.BagClass) || ROSBag;\n\n    // These likely come from ROSBagProvider arguments passed\n    // when added to the XVIZProviderFactory\n    this.ros2xvizFactory = options && options.ros2xvizFactory;\n    this.rosConfig = options && options.rosConfig && new ROSConfig(options.rosConfig);\n\n    this.options = options || {};\n    this.metadata = null;\n    this.ros2xviz = null;\n    this.isValid = false;\n\n    if (!this.ros2xvizFactory) {\n      throw new Error('The ROSBagProvider requires a ROS2XVIZFactory instance');\n    }\n  }\n\n  log(msg) {\n    const {logger} = this.options;\n    if (logger && logger.info) {\n      logger.info(msg);\n    }\n  }\n\n  async init() {\n    try {\n      // options: {logger}\n      this.ros2xviz = this.ros2xvizFactory.create(this.rosConfig, this.options);\n      this.bag = new this.BagClass(this.bagPath, this.rosConfig, this.options);\n\n      if (this.bag) {\n        this.isValid = await this.bag.init(this.ros2xviz);\n        if (this.isValid) {\n          this._getMetadata();\n        }\n      }\n    } catch (err) {\n      console.log(err);\n    }\n  }\n\n  valid() {\n    return this.isValid;\n  }\n\n  _getMetadata() {\n    if (this.valid) {\n      const xvizMetadataBuilder = new XVIZMetadataBuilder();\n      this.bag.getMetadata(xvizMetadataBuilder, this.ros2xviz);\n\n      const rawMetadata = xvizMetadataBuilder.getMetadata();\n      this.metadata = XVIZEnvelope.Metadata(rawMetadata);\n    }\n  }\n\n  xvizMetadata() {\n    if (!this.metadata) {\n      this._getMetadata();\n    }\n\n    if (this.metadata) {\n      return new XVIZData(this.metadata);\n    }\n\n    return null;\n  }\n\n  getMessageIterator({startTime, endTime} = {}) {\n    // metadata\n    let {start_time: start, end_time: end} = this.metadata.data.log_info;\n\n    // bounds check params\n    if (startTime) {\n      if (startTime >= start && startTime <= end) {\n        start = startTime;\n      }\n    }\n\n    if (endTime) {\n      if (endTime >= start && endTime <= end) {\n        end = endTime;\n      } else {\n        // TODO: allow default duration to be an option\n        end = start + 30;\n      }\n    }\n\n    return new MessageIterator(start, end, 0.1);\n  }\n\n  async xvizMessage(iterator) {\n    const {\n      valid,\n      data: {start, end}\n    } = iterator.next();\n\n    if (!valid) {\n      return null;\n    }\n\n    const dataset = await this.bag.readMessages(start, end);\n    const msg = await this.ros2xviz.buildMessage(dataset);\n\n    if (msg) {\n      return new XVIZData(XVIZEnvelope.StateUpdate(msg));\n    }\n\n    return null;\n  }\n}\n"],"file":"rosbag-provider.js"}