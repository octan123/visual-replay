{"version":3,"sources":["../../../src/builders/xviz-ui-primitive-builder.js"],"names":["XVIZTreeTableRowBuilder","id","values","parent","_parent","_id","_values","_children","row","push","obj","column_values","concat","apply","map","getData","XVIZUIPrimitiveBuilder","props","category","CATEGORY","UI_PRIMITIVE","reset","_primitives","columns","_type","_flush","validatePropSetOnce","_columns","PRIMITIVE_TYPES","treetable","_rows","_validate","_flushPrimitives","Object","keys","length","stream","_streamId","fieldName","primitiveArray","_validator","hasProp","nodes","primitives","_formatPrimitives","primitive","XVIZBaseBuilder"],"mappings":"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","sourcesContent":["// Copyright (c) 2019 Uber Technologies, Inc.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n/* eslint-disable camelcase */\nimport XVIZBaseBuilder from './xviz-base-builder';\nimport {CATEGORY, PRIMITIVE_TYPES} from './constant';\n\nclass XVIZTreeTableRowBuilder {\n  constructor(id, values, parent = null) {\n    this._parent = parent;\n    this._id = id;\n    this._values = values;\n    this._children = [];\n  }\n\n  child(id, values) {\n    const row = new XVIZTreeTableRowBuilder(id, values, this._id);\n    this._children.push(row);\n    return row;\n  }\n\n  getData() {\n    const obj = {id: this._id};\n    if (this._values) {\n      obj.column_values = this._values;\n    }\n    if (this._parent !== null) {\n      obj.parent = this._parent;\n    }\n\n    return [].concat.apply([obj], this._children.map(row => row.getData()));\n  }\n}\n\nexport default class XVIZUIPrimitiveBuilder extends XVIZBaseBuilder {\n  constructor(props) {\n    super({\n      ...props,\n      category: CATEGORY.UI_PRIMITIVE\n    });\n\n    this.reset();\n    // primitives: {[streamId]: []}\n    this._primitives = {};\n  }\n\n  treetable(columns) {\n    if (this._type) {\n      this._flush();\n    }\n\n    this.validatePropSetOnce('_columns');\n\n    this._columns = columns;\n    this._type = PRIMITIVE_TYPES.treetable;\n\n    return this;\n  }\n\n  row(id, values) {\n    this.validatePropSetOnce('_id');\n\n    const row = new XVIZTreeTableRowBuilder(id, values);\n    this._rows.push(row);\n    this._type = PRIMITIVE_TYPES.treetable;\n\n    return row;\n  }\n\n  _validate() {\n    super._validate();\n  }\n\n  _flush() {\n    this._validate();\n\n    this._flushPrimitives();\n  }\n\n  getData() {\n    if (this._type) {\n      this._flush();\n    }\n\n    if (Object.keys(this._primitives).length) {\n      return this._primitives;\n    }\n\n    return null;\n  }\n\n  _flushPrimitives() {\n    let stream = this._primitives[this._streamId];\n    if (!stream) {\n      stream = {};\n      this._primitives[this._streamId] = stream;\n    }\n\n    let fieldName;\n    let primitiveArray;\n\n    switch (this._type) {\n      case PRIMITIVE_TYPES.treetable:\n        fieldName = this._type;\n        if (!stream[fieldName]) {\n          // column must be set before adding rows\n          this._validator.hasProp(this, '_columns');\n\n          stream[fieldName] = {\n            columns: this._columns,\n            nodes: []\n          };\n        }\n        primitiveArray = stream[fieldName].nodes;\n        break;\n\n      default:\n    }\n\n    const primitives = this._formatPrimitives();\n    if (primitives) {\n      for (const primitive of primitives) {\n        primitiveArray.push(primitive);\n      }\n    }\n\n    this.reset();\n  }\n\n  _formatPrimitives() {\n    switch (this._type) {\n      case PRIMITIVE_TYPES.treetable:\n        if (this._rows.length > 0) {\n          return [].concat(...this._rows.map(row => row.getData()));\n        }\n        break;\n\n      default:\n    }\n\n    return null;\n  }\n\n  reset() {\n    this._type = null;\n\n    this._columns = null;\n    this._rows = [];\n  }\n}\n"],"file":"xviz-ui-primitive-builder.js"}