{"version":3,"sources":["../../../src/builders/xviz-time-series-builder.js"],"names":["XVIZTimeSeriesBuilder","props","category","CATEGORY","TIME_SERIES","_data","Map","_id","_value","_timestamp","identifier","validatePropSetOnce","value","Array","validateError","timestamp","_flush","size","timeSeriesData","ids","id","fields","values","tsdata","entry","streams","object_id","push","_dataPending","fieldName","String","tsEntry","get","idEntry","fieldEntry","_streamId","set","_getFieldEntry","_getIdEntry","validateWarn","_validate","_addTimestampEntry","_reset","XVIZBaseBuilder"],"mappings":"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","sourcesContent":["// Copyright (c) 2019 Uber Technologies, Inc.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport {CATEGORY} from './constant';\nimport XVIZBaseBuilder from './xviz-base-builder';\n\n/**\n * XVIZTimeSeriesBuilder manages time_series data by `time` and `id` and stores\n * the the array of single stream value entries.\n *\n * This is the shape returned from getData()\n *\n * [\n *   {\n *     timestamp: x,\n *     streams: ['a', 'b'],\n *     values: {doubles: [1, 2]},\n *     object_id: '123'\n *   },\n *   {\n *     timestamp: y,\n *     streams: ['a', 'b'],\n *     values: {doubles: [1, 2]},\n *   }\n * ]\n */\nexport default class XVIZTimeSeriesBuilder extends XVIZBaseBuilder {\n  constructor(props) {\n    super({\n      ...props,\n      category: CATEGORY.TIME_SERIES\n    });\n\n    // Stores time_series data by timestamp then id\n    // They will then be group when constructing final object\n    this._data = new Map();\n\n    // inflight builder data\n    this._id = null;\n    this._value = null;\n    this._timestamp = null;\n  }\n\n  id(identifier) {\n    this.validatePropSetOnce('_id');\n    this._id = identifier;\n    return this;\n  }\n\n  value(value) {\n    this.validatePropSetOnce('_value');\n\n    if (value instanceof Array) {\n      this.validateError('Input `value` must be single value');\n    }\n\n    this._value = value;\n    return this;\n  }\n\n  timestamp(timestamp) {\n    this.validatePropSetOnce('_timestamp');\n\n    if (timestamp instanceof Array) {\n      this.validateError('Input `timestamp` must be a single value');\n    }\n\n    this._timestamp = timestamp;\n    return this;\n  }\n\n  getData() {\n    this._flush();\n    if (this._data.size === 0) {\n      return null;\n    }\n\n    const timeSeriesData = [];\n    for (const [timestamp, ids] of this._data) {\n      for (const [id, fields] of ids) {\n        for (const tsdata of fields.values()) {\n          const entry = {\n            timestamp,\n            streams: tsdata.streams,\n            values: tsdata.values\n          };\n\n          /* eslint-disable camelcase, max-depth */\n          if (id !== null) {\n            entry.object_id = id;\n          }\n          /* eslint-enable camelcase, max-depth */\n\n          timeSeriesData.push(entry);\n        }\n      }\n    }\n\n    return timeSeriesData;\n  }\n\n  // Lookup by timestamp, then id to store [streamId, value]\n  _addTimestampEntry() {\n    // this._data structure\n    // timestamp: {\n    //   id: {\n    //     fieldName: {\n    //       streams: []\n    //       values: []\n    //     }\n    //   }\n    // }\n    if (!this._dataPending()) {\n      return;\n    }\n\n    // Lookup where to put the value\n    let fieldName = 'doubles';\n    if (typeof this._value === 'string' || this._value instanceof String) {\n      fieldName = 'strings';\n    } else if (typeof this._value === 'boolean') {\n      fieldName = 'bools';\n    }\n\n    // Building up the [(stream, value)] list\n    let tsEntry = this._data.get(this._timestamp);\n    if (tsEntry) {\n      // We have timestamp, now get id\n      const idEntry = tsEntry.get(this._id);\n      if (idEntry) {\n        const fieldEntry = idEntry.get(fieldName);\n        if (fieldEntry) {\n          // append entry to existing array\n          fieldEntry.streams.push(this._streamId);\n          fieldEntry.values[fieldName].push(this._value);\n        } else {\n          idEntry.set(fieldName, this._getFieldEntry(fieldName));\n        }\n      } else {\n        // create new mapping of id -> array of entries\n        tsEntry.set(this._id, this._getIdEntry(fieldName));\n      }\n    } else {\n      // No timestamp entry\n      // create new id -> array of entries\n      // for same id different with fieldNames, we store as different ts entries\n      tsEntry = new Map();\n      tsEntry.set(this._id, this._getIdEntry(fieldName));\n      this._data.set(this._timestamp, tsEntry);\n    }\n  }\n\n  _getIdEntry(fieldName) {\n    const idEntry = new Map();\n    idEntry.set(fieldName, this._getFieldEntry(fieldName));\n    return idEntry;\n  }\n\n  _getFieldEntry(fieldName) {\n    return {\n      streams: [this._streamId],\n      values: {[fieldName]: [this._value]}\n    };\n  }\n\n  _dataPending() {\n    return this._value !== null || this._timestamp !== null || this._id !== null;\n  }\n\n  _validate() {\n    if (this._dataPending()) {\n      super._validate();\n\n      if (this._value === null) {\n        this.validateWarn(`Stream ${this._streamId} value is not provided.`);\n      }\n      if (this._timestamp === null) {\n        this.validateWarn(`Stream ${this._streamId} timestamp is not provided.`);\n      }\n    }\n  }\n\n  _flush() {\n    this._validate();\n\n    this._addTimestampEntry();\n    this._reset();\n  }\n\n  // reset the inflight values\n  _reset() {\n    this._id = null;\n    this._value = null;\n    this._timestamp = null;\n  }\n}\n"],"file":"xviz-time-series-builder.js"}