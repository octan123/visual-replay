{"version":3,"sources":["../../../src/utils/array-utils.js"],"names":["padTo4Bytes","byteLength","copyArrayBuffer","targetBuffer","sourceBuffer","byteOffset","targetArray","Uint8Array","sourceArray","set","toBuffer","arrayBuffer","buffer","Buffer","view","i","length"],"mappings":"AAcA,OAAO,SAASA,WAAT,CAAqBC,UAArB,EAAiC;AACtC,SAAQA,UAAU,GAAG,CAAd,GAAmB,CAAC,CAA3B;AACD;AAQD,OAAO,SAASC,eAAT,CACLC,YADK,EAELC,YAFK,EAGLC,UAHK,EAKL;AAAA,MADAJ,UACA,uEADaG,YAAY,CAACH,UAC1B;AACA,MAAMK,WAAW,GAAG,IAAIC,UAAJ,CAAeJ,YAAf,EAA6BE,UAA7B,EAAyCJ,UAAzC,CAApB;AACA,MAAMO,WAAW,GAAG,IAAID,UAAJ,CAAeH,YAAf,CAApB;AACAE,EAAAA,WAAW,CAACG,GAAZ,CAAgBD,WAAhB;AACA,SAAOL,YAAP;AACD;AAKD,OAAO,SAASO,QAAT,CAAkBC,WAAlB,EAA+B;AAEpC,MAAMC,MAAM,GAAG,IAAIC,MAAJ,CAAWF,WAAW,CAACV,UAAvB,CAAf;AACA,MAAMa,IAAI,GAAG,IAAIP,UAAJ,CAAeI,WAAf,CAAb;;AACA,OAAK,IAAII,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGH,MAAM,CAACI,MAA3B,EAAmC,EAAED,CAArC,EAAwC;AACtCH,IAAAA,MAAM,CAACG,CAAD,CAAN,GAAYD,IAAI,CAACC,CAAD,CAAhB;AACD;;AACD,SAAOH,MAAP;AACD","sourcesContent":["// Copyright (c) 2019 Uber Technologies, Inc.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nexport function padTo4Bytes(byteLength) {\n  return (byteLength + 3) & ~3;\n}\n\n/* Creates a new Uint8Array based on two different ArrayBuffers\n * @private\n * @param {ArrayBuffers} buffer1 The first buffer.\n * @param {ArrayBuffers} buffer2 The second buffer.\n * @return {ArrayBuffers} The new ArrayBuffer created out of the two.\n */\nexport function copyArrayBuffer(\n  targetBuffer,\n  sourceBuffer,\n  byteOffset,\n  byteLength = sourceBuffer.byteLength\n) {\n  const targetArray = new Uint8Array(targetBuffer, byteOffset, byteLength);\n  const sourceArray = new Uint8Array(sourceBuffer);\n  targetArray.set(sourceArray);\n  return targetBuffer;\n}\n\n// Helper methods\n\n// Convert (copy) ArrayBuffer to Buffer\nexport function toBuffer(arrayBuffer) {\n  /* global Buffer */\n  const buffer = new Buffer(arrayBuffer.byteLength);\n  const view = new Uint8Array(arrayBuffer);\n  for (let i = 0; i < buffer.length; ++i) {\n    buffer[i] = view[i];\n  }\n  return buffer;\n}\n"],"file":"array-utils.js"}