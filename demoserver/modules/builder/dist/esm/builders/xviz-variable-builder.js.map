{"version":3,"sources":["../../../src/builders/xviz-variable-builder.js"],"names":["CATEGORY","XVIZBaseBuilder","XVIZVariableBuilder","props","category","VARIABLE","_data","Map","_id","_values","identifier","validatePropSetOnce","values","Array","validateError","_flush","size","variablesData","streamId","ids","variables","forEach","entry","push","_dataPending","fieldName","value","String","base","object_id","streamEntry","get","_streamId","idEntry","set","validateWarn","_validate","_addVariableEntry","_reset"],"mappings":"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","sourcesContent":["// Copyright (c) 2019 Uber Technologies, Inc.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport {CATEGORY} from './constant';\nimport XVIZBaseBuilder from './xviz-base-builder';\n\n/**\n * XVIZVariableBuilder manages a dictionary of streams -> variables, where\n * variables is an array of objects with values & id.\n *\n * This is the shape returned from getData()\n *\n * {\n *   /plan/time: {\n *     variables: [\n *       {\n *         base: {\n *           object_id: '123'\n *         },\n *         values: [1, 2, 3, 4],\n *       }\n *     ]\n *   }\n * }\n */\nexport default class XVIZVariableBuilder extends XVIZBaseBuilder {\n  constructor(props) {\n    super({\n      ...props,\n      category: CATEGORY.VARIABLE\n    });\n\n    // Stores variable data by stream then id\n    // They will then be group when constructing final object\n    this._data = new Map();\n\n    // inflight builder data\n    this._id = null;\n    this._values = null;\n  }\n\n  id(identifier) {\n    this.validatePropSetOnce('_id');\n    this._id = identifier;\n    return this;\n  }\n\n  values(values) {\n    this.validatePropSetOnce('_values');\n\n    if (!(values instanceof Array)) {\n      this.validateError('Input `values` must be array');\n    }\n\n    this._values = values;\n    return this;\n  }\n\n  getData() {\n    this._flush();\n    if (this._data.size === 0) {\n      return null;\n    }\n\n    const variablesData = {};\n    for (const [streamId, ids] of this._data) {\n      const variables = [];\n      ids.forEach(entry => variables.push(entry));\n      variablesData[streamId] = {variables};\n    }\n\n    return variablesData;\n  }\n\n  // Lookup by stream, then id to store [values, id]]\n  _addVariableEntry() {\n    if (!this._dataPending()) {\n      return;\n    }\n\n    // Lookup where to put the value\n    let fieldName = 'doubles';\n    const value = this._values[0];\n    if (typeof value === 'string' || value instanceof String) {\n      fieldName = 'strings';\n    } else if (typeof value === 'boolean') {\n      fieldName = 'bools';\n    }\n\n    const entry = {values: {[fieldName]: this._values}};\n    if (this._id) {\n      entry.base = {object_id: this._id}; // eslint-disable-line camelcase\n    }\n\n    const streamEntry = this._data.get(this._streamId);\n    if (streamEntry) {\n      // We have stream, now get id\n      const idEntry = streamEntry.get(this._id);\n      if (idEntry) {\n        // already have values for this objet\n        this.validateError(`Input \\`values\\` already set for id ${this._id}`);\n      } else {\n        // create new mapping of id -> entry\n        streamEntry.set(this._id, entry);\n      }\n    } else {\n      // No stream\n      // create new stream -> id\n      const idEntry = new Map();\n      idEntry.set(this._id, entry);\n      // create stream entry\n      this._data.set(this._streamId, idEntry);\n    }\n  }\n\n  _dataPending() {\n    return this._values !== null || this._id !== null;\n  }\n\n  _validate() {\n    if (this._dataPending()) {\n      super._validate();\n\n      if (this._values === null) {\n        this.validateWarn(`Stream${this._streamId} values are not provided.`);\n      }\n    }\n  }\n\n  _flush() {\n    this._validate();\n\n    this._addVariableEntry();\n    this._reset();\n  }\n\n  // reset the inflight values\n  _reset() {\n    this._id = null;\n    this._values = null;\n  }\n}\n"],"file":"xviz-variable-builder.js"}