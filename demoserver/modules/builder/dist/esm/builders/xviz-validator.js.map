{"version":3,"sources":["../../../src/builders/xviz-validator.js"],"names":["PRIMITIVE_STYLE_MAP","XVIZValidator","validateError","validateWarn","_validateWarn","_validateError","msg","builder","prop","streamId","getStreamId","Array","length","metadata","getMetadata","category","getCategory","streams","streamMetadata","properties","Object","keys","_style","validProperties","_type","invalidProps","filter","includes","warn","join"],"mappings":";;AAcA,SAAQA,mBAAR,QAAkC,YAAlC;;IAEqBC,a;AACnB,+BAA2C;AAAA,QAA9BC,aAA8B,QAA9BA,aAA8B;AAAA,QAAfC,YAAe,QAAfA,YAAe;;AAAA;;AACzC,SAAKC,aAAL,GAAqBD,YAArB;AACA,SAAKE,cAAL,GAAsBH,aAAtB;AACD;;;;yBAEII,G,EAAK;AACR,WAAKF,aAAL,CAAmBE,GAAnB;AACD;;;0BAEKA,G,EAAK;AACT,WAAKD,cAAL,CAAoBC,GAApB;AACD;;;4BAEOC,O,EAASC,I,EAAMF,G,EAAK;AAC1B,UAAIC,OAAO,CAACC,IAAD,CAAX,EAAmB;AACjB;AACD;;AAED,UAAMC,QAAQ,GAAGF,OAAO,CAACG,WAAR,EAAjB;;AACA,WAAKN,aAAL,CAAmBE,GAAG,qBAAcG,QAAd,eAA2BD,IAA3B,iBAAtB;AACD;;;gCAEWD,O,EAASC,I,EAAMF,G,EAAK;AAC9B,UAAI,CAACC,OAAO,CAACC,IAAD,CAAZ,EAAoB;AAClB;AACD;;AACD,UAAID,OAAO,CAACC,IAAD,CAAP,YAAyBG,KAAzB,IAAkCJ,OAAO,CAACC,IAAD,CAAP,CAAcI,MAAd,KAAyB,CAA/D,EAAkE;AAChE;AACD;;AAED,UAAMH,QAAQ,GAAGF,OAAO,CAACG,WAAR,EAAjB;;AACA,WAAKN,aAAL,CAAmBE,GAAG,qBAAcG,QAAd,eAA2BD,IAA3B,2BAAtB;AACD;;;kCAEaD,O,EAAS;AACrB,UAAMM,QAAQ,GAAGN,OAAO,CAACO,WAAR,EAAjB;AACA,UAAML,QAAQ,GAAGF,OAAO,CAACG,WAAR,EAAjB;AACA,UAAMK,QAAQ,GAAGR,OAAO,CAACS,WAAR,EAAjB;;AAEA,UAAIH,QAAQ,IAAIA,QAAQ,CAACI,OAAzB,EAAkC;AAChC,YAAMC,cAAc,GAAGL,QAAQ,CAACI,OAAT,CAAiBR,QAAjB,CAAvB;;AACA,YAAI,CAACS,cAAL,EAAqB;AACnB,eAAKd,aAAL,WAAsBK,QAAtB;AACD,SAFD,MAEO,IAAIM,QAAQ,KAAKG,cAAc,CAACH,QAAhC,EAA0C;AAC/C,eAAKX,aAAL,kBACYK,QADZ,wBACkCM,QADlC,mDAEIG,cAAc,CAACH,QAFnB;AAKD;AACF;AACF;;;kCAEaR,O,EAAS;AACrB,UAAMY,UAAU,GAAGC,MAAM,CAACC,IAAP,CAAYd,OAAO,CAACe,MAApB,CAAnB;AACA,UAAMC,eAAe,GAAGvB,mBAAmB,CAACO,OAAO,CAACiB,KAAT,CAA3C;AACA,UAAMf,QAAQ,GAAGF,OAAO,CAACG,WAAR,EAAjB;;AACA,UAAIa,eAAJ,EAAqB;AACnB,YAAME,YAAY,GAAGN,UAAU,CAACO,MAAX,CAAkB,UAAAlB,IAAI;AAAA,iBAAI,CAACe,eAAe,CAACI,QAAhB,CAAyBnB,IAAzB,CAAL;AAAA,SAAtB,CAArB;;AACA,YAAIiB,YAAY,IAAIA,YAAY,CAACb,MAAb,GAAsB,CAA1C,EAA6C;AAC3C,eAAKgB,IAAL,oCAAsCH,YAAY,CAACI,IAAb,CAAkB,GAAlB,CAAtC,yBAA2EpB,QAA3E;AACD;AACF,OALD,MAKO;AACL,aAAKmB,IAAL,CACE,IADF,iDAE0CnB,QAF1C,wBAEgEF,OAAO,CAACiB,KAFxE;AAID;AACF;;;;;;SArEkBvB,a","sourcesContent":["// Copyright (c) 2019 Uber Technologies, Inc.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport {PRIMITIVE_STYLE_MAP} from './constant';\n\nexport default class XVIZValidator {\n  constructor({validateError, validateWarn}) {\n    this._validateWarn = validateWarn;\n    this._validateError = validateError;\n  }\n\n  warn(msg) {\n    this._validateWarn(msg);\n  }\n\n  error(msg) {\n    this._validateError(msg);\n  }\n\n  hasProp(builder, prop, msg) {\n    if (builder[prop]) {\n      return;\n    }\n\n    const streamId = builder.getStreamId();\n    this._validateWarn(msg || `Stream ${streamId}: ${prop} is missing.`);\n  }\n\n  propSetOnce(builder, prop, msg) {\n    if (!builder[prop]) {\n      return;\n    }\n    if (builder[prop] instanceof Array && builder[prop].length === 0) {\n      return;\n    }\n\n    const streamId = builder.getStreamId();\n    this._validateWarn(msg || `Stream ${streamId}: ${prop} has been already set.`);\n  }\n\n  matchMetadata(builder) {\n    const metadata = builder.getMetadata();\n    const streamId = builder.getStreamId();\n    const category = builder.getCategory();\n\n    if (metadata && metadata.streams) {\n      const streamMetadata = metadata.streams[streamId];\n      if (!streamMetadata) {\n        this._validateWarn(`${streamId} is not defined in metadata.`);\n      } else if (category !== streamMetadata.category) {\n        this._validateWarn(\n          `Stream ${streamId} category '${category}' does not match metadata definition (${\n            streamMetadata.category\n          }).`\n        );\n      }\n    }\n  }\n\n  validateStyle(builder) {\n    const properties = Object.keys(builder._style);\n    const validProperties = PRIMITIVE_STYLE_MAP[builder._type];\n    const streamId = builder.getStreamId();\n    if (validProperties) {\n      const invalidProps = properties.filter(prop => !validProperties.includes(prop));\n      if (invalidProps && invalidProps.length > 0) {\n        this.warn(`Invalid style properties ${invalidProps.join(',')} for stream ${streamId}`);\n      }\n    } else {\n      this.warn(\n        this,\n        `Missing style validations for stream ${streamId} with type ${builder._type}`\n      );\n    }\n  }\n}\n"],"file":"xviz-validator.js"}