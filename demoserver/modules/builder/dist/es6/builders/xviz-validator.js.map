{"version":3,"sources":["../../../src/builders/xviz-validator.js"],"names":["PRIMITIVE_STYLE_MAP","XVIZValidator","constructor","validateError","validateWarn","_validateWarn","_validateError","warn","msg","error","hasProp","builder","prop","streamId","getStreamId","propSetOnce","Array","length","matchMetadata","metadata","getMetadata","category","getCategory","streams","streamMetadata","validateStyle","properties","Object","keys","_style","validProperties","_type","invalidProps","filter","includes","join"],"mappings":"AAcA,SAAQA,mBAAR,QAAkC,YAAlC;AAEA,eAAe,MAAMC,aAAN,CAAoB;AACjCC,EAAAA,WAAW,CAAC;AAACC,IAAAA,aAAD;AAAgBC,IAAAA;AAAhB,GAAD,EAAgC;AACzC,SAAKC,aAAL,GAAqBD,YAArB;AACA,SAAKE,cAAL,GAAsBH,aAAtB;AACD;;AAEDI,EAAAA,IAAI,CAACC,GAAD,EAAM;AACR,SAAKH,aAAL,CAAmBG,GAAnB;AACD;;AAEDC,EAAAA,KAAK,CAACD,GAAD,EAAM;AACT,SAAKF,cAAL,CAAoBE,GAApB;AACD;;AAEDE,EAAAA,OAAO,CAACC,OAAD,EAAUC,IAAV,EAAgBJ,GAAhB,EAAqB;AAC1B,QAAIG,OAAO,CAACC,IAAD,CAAX,EAAmB;AACjB;AACD;;AAED,UAAMC,QAAQ,GAAGF,OAAO,CAACG,WAAR,EAAjB;;AACA,SAAKT,aAAL,CAAmBG,GAAG,qBAAcK,QAAd,eAA2BD,IAA3B,iBAAtB;AACD;;AAEDG,EAAAA,WAAW,CAACJ,OAAD,EAAUC,IAAV,EAAgBJ,GAAhB,EAAqB;AAC9B,QAAI,CAACG,OAAO,CAACC,IAAD,CAAZ,EAAoB;AAClB;AACD;;AACD,QAAID,OAAO,CAACC,IAAD,CAAP,YAAyBI,KAAzB,IAAkCL,OAAO,CAACC,IAAD,CAAP,CAAcK,MAAd,KAAyB,CAA/D,EAAkE;AAChE;AACD;;AAED,UAAMJ,QAAQ,GAAGF,OAAO,CAACG,WAAR,EAAjB;;AACA,SAAKT,aAAL,CAAmBG,GAAG,qBAAcK,QAAd,eAA2BD,IAA3B,2BAAtB;AACD;;AAEDM,EAAAA,aAAa,CAACP,OAAD,EAAU;AACrB,UAAMQ,QAAQ,GAAGR,OAAO,CAACS,WAAR,EAAjB;AACA,UAAMP,QAAQ,GAAGF,OAAO,CAACG,WAAR,EAAjB;AACA,UAAMO,QAAQ,GAAGV,OAAO,CAACW,WAAR,EAAjB;;AAEA,QAAIH,QAAQ,IAAIA,QAAQ,CAACI,OAAzB,EAAkC;AAChC,YAAMC,cAAc,GAAGL,QAAQ,CAACI,OAAT,CAAiBV,QAAjB,CAAvB;;AACA,UAAI,CAACW,cAAL,EAAqB;AACnB,aAAKnB,aAAL,WAAsBQ,QAAtB;AACD,OAFD,MAEO,IAAIQ,QAAQ,KAAKG,cAAc,CAACH,QAAhC,EAA0C;AAC/C,aAAKhB,aAAL,kBACYQ,QADZ,wBACkCQ,QADlC,mDAEIG,cAAc,CAACH,QAFnB;AAKD;AACF;AACF;;AAEDI,EAAAA,aAAa,CAACd,OAAD,EAAU;AACrB,UAAMe,UAAU,GAAGC,MAAM,CAACC,IAAP,CAAYjB,OAAO,CAACkB,MAApB,CAAnB;AACA,UAAMC,eAAe,GAAG9B,mBAAmB,CAACW,OAAO,CAACoB,KAAT,CAA3C;AACA,UAAMlB,QAAQ,GAAGF,OAAO,CAACG,WAAR,EAAjB;;AACA,QAAIgB,eAAJ,EAAqB;AACnB,YAAME,YAAY,GAAGN,UAAU,CAACO,MAAX,CAAkBrB,IAAI,IAAI,CAACkB,eAAe,CAACI,QAAhB,CAAyBtB,IAAzB,CAA3B,CAArB;;AACA,UAAIoB,YAAY,IAAIA,YAAY,CAACf,MAAb,GAAsB,CAA1C,EAA6C;AAC3C,aAAKV,IAAL,oCAAsCyB,YAAY,CAACG,IAAb,CAAkB,GAAlB,CAAtC,yBAA2EtB,QAA3E;AACD;AACF,KALD,MAKO;AACL,WAAKN,IAAL,CACE,IADF,iDAE0CM,QAF1C,wBAEgEF,OAAO,CAACoB,KAFxE;AAID;AACF;;AArEgC","sourcesContent":["// Copyright (c) 2019 Uber Technologies, Inc.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport {PRIMITIVE_STYLE_MAP} from './constant';\n\nexport default class XVIZValidator {\n  constructor({validateError, validateWarn}) {\n    this._validateWarn = validateWarn;\n    this._validateError = validateError;\n  }\n\n  warn(msg) {\n    this._validateWarn(msg);\n  }\n\n  error(msg) {\n    this._validateError(msg);\n  }\n\n  hasProp(builder, prop, msg) {\n    if (builder[prop]) {\n      return;\n    }\n\n    const streamId = builder.getStreamId();\n    this._validateWarn(msg || `Stream ${streamId}: ${prop} is missing.`);\n  }\n\n  propSetOnce(builder, prop, msg) {\n    if (!builder[prop]) {\n      return;\n    }\n    if (builder[prop] instanceof Array && builder[prop].length === 0) {\n      return;\n    }\n\n    const streamId = builder.getStreamId();\n    this._validateWarn(msg || `Stream ${streamId}: ${prop} has been already set.`);\n  }\n\n  matchMetadata(builder) {\n    const metadata = builder.getMetadata();\n    const streamId = builder.getStreamId();\n    const category = builder.getCategory();\n\n    if (metadata && metadata.streams) {\n      const streamMetadata = metadata.streams[streamId];\n      if (!streamMetadata) {\n        this._validateWarn(`${streamId} is not defined in metadata.`);\n      } else if (category !== streamMetadata.category) {\n        this._validateWarn(\n          `Stream ${streamId} category '${category}' does not match metadata definition (${\n            streamMetadata.category\n          }).`\n        );\n      }\n    }\n  }\n\n  validateStyle(builder) {\n    const properties = Object.keys(builder._style);\n    const validProperties = PRIMITIVE_STYLE_MAP[builder._type];\n    const streamId = builder.getStreamId();\n    if (validProperties) {\n      const invalidProps = properties.filter(prop => !validProperties.includes(prop));\n      if (invalidProps && invalidProps.length > 0) {\n        this.warn(`Invalid style properties ${invalidProps.join(',')} for stream ${streamId}`);\n      }\n    } else {\n      this.warn(\n        this,\n        `Missing style validations for stream ${streamId} with type ${builder._type}`\n      );\n    }\n  }\n}\n"],"file":"xviz-validator.js"}