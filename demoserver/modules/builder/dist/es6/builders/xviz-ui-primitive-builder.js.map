{"version":3,"sources":["../../../src/builders/xviz-ui-primitive-builder.js"],"names":["XVIZBaseBuilder","CATEGORY","PRIMITIVE_TYPES","XVIZTreeTableRowBuilder","constructor","id","values","parent","_parent","_id","_values","_children","child","row","push","getData","obj","column_values","concat","apply","map","XVIZUIPrimitiveBuilder","props","category","UI_PRIMITIVE","reset","_primitives","treetable","columns","_type","_flush","validatePropSetOnce","_columns","_rows","_validate","_flushPrimitives","Object","keys","length","stream","_streamId","fieldName","primitiveArray","_validator","hasProp","nodes","primitives","_formatPrimitives","primitive"],"mappings":"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","sourcesContent":["// Copyright (c) 2019 Uber Technologies, Inc.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n/* eslint-disable camelcase */\nimport XVIZBaseBuilder from './xviz-base-builder';\nimport {CATEGORY, PRIMITIVE_TYPES} from './constant';\n\nclass XVIZTreeTableRowBuilder {\n  constructor(id, values, parent = null) {\n    this._parent = parent;\n    this._id = id;\n    this._values = values;\n    this._children = [];\n  }\n\n  child(id, values) {\n    const row = new XVIZTreeTableRowBuilder(id, values, this._id);\n    this._children.push(row);\n    return row;\n  }\n\n  getData() {\n    const obj = {id: this._id};\n    if (this._values) {\n      obj.column_values = this._values;\n    }\n    if (this._parent !== null) {\n      obj.parent = this._parent;\n    }\n\n    return [].concat.apply([obj], this._children.map(row => row.getData()));\n  }\n}\n\nexport default class XVIZUIPrimitiveBuilder extends XVIZBaseBuilder {\n  constructor(props) {\n    super({\n      ...props,\n      category: CATEGORY.UI_PRIMITIVE\n    });\n\n    this.reset();\n    // primitives: {[streamId]: []}\n    this._primitives = {};\n  }\n\n  treetable(columns) {\n    if (this._type) {\n      this._flush();\n    }\n\n    this.validatePropSetOnce('_columns');\n\n    this._columns = columns;\n    this._type = PRIMITIVE_TYPES.treetable;\n\n    return this;\n  }\n\n  row(id, values) {\n    this.validatePropSetOnce('_id');\n\n    const row = new XVIZTreeTableRowBuilder(id, values);\n    this._rows.push(row);\n    this._type = PRIMITIVE_TYPES.treetable;\n\n    return row;\n  }\n\n  _validate() {\n    super._validate();\n  }\n\n  _flush() {\n    this._validate();\n\n    this._flushPrimitives();\n  }\n\n  getData() {\n    if (this._type) {\n      this._flush();\n    }\n\n    if (Object.keys(this._primitives).length) {\n      return this._primitives;\n    }\n\n    return null;\n  }\n\n  _flushPrimitives() {\n    let stream = this._primitives[this._streamId];\n    if (!stream) {\n      stream = {};\n      this._primitives[this._streamId] = stream;\n    }\n\n    let fieldName;\n    let primitiveArray;\n\n    switch (this._type) {\n      case PRIMITIVE_TYPES.treetable:\n        fieldName = this._type;\n        if (!stream[fieldName]) {\n          // column must be set before adding rows\n          this._validator.hasProp(this, '_columns');\n\n          stream[fieldName] = {\n            columns: this._columns,\n            nodes: []\n          };\n        }\n        primitiveArray = stream[fieldName].nodes;\n        break;\n\n      default:\n    }\n\n    const primitives = this._formatPrimitives();\n    if (primitives) {\n      for (const primitive of primitives) {\n        primitiveArray.push(primitive);\n      }\n    }\n\n    this.reset();\n  }\n\n  _formatPrimitives() {\n    switch (this._type) {\n      case PRIMITIVE_TYPES.treetable:\n        if (this._rows.length > 0) {\n          return [].concat(...this._rows.map(row => row.getData()));\n        }\n        break;\n\n      default:\n    }\n\n    return null;\n  }\n\n  reset() {\n    this._type = null;\n\n    this._columns = null;\n    this._rows = [];\n  }\n}\n"],"file":"xviz-ui-primitive-builder.js"}