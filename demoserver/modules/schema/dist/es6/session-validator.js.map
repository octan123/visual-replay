{"version":3,"sources":["../../src/session-validator.js"],"names":["ValidationError","XVIZValidator","SessionState","Object","freeze","DISCONNECTED","CONNECTED","LOG_SESSION_INITIALIZING","LOG_SESSION_ACTIVE","TRANSFORMING_LOG","LIVE_SESSION_INITIALIZING","LIVE_SESSION_ACTIVE","MessageTypes","START","ERROR","METADATA","TRANSFORM_LOG","STATE_UPDATE","TRANSFORM_LOG_DONE","SchemaNames","TransitionTable","msg","session_type","XVIZSessionValidator","constructor","options","verbose","msgValidator","state","resetState","onConnect","onStart","processMessage","onError","onMetadata","onTransformLog","onStateUpdate","onTransformLogDone","onClose","lastMessage","stats","stateErrors","msgType","recordMessage","runTransition","messages","schemaName","undefined","Error","validate","e","errMsg","toString","uniqueErrors","newError","validationErrors","invalidCallback","validTransitions","nextState"],"mappings":"AAcA,SAAQA,eAAR,EAAyBC,aAAzB,QAA6C,aAA7C;AAGA,MAAMC,YAAY,GAAGC,MAAM,CAACC,MAAP,CAAc;AACjCC,EAAAA,YAAY,EAAE,cADmB;AAEjCC,EAAAA,SAAS,EAAE,WAFsB;AAIjCC,EAAAA,wBAAwB,EAAE,0BAJO;AAKjCC,EAAAA,kBAAkB,EAAE,oBALa;AAMjCC,EAAAA,gBAAgB,EAAE,kBANe;AAQjCC,EAAAA,yBAAyB,EAAE,2BARM;AASjCC,EAAAA,mBAAmB,EAAE;AATY,CAAd,CAArB;AAYA,OAAO,MAAMC,YAAY,GAAGT,MAAM,CAACC,MAAP,CAAc;AACxCS,EAAAA,KAAK,EAAE,OADiC;AAExCC,EAAAA,KAAK,EAAE,OAFiC;AAGxCC,EAAAA,QAAQ,EAAE,UAH8B;AAIxCC,EAAAA,aAAa,EAAE,eAJyB;AAKxCC,EAAAA,YAAY,EAAE,cAL0B;AAMxCC,EAAAA,kBAAkB,EAAE;AANoB,CAAd,CAArB;AASP,MAAMC,WAAW,GAAGhB,MAAM,CAACC,MAAP,CAAc;AAChCS,EAAAA,KAAK,EAAE,eADyB;AAEhCC,EAAAA,KAAK,EAAE,eAFyB;AAGhCC,EAAAA,QAAQ,EAAE,kBAHsB;AAIhCC,EAAAA,aAAa,EAAE,uBAJiB;AAKhCC,EAAAA,YAAY,EAAE,sBALkB;AAMhCC,EAAAA,kBAAkB,EAAE;AANY,CAAd,CAApB;AAUA,MAAME,eAAe,GAAGjB,MAAM,CAACC,MAAP,CAAc;AAEpCC,EAAAA,YAAY,EAAE,EAFsB;AAIpCC,EAAAA,SAAS,EAAE;AACTO,IAAAA,KAAK,EAAEQ,GAAG,IAAI;AACZ,UAAIA,GAAJ,EAAS;AACP,YAAIA,GAAG,CAACC,YAAJ,KAAqB,MAAzB,EAAiC;AAC/B,iBAAOpB,YAAY,CAACQ,yBAApB;AACD;AACF;;AACD,aAAOR,YAAY,CAACK,wBAApB;AACD;AARQ,GAJyB;AAepCA,EAAAA,wBAAwB,EAAE;AACxBO,IAAAA,KAAK,EAAEZ,YAAY,CAACG,YADI;AAExBU,IAAAA,QAAQ,EAAEb,YAAY,CAACM;AAFC,GAfU;AAoBpCA,EAAAA,kBAAkB,EAAE;AAClBQ,IAAAA,aAAa,EAAEd,YAAY,CAACO;AADV,GApBgB;AAwBpCA,EAAAA,gBAAgB,EAAE;AAChBQ,IAAAA,YAAY,EAAEf,YAAY,CAACO,gBADX;AAEhBK,IAAAA,KAAK,EAAEZ,YAAY,CAACO,gBAFJ;AAGhBS,IAAAA,kBAAkB,EAAEhB,YAAY,CAACM;AAHjB,GAxBkB;AA8BpCE,EAAAA,yBAAyB,EAAE;AACzBI,IAAAA,KAAK,EAAEZ,YAAY,CAACG,YADK;AAEzBU,IAAAA,QAAQ,EAAEb,YAAY,CAACS;AAFE,GA9BS;AAmCpCA,EAAAA,mBAAmB,EAAE;AACnBM,IAAAA,YAAY,EAAEf,YAAY,CAACS,mBADR;AAEnBG,IAAAA,KAAK,EAAEZ,YAAY,CAACS;AAFD;AAnCe,CAAd,CAAxB;AA6CA,OAAO,MAAMY,oBAAN,CAA2B;AAChCC,EAAAA,WAAW,CAACC,OAAO,GAAG;AAACC,IAAAA,OAAO,EAAE;AAAV,GAAX,EAA6B;AACtC,SAAKD,OAAL,GAAeA,OAAf;AACA,SAAKE,YAAL,GAAoB,IAAI1B,aAAJ,EAApB;AACA,SAAK2B,KAAL,GAAa1B,YAAY,CAACG,YAA1B;AACA,SAAKwB,UAAL;AACD;;AAEDC,EAAAA,SAAS,GAAG;AACV,SAAKF,KAAL,GAAa1B,YAAY,CAACI,SAA1B;AACA,SAAKuB,UAAL;AACD;;AAEDE,EAAAA,OAAO,CAACV,GAAD,EAAM;AACX,SAAKW,cAAL,CAAoBX,GAApB,EAAyBT,YAAY,CAACC,KAAtC;AACD;;AAEDoB,EAAAA,OAAO,CAACZ,GAAD,EAAM;AACX,SAAKW,cAAL,CAAoBX,GAApB,EAAyBT,YAAY,CAACE,KAAtC;AACD;;AAEDoB,EAAAA,UAAU,CAACb,GAAD,EAAM;AACd,SAAKW,cAAL,CAAoBX,GAApB,EAAyBT,YAAY,CAACG,QAAtC;AACD;;AAEDoB,EAAAA,cAAc,CAACd,GAAD,EAAM;AAClB,SAAKW,cAAL,CAAoBX,GAApB,EAAyBT,YAAY,CAACI,aAAtC;AACD;;AAEDoB,EAAAA,aAAa,CAACf,GAAD,EAAM;AACjB,SAAKW,cAAL,CAAoBX,GAApB,EAAyBT,YAAY,CAACK,YAAtC;AACD;;AAEDoB,EAAAA,kBAAkB,CAAChB,GAAD,EAAM;AACtB,SAAKW,cAAL,CAAoBX,GAApB,EAAyBT,YAAY,CAACM,kBAAtC;AACD;;AAGDoB,EAAAA,OAAO,GAAG;AACR,SAAKV,KAAL,GAAa1B,YAAY,CAACG,YAA1B;;AAEA,QAAI,KAAKkC,WAAL,KAAqB3B,YAAY,CAACE,KAAtC,EAA6C;AAC3C,WAAK0B,KAAL,CAAWC,WAAX,CAAuB,KAAKb,KAA5B,IAAqC,mCAArC;AACD;AACF;;AAGDI,EAAAA,cAAc,CAACX,GAAD,EAAMqB,OAAN,EAAe;AAC3B,SAAKC,aAAL,CAAmBtB,GAAnB,EAAwBqB,OAAxB;AAEA,SAAKE,aAAL,CAAmBvB,GAAnB,EAAwBqB,OAAxB;AACD;;AAGDC,EAAAA,aAAa,CAACtB,GAAD,EAAMqB,OAAN,EAAe;AAC1B,SAAKH,WAAL,GAAmBG,OAAnB;AACA,SAAKF,KAAL,CAAWK,QAAX,CAAoBH,OAApB,IAA+B,KAAKF,KAAL,CAAWK,QAAX,CAAoBH,OAApB,IAA+B,CAA/B,IAAoC,CAAnE;AAEA,UAAMI,UAAU,GAAG3B,WAAW,CAACuB,OAAD,CAA9B;;AAEA,QAAII,UAAU,KAAKC,SAAnB,EAA8B;AAC5B,YAAMC,KAAK,aAAKN,OAAL,oCAAX;AACD;;AAED,QAAI;AACF,WAAKf,YAAL,CAAkBsB,QAAlB,CAA2BH,UAA3B,EAAuCzB,GAAvC;AACD,KAFD,CAEE,OAAO6B,CAAP,EAAU;AACV,UAAIA,CAAC,YAAYlD,eAAjB,EAAkC;AAEhC,cAAMmD,MAAM,GAAGD,CAAC,CAACE,QAAF,EAAf;AACA,YAAIC,YAAY,GAAG,KAAKb,KAAL,CAAWa,YAAX,CAAwBX,OAAxB,CAAnB;AACA,cAAMY,QAAQ,GAAGD,YAAY,KAAKN,SAAlC;;AAEA,YAAIO,QAAJ,EAAc;AACZD,UAAAA,YAAY,GAAG,EAAf;AACAA,UAAAA,YAAY,CAACF,MAAD,CAAZ,GAAuB,CAAvB;AACA,eAAKX,KAAL,CAAWa,YAAX,CAAwBX,OAAxB,IAAmCW,YAAnC;AACD,SAJD,MAIO;AACLA,UAAAA,YAAY,CAACF,MAAD,CAAZ,GAAuBE,YAAY,CAACF,MAAD,CAAZ,GAAuB,CAAvB,IAA4B,CAAnD;AACD;;AAED,aAAKX,KAAL,CAAWe,gBAAX,CAA4Bb,OAA5B,IAAuC,KAAKF,KAAL,CAAWe,gBAAX,CAA4Bb,OAA5B,IAAuC,CAAvC,IAA4C,CAAnF;;AAEA,YAAIY,QAAQ,IAAI,KAAK7B,OAAL,CAAa+B,eAA7B,EAA8C;AAC5C,eAAK/B,OAAL,CAAa+B,eAAb,CAA6Bd,OAA7B,EAAsCQ,CAAtC,EAAyC7B,GAAzC;AACD;AACF,OAnBD,MAmBO;AACL,cAAM6B,CAAN;AACD;AACF;AACF;;AAGDN,EAAAA,aAAa,CAACvB,GAAD,EAAMqB,OAAN,EAAe;AAC1B,UAAMe,gBAAgB,GAAGrC,eAAe,CAAC,KAAKQ,KAAN,CAAxC;;AAEA,QAAI6B,gBAAgB,KAAKV,SAAzB,EAAoC;AAClC,YAAMC,KAAK,kBAAW,KAAKpB,KAAhB,oCAAX;AACD;;AAED,QAAI8B,SAAS,GAAGD,gBAAgB,CAACf,OAAD,CAAhC;;AACA,QAAI,OAAOgB,SAAP,KAAqB,UAAzB,EAAqC;AACnCA,MAAAA,SAAS,GAAGD,gBAAgB,CAACf,OAAD,CAAhB,CAA0BrB,GAA1B,CAAZ;AACD;;AAED,QAAIqC,SAAS,KAAKX,SAAlB,EAA6B;AAC3B,WAAKP,KAAL,CAAWC,WAAX,CAAuB,KAAKb,KAA5B,uBACE,KAAKA,KADP,2CAEiCc,OAFjC;AAGD,KAJD,MAIO;AACL,WAAKd,KAAL,GAAa8B,SAAb;AACD;AACF;;AAED7B,EAAAA,UAAU,GAAG;AACX,SAAKW,KAAL,GAAa;AACXK,MAAAA,QAAQ,EAAE,EADC;AAEXU,MAAAA,gBAAgB,EAAE,EAFP;AAGXF,MAAAA,YAAY,EAAE,EAHH;AAIXZ,MAAAA,WAAW,EAAE;AAJF,KAAb;AAMA,SAAKF,WAAL,GAAmB,IAAnB;AACD;;AA1H+B","sourcesContent":["// Copyright (c) 2019 Uber Technologies, Inc.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport {ValidationError, XVIZValidator} from './validator';\n\n// I am not using symbols here because they don't work with maps an test libraries...\nconst SessionState = Object.freeze({\n  DISCONNECTED: 'DISCONNECTED',\n  CONNECTED: 'CONNECTED',\n\n  LOG_SESSION_INITIALIZING: 'LOG_SESSION_INITIALIZING',\n  LOG_SESSION_ACTIVE: 'LOG_SESSION_ACTIVE',\n  TRANSFORMING_LOG: 'TRANSFORMING_LOG',\n\n  LIVE_SESSION_INITIALIZING: 'LIVE_SESSION_INITIALIZING',\n  LIVE_SESSION_ACTIVE: 'LIVE_SESSION_ACTIVE'\n});\n\nexport const MessageTypes = Object.freeze({\n  START: 'START',\n  ERROR: 'ERROR',\n  METADATA: 'METADATA',\n  TRANSFORM_LOG: 'TRANSFORM_LOG',\n  STATE_UPDATE: 'STATE_UPDATE',\n  TRANSFORM_LOG_DONE: 'TRANSFORM_LOG_DONE'\n});\n\nconst SchemaNames = Object.freeze({\n  START: 'session/start',\n  ERROR: 'session/error',\n  METADATA: 'session/metadata',\n  TRANSFORM_LOG: 'session/transform_log',\n  STATE_UPDATE: 'session/state_update',\n  TRANSFORM_LOG_DONE: 'session/transform_log_done'\n});\n\n// Maps state to message that provoke next state\nconst TransitionTable = Object.freeze({\n  // No message transitions for disconnection\n  DISCONNECTED: {},\n\n  CONNECTED: {\n    START: msg => {\n      if (msg) {\n        if (msg.session_type === 'LIVE') {\n          return SessionState.LIVE_SESSION_INITIALIZING;\n        }\n      }\n      return SessionState.LOG_SESSION_INITIALIZING;\n    }\n  },\n\n  LOG_SESSION_INITIALIZING: {\n    ERROR: SessionState.DISCONNECTED,\n    METADATA: SessionState.LOG_SESSION_ACTIVE\n  },\n\n  LOG_SESSION_ACTIVE: {\n    TRANSFORM_LOG: SessionState.TRANSFORMING_LOG\n  },\n\n  TRANSFORMING_LOG: {\n    STATE_UPDATE: SessionState.TRANSFORMING_LOG,\n    ERROR: SessionState.TRANSFORMING_LOG,\n    TRANSFORM_LOG_DONE: SessionState.LOG_SESSION_ACTIVE\n  },\n\n  LIVE_SESSION_INITIALIZING: {\n    ERROR: SessionState.DISCONNECTED,\n    METADATA: SessionState.LIVE_SESSION_ACTIVE\n  },\n\n  LIVE_SESSION_ACTIVE: {\n    STATE_UPDATE: SessionState.LIVE_SESSION_ACTIVE,\n    ERROR: SessionState.LIVE_SESSION_ACTIVE\n  }\n});\n\n// This class encodes the XVIZ protocol session state machine, and checks\n// a message flow against it.  It can be used by a client to ensure a\n// server is sending the right messages, in the right order, and that are\n// contain valid data.\nexport class XVIZSessionValidator {\n  constructor(options = {verbose: false}) {\n    this.options = options;\n    this.msgValidator = new XVIZValidator();\n    this.state = SessionState.DISCONNECTED;\n    this.resetState();\n  }\n\n  onConnect() {\n    this.state = SessionState.CONNECTED;\n    this.resetState();\n  }\n\n  onStart(msg) {\n    this.processMessage(msg, MessageTypes.START);\n  }\n\n  onError(msg) {\n    this.processMessage(msg, MessageTypes.ERROR);\n  }\n\n  onMetadata(msg) {\n    this.processMessage(msg, MessageTypes.METADATA);\n  }\n\n  onTransformLog(msg) {\n    this.processMessage(msg, MessageTypes.TRANSFORM_LOG);\n  }\n\n  onStateUpdate(msg) {\n    this.processMessage(msg, MessageTypes.STATE_UPDATE);\n  }\n\n  onTransformLogDone(msg) {\n    this.processMessage(msg, MessageTypes.TRANSFORM_LOG_DONE);\n  }\n\n  // Denote the connection has been closed\n  onClose() {\n    this.state = SessionState.DISCONNECTED;\n\n    if (this.lastMessage !== MessageTypes.ERROR) {\n      this.stats.stateErrors[this.state] = 'Close should only happen on error';\n    }\n  }\n\n  // Record, validate and update protocol state machine\n  processMessage(msg, msgType) {\n    this.recordMessage(msg, msgType);\n\n    this.runTransition(msg, msgType);\n  }\n\n  // Count and validate the message we have received\n  recordMessage(msg, msgType) {\n    this.lastMessage = msgType;\n    this.stats.messages[msgType] = this.stats.messages[msgType] + 1 || 1;\n\n    const schemaName = SchemaNames[msgType];\n\n    if (schemaName === undefined) {\n      throw Error(`\"${msgType}\" does not have a schema name`);\n    }\n\n    try {\n      this.msgValidator.validate(schemaName, msg);\n    } catch (e) {\n      if (e instanceof ValidationError) {\n        // Gather unique errors per item\n        const errMsg = e.toString();\n        let uniqueErrors = this.stats.uniqueErrors[msgType];\n        const newError = uniqueErrors === undefined;\n\n        if (newError) {\n          uniqueErrors = {};\n          uniqueErrors[errMsg] = 1;\n          this.stats.uniqueErrors[msgType] = uniqueErrors;\n        } else {\n          uniqueErrors[errMsg] = uniqueErrors[errMsg] + 1 || 1;\n        }\n\n        this.stats.validationErrors[msgType] = this.stats.validationErrors[msgType] + 1 || 1;\n\n        if (newError && this.options.invalidCallback) {\n          this.options.invalidCallback(msgType, e, msg);\n        }\n      } else {\n        throw e;\n      }\n    }\n  }\n\n  // Update our state machine to the next state\n  runTransition(msg, msgType) {\n    const validTransitions = TransitionTable[this.state];\n\n    if (validTransitions === undefined) {\n      throw Error(`State: ${this.state} does not have any transitions`);\n    }\n\n    let nextState = validTransitions[msgType];\n    if (typeof nextState === 'function') {\n      nextState = validTransitions[msgType](msg);\n    }\n\n    if (nextState === undefined) {\n      this.stats.stateErrors[this.state] = `While in ${\n        this.state\n      } state, cannot accept message ${msgType}`;\n    } else {\n      this.state = nextState;\n    }\n  }\n\n  resetState() {\n    this.stats = {\n      messages: {},\n      validationErrors: {},\n      uniqueErrors: {},\n      stateErrors: {}\n    };\n    this.lastMessage = null;\n  }\n}\n"],"file":"session-validator.js"}