{"version":3,"sources":["../../src/proto-struct-wrapper.js"],"names":["wrappers","is","StructEncode","constructor","options","seenObjects","Set","removeCircular","stringify","encodeStruct","obj","convertedObject","fields","add","prop","hasOwnProperty","value","undefined","encodeValue","delete","convertedValue","null","nullValue","number","numberValue","string","stringValue","boolean","boolValue","object","has","Error","join","structValue","array","listValue","values","map","bind","String","StructDecode","decodeValue","kind","decodeStruct","struct","fromObject","toObject","message"],"mappings":"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","sourcesContent":["// Copyright (c) 2019 Uber Technologies, Inc.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n// Add support well known type google.protobuf.Struct.  Which when\n// encountered by full protobuf implementation it gets transparently\n// turned in JSON and back.\n\n// Code from, only changes are conversion to ES6 from typescript\n// https://github.com/dcodeIO/protobuf.js/issues/839#issuecomment-401279631\n\nimport {wrappers} from 'protobufjs';\nimport * as is from 'is';\n\nexport class StructEncode {\n  // seenObjects: Set<{}>;\n  // removeCircular: boolean;\n  // stringify?: boolean;\n\n  constructor(options) {\n    options = options || {};\n\n    this.seenObjects = new Set();\n    this.removeCircular = options.removeCircular === true;\n    this.stringify = options.stringify === true;\n  }\n\n  encodeStruct(obj) {\n    const convertedObject = {\n      fields: {}\n    };\n\n    this.seenObjects.add(obj);\n\n    for (const prop in obj) {\n      if (obj.hasOwnProperty(prop)) {\n        const value = obj[prop];\n\n        if (is.undefined(value)) {\n          continue; // eslint-disable-line no-continue\n        }\n\n        convertedObject.fields[prop] = this.encodeValue(value);\n      }\n    }\n\n    this.seenObjects.delete(obj);\n\n    return convertedObject;\n  }\n\n  encodeValue(value) {\n    let convertedValue;\n\n    if (is.null(value)) {\n      convertedValue = {\n        nullValue: 0\n      };\n    } else if (is.number(value)) {\n      convertedValue = {\n        numberValue: value\n      };\n    } else if (is.string(value)) {\n      convertedValue = {\n        stringValue: value\n      };\n    } else if (is.boolean(value)) {\n      convertedValue = {\n        boolValue: value\n      };\n      // Not supported in Node.js and not needed for our level of support\n      // } else if (Buffer.isBuffer(value)) {\n      //   convertedValue = {\n      //     blobValue: value\n      //   };\n    } else if (is.object(value)) {\n      if (this.seenObjects.has(value)) {\n        // Circular reference.\n        if (!this.removeCircular) {\n          throw new Error(\n            [\n              'This object contains a circular reference. To automatically',\n              'remove it, set the `removeCircular` option to true.'\n            ].join(' ')\n          );\n        }\n        convertedValue = {\n          stringValue: '[Circular]'\n        };\n      } else {\n        convertedValue = {\n          structValue: this.encodeStruct(value)\n        };\n      }\n    } else if (is.array(value)) {\n      convertedValue = {\n        listValue: {\n          values: value.map(this.encodeValue.bind(this))\n        }\n      };\n    } else {\n      if (!this.stringify) {\n        throw new Error(`Value of type ${typeof value} not recognized.`);\n      }\n\n      convertedValue = {\n        stringValue: String(value)\n      };\n    }\n\n    return convertedValue;\n  }\n}\n\nexport class StructDecode {\n  static decodeValue(value) {\n    switch (value.kind) {\n      case 'structValue': {\n        return StructDecode.decodeStruct(value.structValue);\n      }\n\n      case 'nullValue': {\n        return null;\n      }\n\n      case 'listValue': {\n        return value.listValue.values.map(StructDecode.decodeValue);\n      }\n\n      default: {\n        return value[value.kind];\n      }\n    }\n  }\n\n  static decodeStruct(struct) {\n    const convertedObject = {};\n\n    for (const prop in struct.fields) {\n      if (struct.fields.hasOwnProperty(prop)) {\n        const value = struct.fields[prop];\n        convertedObject[prop] = StructDecode.decodeValue(value);\n      }\n    }\n\n    return convertedObject;\n  }\n}\n\nwrappers['.google.protobuf.Value'] = {\n  fromObject(object) {\n    if (object) {\n      return new StructEncode().encodeValue(object);\n    }\n\n    return this.fromObject(object);\n  },\n\n  toObject(message) {\n    return StructDecode.decodeValue(message);\n  }\n};\n\nwrappers['.google.protobuf.Struct'] = {\n  fromObject(object) {\n    if (object) {\n      return new StructEncode().encodeStruct(object);\n    }\n\n    return this.fromObject(object);\n  },\n\n  toObject(message) {\n    return StructDecode.decodeStruct(message);\n  }\n};\n"],"file":"proto-struct-wrapper.js"}