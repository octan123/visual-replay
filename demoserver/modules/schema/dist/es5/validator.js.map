{"version":3,"sources":["../../src/validator.js"],"names":["ValidationError","args","Error","captureStackTrace","XVIZValidator","ajv","newAjv","schemaName","SCHEMA_DATA","schemaData","addSchema","data","validate","type","schemaValidator","_getSchema","undefined","error","valid","errorDescription","JSON","stringify","errors","Object","keys","_schemas","length","endsWith","getSchema","validator","newAjvDraft4","Ajv","meta","schemaId","extendRefs","metaSchema","require","addMetaSchema","_opts","defaultMeta","id","removeKeyword"],"mappings":"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","sourcesContent":["// Copyright (c) 2019 Uber Technologies, Inc.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n// See: https://github.com/epoberezkin/ajv/issues/687\nimport Ajv from 'ajv';\nimport {SCHEMA_DATA} from './data';\n\nexport class ValidationError extends Error {\n  constructor(...args) {\n    super(...args);\n    Error.captureStackTrace(this, ValidationError);\n  }\n}\n\nexport class XVIZValidator {\n  constructor() {\n    this.ajv = newAjv();\n\n    for (const schemaName in SCHEMA_DATA) {\n      const schemaData = SCHEMA_DATA[schemaName];\n\n      this.ajv.addSchema(schemaData, schemaName);\n    }\n  }\n\n  // Highest level objects\n  validateMetadata(data) {\n    this.validate('session/metadata.schema.json', data);\n  }\n\n  validateStateUpdate(data) {\n    this.validate('session/state_update.schema.json', data);\n  }\n\n  // Core object\n  validateStreamSet(data) {\n    this.validate('core/stream_set.schema.json', data);\n  }\n\n  // Type level validation\n  validatePose(data) {\n    this.validate(`core/pose.schema.json`, data);\n  }\n\n  validatePrimitive(type, data) {\n    this.validate(`primitives/${type}.schema.json`, data);\n  }\n\n  validateTimeSeries(data) {\n    this.validate('core/timeseries_state.schema.json', data);\n  }\n\n  validateFutureInstances(data) {\n    this.validate('core/future_instances.schema.json', data);\n  }\n\n  validateVariable(data) {\n    this.validate('core/variable.schema.json', data);\n  }\n\n  validateAnnotation(type, data) {\n    this.validate(`core/annotation_${type}.schema.json`, data);\n  }\n\n  // utility methods\n  validate(schemaName, data) {\n    const schemaValidator = this._getSchema(schemaName);\n\n    if (schemaValidator === undefined) {\n      const error = `Could not load schema: ${schemaName}`;\n      throw error;\n    }\n\n    const valid = schemaValidator(data);\n\n    if (!valid) {\n      const errorDescription = JSON.stringify(schemaValidator.errors, null, '  ');\n      throw new ValidationError(`Validation errors: ${errorDescription}`);\n    }\n  }\n\n  schemaCount() {\n    return Object.keys(this.ajv._schemas).length;\n  }\n\n  hasSchema(schemaName) {\n    return this._getSchema(schemaName) !== undefined;\n  }\n\n  _getSchema(schemaName) {\n    if (!schemaName.endsWith('.schema.json')) {\n      schemaName += '.schema.json';\n    }\n\n    return this.ajv.getSchema(schemaName);\n  }\n}\n\nexport function newAjv() {\n  const validator = newAjvDraft4();\n  return validator;\n}\n\n// Draft 4 schema is more widely supported, but requires special\n// construction\nfunction newAjvDraft4() {\n  const ajv = new Ajv({\n    meta: false, // Prevent loading future schemas\n    schemaId: 'id', // needed because we use 'id' in draft-04\n    extendRefs: 'fail' // Be more strict, don't allow ref extension\n  });\n\n  const metaSchema = require('ajv/lib/refs/json-schema-draft-04.json');\n  ajv.addMetaSchema(metaSchema);\n  ajv._opts.defaultMeta = metaSchema.id;\n\n  // Disable keywords defined in future drafts\n  ajv.removeKeyword('propertyNames');\n  ajv.removeKeyword('contains');\n  ajv.removeKeyword('const');\n\n  return ajv;\n}\n"],"file":"validator.js"}