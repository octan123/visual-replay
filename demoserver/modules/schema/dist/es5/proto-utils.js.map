{"version":3,"sources":["../../src/proto-utils.js"],"names":["PRIMITIVE_PROTO_TYPES","Set","getProtoEnumTypes","protoTypeObj","enumTypes","nestedArray","map","store","e","values","undefined","fullName","Object","assign","protoEnumsToInts","protoType","jsonObject","fields","fieldName","hasOwnProperty","field","fieldValue","lookUpEnumValues","type","enumToIntField","enumToIntMapField","repeated","enumToIntRepeatedField","enumToIntMessageField","fieldType","parent","originalValue","newValue","msg","Error","has","subType","lookupType","propertyName","propertyValue","jsonArray","i","length"],"mappings":"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","sourcesContent":["// Copyright (c) 2019 Uber Technologies, Inc.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nconst PRIMITIVE_PROTO_TYPES = new Set([\n  'double',\n  'float',\n  'int32',\n  'int64',\n  'uint32',\n  'uint64',\n  'sint32',\n  'sint64',\n  'fixed32',\n  'fixed64',\n  'sfixed32',\n  'sfixed64',\n  'bool',\n  'string',\n  'bytes'\n]);\n\nexport function getProtoEnumTypes(protoTypeObj) {\n  const enumTypes = {};\n\n  protoTypeObj.nestedArray.map(function store(e) {\n    if (e.values !== undefined) {\n      // enumTypes[e.name] = e.values;\n      enumTypes[e.fullName] = e.values;\n    } else if (e.nestedArray !== undefined) {\n      Object.assign(enumTypes, getProtoEnumTypes(e));\n    }\n  });\n\n  return enumTypes;\n}\n/* eslint-disable */\nexport function protoEnumsToInts(protoType, jsonObject, enumTypes) {\n  if (enumTypes === undefined) {\n    throw 'protoEnumsToInts needs defined enumTypes';\n  }\n\n  const fields = protoType.fields;\n\n  // Fix up fields\n  for (const fieldName in fields) {\n    if (fields.hasOwnProperty(fieldName)) {\n      const field = fields[fieldName];\n      const fieldValue = jsonObject[fieldName];\n\n      const values = lookUpEnumValues(protoType, field.type, enumTypes);\n      // console.log(\n      //   `${protoType.fullName} ${field.fullName}: ${field.type} values: ${JSON.stringify(values)}`\n      // );\n\n      if (values !== undefined) {\n        enumToIntField(values, fieldName, jsonObject);\n      } else if (field.map) {\n        enumToIntMapField(field, jsonObject[fieldName], enumTypes);\n      } else if (field.repeated) {\n        enumToIntRepeatedField(field, jsonObject[fieldName], enumTypes);\n      } else if (typeof fieldValue === 'object') {\n        enumToIntMessageField(field, fieldValue, enumTypes);\n      }\n    }\n  }\n}\n\n/**\n * protobuf.js does not use fully qualified type names in it's reflection\n * information for enums.  So we have to replicate it's enum rules.\n */\nfunction lookUpEnumValues(protoType, fieldType, enumTypes) {\n  // First tree class scope\n  let values = enumTypes[`${protoType.fullName}.${fieldType}`];\n\n  if (values === undefined) {\n    // Then package scope\n    values = enumTypes[`${protoType.parent.fullName}.${fieldType}`];\n  }\n\n  return values;\n}\n\nexport function enumToIntField(values, fieldName, jsonObject) {\n  const originalValue = jsonObject[fieldName];\n\n  if (originalValue !== undefined) {\n    const newValue = values[originalValue];\n\n    if (newValue === undefined) {\n      const msg = `Error: field \"${fieldName}\" has unknown enum value \"${originalValue}\"`;\n      throw new Error(msg);\n    }\n\n    jsonObject[fieldName] = newValue;\n  }\n}\n\nfunction enumToIntMessageField(field, jsonObject, enumTypes) {\n  if (!PRIMITIVE_PROTO_TYPES.has(field.type) && jsonObject !== undefined) {\n    const subType = field.parent.lookupType(field.type);\n    protoEnumsToInts(subType, jsonObject, enumTypes);\n  }\n}\n\nfunction enumToIntMapField(field, jsonObject, enumTypes) {\n  if (!PRIMITIVE_PROTO_TYPES.has(field.type) && jsonObject !== undefined) {\n    const subType = field.parent.lookupType(field.type);\n\n    for (const propertyName in jsonObject) {\n      if (jsonObject.hasOwnProperty(propertyName)) {\n        const propertyValue = jsonObject[propertyName];\n        protoEnumsToInts(subType, propertyValue, enumTypes);\n      }\n    }\n  }\n}\n\nfunction enumToIntRepeatedField(field, jsonArray, enumTypes) {\n  if (!PRIMITIVE_PROTO_TYPES.has(field.type) && jsonArray !== undefined) {\n    const subType = field.parent.lookupType(field.type);\n\n    for (let i = 0; i < jsonArray.length; i++) {\n      protoEnumsToInts(subType, jsonArray[i], enumTypes);\n    }\n  }\n}\n"],"file":"proto-utils.js"}