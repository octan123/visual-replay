{"version":3,"sources":["../../src/session-validator.js"],"names":["SessionState","Object","freeze","DISCONNECTED","CONNECTED","LOG_SESSION_INITIALIZING","LOG_SESSION_ACTIVE","TRANSFORMING_LOG","LIVE_SESSION_INITIALIZING","LIVE_SESSION_ACTIVE","MessageTypes","START","ERROR","METADATA","TRANSFORM_LOG","STATE_UPDATE","TRANSFORM_LOG_DONE","SchemaNames","TransitionTable","msg","session_type","XVIZSessionValidator","options","verbose","msgValidator","XVIZValidator","state","resetState","processMessage","lastMessage","stats","stateErrors","msgType","recordMessage","runTransition","messages","schemaName","undefined","Error","validate","e","ValidationError","errMsg","toString","uniqueErrors","newError","validationErrors","invalidCallback","validTransitions","nextState"],"mappings":"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","sourcesContent":["// Copyright (c) 2019 Uber Technologies, Inc.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport {ValidationError, XVIZValidator} from './validator';\n\n// I am not using symbols here because they don't work with maps an test libraries...\nconst SessionState = Object.freeze({\n  DISCONNECTED: 'DISCONNECTED',\n  CONNECTED: 'CONNECTED',\n\n  LOG_SESSION_INITIALIZING: 'LOG_SESSION_INITIALIZING',\n  LOG_SESSION_ACTIVE: 'LOG_SESSION_ACTIVE',\n  TRANSFORMING_LOG: 'TRANSFORMING_LOG',\n\n  LIVE_SESSION_INITIALIZING: 'LIVE_SESSION_INITIALIZING',\n  LIVE_SESSION_ACTIVE: 'LIVE_SESSION_ACTIVE'\n});\n\nexport const MessageTypes = Object.freeze({\n  START: 'START',\n  ERROR: 'ERROR',\n  METADATA: 'METADATA',\n  TRANSFORM_LOG: 'TRANSFORM_LOG',\n  STATE_UPDATE: 'STATE_UPDATE',\n  TRANSFORM_LOG_DONE: 'TRANSFORM_LOG_DONE'\n});\n\nconst SchemaNames = Object.freeze({\n  START: 'session/start',\n  ERROR: 'session/error',\n  METADATA: 'session/metadata',\n  TRANSFORM_LOG: 'session/transform_log',\n  STATE_UPDATE: 'session/state_update',\n  TRANSFORM_LOG_DONE: 'session/transform_log_done'\n});\n\n// Maps state to message that provoke next state\nconst TransitionTable = Object.freeze({\n  // No message transitions for disconnection\n  DISCONNECTED: {},\n\n  CONNECTED: {\n    START: msg => {\n      if (msg) {\n        if (msg.session_type === 'LIVE') {\n          return SessionState.LIVE_SESSION_INITIALIZING;\n        }\n      }\n      return SessionState.LOG_SESSION_INITIALIZING;\n    }\n  },\n\n  LOG_SESSION_INITIALIZING: {\n    ERROR: SessionState.DISCONNECTED,\n    METADATA: SessionState.LOG_SESSION_ACTIVE\n  },\n\n  LOG_SESSION_ACTIVE: {\n    TRANSFORM_LOG: SessionState.TRANSFORMING_LOG\n  },\n\n  TRANSFORMING_LOG: {\n    STATE_UPDATE: SessionState.TRANSFORMING_LOG,\n    ERROR: SessionState.TRANSFORMING_LOG,\n    TRANSFORM_LOG_DONE: SessionState.LOG_SESSION_ACTIVE\n  },\n\n  LIVE_SESSION_INITIALIZING: {\n    ERROR: SessionState.DISCONNECTED,\n    METADATA: SessionState.LIVE_SESSION_ACTIVE\n  },\n\n  LIVE_SESSION_ACTIVE: {\n    STATE_UPDATE: SessionState.LIVE_SESSION_ACTIVE,\n    ERROR: SessionState.LIVE_SESSION_ACTIVE\n  }\n});\n\n// This class encodes the XVIZ protocol session state machine, and checks\n// a message flow against it.  It can be used by a client to ensure a\n// server is sending the right messages, in the right order, and that are\n// contain valid data.\nexport class XVIZSessionValidator {\n  constructor(options = {verbose: false}) {\n    this.options = options;\n    this.msgValidator = new XVIZValidator();\n    this.state = SessionState.DISCONNECTED;\n    this.resetState();\n  }\n\n  onConnect() {\n    this.state = SessionState.CONNECTED;\n    this.resetState();\n  }\n\n  onStart(msg) {\n    this.processMessage(msg, MessageTypes.START);\n  }\n\n  onError(msg) {\n    this.processMessage(msg, MessageTypes.ERROR);\n  }\n\n  onMetadata(msg) {\n    this.processMessage(msg, MessageTypes.METADATA);\n  }\n\n  onTransformLog(msg) {\n    this.processMessage(msg, MessageTypes.TRANSFORM_LOG);\n  }\n\n  onStateUpdate(msg) {\n    this.processMessage(msg, MessageTypes.STATE_UPDATE);\n  }\n\n  onTransformLogDone(msg) {\n    this.processMessage(msg, MessageTypes.TRANSFORM_LOG_DONE);\n  }\n\n  // Denote the connection has been closed\n  onClose() {\n    this.state = SessionState.DISCONNECTED;\n\n    if (this.lastMessage !== MessageTypes.ERROR) {\n      this.stats.stateErrors[this.state] = 'Close should only happen on error';\n    }\n  }\n\n  // Record, validate and update protocol state machine\n  processMessage(msg, msgType) {\n    this.recordMessage(msg, msgType);\n\n    this.runTransition(msg, msgType);\n  }\n\n  // Count and validate the message we have received\n  recordMessage(msg, msgType) {\n    this.lastMessage = msgType;\n    this.stats.messages[msgType] = this.stats.messages[msgType] + 1 || 1;\n\n    const schemaName = SchemaNames[msgType];\n\n    if (schemaName === undefined) {\n      throw Error(`\"${msgType}\" does not have a schema name`);\n    }\n\n    try {\n      this.msgValidator.validate(schemaName, msg);\n    } catch (e) {\n      if (e instanceof ValidationError) {\n        // Gather unique errors per item\n        const errMsg = e.toString();\n        let uniqueErrors = this.stats.uniqueErrors[msgType];\n        const newError = uniqueErrors === undefined;\n\n        if (newError) {\n          uniqueErrors = {};\n          uniqueErrors[errMsg] = 1;\n          this.stats.uniqueErrors[msgType] = uniqueErrors;\n        } else {\n          uniqueErrors[errMsg] = uniqueErrors[errMsg] + 1 || 1;\n        }\n\n        this.stats.validationErrors[msgType] = this.stats.validationErrors[msgType] + 1 || 1;\n\n        if (newError && this.options.invalidCallback) {\n          this.options.invalidCallback(msgType, e, msg);\n        }\n      } else {\n        throw e;\n      }\n    }\n  }\n\n  // Update our state machine to the next state\n  runTransition(msg, msgType) {\n    const validTransitions = TransitionTable[this.state];\n\n    if (validTransitions === undefined) {\n      throw Error(`State: ${this.state} does not have any transitions`);\n    }\n\n    let nextState = validTransitions[msgType];\n    if (typeof nextState === 'function') {\n      nextState = validTransitions[msgType](msg);\n    }\n\n    if (nextState === undefined) {\n      this.stats.stateErrors[this.state] = `While in ${\n        this.state\n      } state, cannot accept message ${msgType}`;\n    } else {\n      this.state = nextState;\n    }\n  }\n\n  resetState() {\n    this.stats = {\n      messages: {},\n      validationErrors: {},\n      uniqueErrors: {},\n      stateErrors: {}\n    };\n    this.lastMessage = null;\n  }\n}\n"],"file":"session-validator.js"}