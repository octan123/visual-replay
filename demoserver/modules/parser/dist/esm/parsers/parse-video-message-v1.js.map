{"version":3,"sources":["../../../src/parsers/parse-video-message-v1.js"],"names":["XVIZ_MESSAGE_TYPE","TextDecoder","blobToArrayBuffer","parseLogMetadata","parseVideoMessageV1","message","onResult","onError","Blob","then","arrayBuffer","data","JSON","parse","result","parseStreamVideoData","error","ArrayBuffer","parseVideoFrame","type","parseVideoMetadata","ERROR","VIDEO_METADATA","view","DataView","VIDEO_FRAME","littleEndian","utf8Decoder","offset","version","getUint32","versionFlags","streamLength","stringStart","stream","decode","slice","timestamp","getFloat64","imageSize","imageData","imageType"],"mappings":"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","sourcesContent":["// Copyright (c) 2019 Uber Technologies, Inc.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n/**\n * This file contains parsers for XVIZ video stream protocol.\n * Naming conventions:\n * `message` refers to the raw message received via webSocket.onmessage\n * `data` refers to pre-processed data objects (blob, arraybuffer, JSON object)\n */\n/* global Blob */\nimport {XVIZ_MESSAGE_TYPE} from '../constants';\nimport {TextDecoder} from '../utils/text-encoding';\nimport {blobToArrayBuffer} from '../utils/binary';\n\nimport {parseLogMetadata} from './parse-log-metadata';\n\n// Handle messages from the stand alone video server\nexport function parseVideoMessageV1(message, onResult, onError) {\n  if (message instanceof Blob) {\n    blobToArrayBuffer(message)\n      .then(arrayBuffer => {\n        parseVideoMessageV1(arrayBuffer, onResult, onError);\n      })\n      .catch(onError);\n    return;\n  }\n\n  try {\n    let data = message;\n    if (typeof message === 'string') {\n      data = JSON.parse(message);\n    }\n    const result = parseStreamVideoData(data);\n    onResult(result);\n  } catch (error) {\n    onError(error);\n  }\n}\n\n// Handle messages from the stand alone video server\nexport function parseStreamVideoData(data) {\n  if (data instanceof ArrayBuffer) {\n    return parseVideoFrame(data);\n  }\n  if (data.type === 'metadata') {\n    return parseVideoMetadata(data);\n  }\n  // Unknown message\n  return {type: XVIZ_MESSAGE_TYPE.ERROR, message: 'Unknown stream data type', data};\n}\n\n// Extract metadata from stream message\nfunction parseVideoMetadata(data) {\n  const result = parseLogMetadata(data);\n  result.type = XVIZ_MESSAGE_TYPE.VIDEO_METADATA;\n\n  return result;\n}\n\n// Parse image data from stream message\n// https://code.int.uberatc.com/diffusion/AV/browse/master/source/xviz/services/video/www/index.js\nexport function parseVideoFrame(arrayBuffer) {\n  const view = new DataView(arrayBuffer);\n\n  // Read off version\n  const result = {type: XVIZ_MESSAGE_TYPE.VIDEO_FRAME};\n  const littleEndian = true;\n  const utf8Decoder = new TextDecoder('utf-8');\n\n  // Check version\n  let offset = 0;\n  result.version = view.getUint32(offset, littleEndian);\n  offset += 4;\n  result.versionFlags = view.getUint32(offset, littleEndian);\n  offset += 4;\n\n  // Read off stream name\n  const streamLength = view.getUint32(offset, littleEndian);\n  const stringStart = offset + 4;\n  offset += 4 + streamLength;\n\n  result.stream = utf8Decoder.decode(arrayBuffer.slice(stringStart, offset));\n\n  // Read off timestamp\n  result.timestamp = view.getFloat64(offset, littleEndian);\n  offset += 8;\n\n  // Read slice off the image data\n  const imageSize = view.getUint32(offset, littleEndian);\n  offset += 4;\n\n  result.imageData = arrayBuffer.slice(offset, offset + imageSize);\n  result.imageType = 'image/jpeg';\n\n  return result;\n}\n"],"file":"parse-video-message-v1.js"}