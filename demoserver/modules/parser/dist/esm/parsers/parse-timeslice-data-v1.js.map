{"version":3,"sources":["../../../src/parsers/parse-timeslice-data-v1.js"],"names":["getXVIZConfig","XVIZ_MESSAGE_TYPE","parseStreamFutures","parseStreamPrimitive","parseStreamVariable","parseTimesliceData","data","convertPrimitive","PRIMARY_POSE_STREAM","vehiclePose","vehicle_pose","stateUpdates","state_updates","otherInfo","timestamp","time","reduce","t","stateUpdate","Math","max","type","INCOMPLETE","newStreams","result","TIMESLICE","streams","xvizStreams","parseStateUpdates","Object","assign","STREAM_BLACKLIST","primitives","variables","futures","keys","filter","streamName","has","forEach","primitive","variable","future"],"mappings":"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","sourcesContent":["// Copyright (c) 2019 Uber Technologies, Inc.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n// Extracts a TIMESLICE message v1\nimport {getXVIZConfig} from '../config/xviz-config';\nimport {XVIZ_MESSAGE_TYPE} from '../constants';\nimport {parseStreamFutures, parseStreamPrimitive, parseStreamVariable} from './parse-xviz-stream';\n\nexport default function parseTimesliceData(data, convertPrimitive) {\n  const {PRIMARY_POSE_STREAM} = getXVIZConfig();\n  const {vehicle_pose: vehiclePose, state_updates: stateUpdates, ...otherInfo} = data;\n\n  let timestamp;\n  if (vehiclePose) {\n    timestamp = vehiclePose.time;\n  } else if (stateUpdates) {\n    timestamp = stateUpdates.reduce((t, stateUpdate) => {\n      return Math.max(t, stateUpdate.timestamp);\n    }, 0);\n  }\n\n  if (!timestamp) {\n    // Incomplete stream message, just tag it accordingly so client can ignore it\n    return {type: XVIZ_MESSAGE_TYPE.INCOMPLETE};\n  }\n\n  const newStreams = {};\n  const result = {\n    ...otherInfo,\n    type: XVIZ_MESSAGE_TYPE.TIMESLICE,\n    streams: newStreams,\n    timestamp\n  };\n\n  if (stateUpdates) {\n    const xvizStreams = parseStateUpdates(stateUpdates, timestamp, convertPrimitive);\n    Object.assign(newStreams, xvizStreams);\n  }\n\n  if (vehiclePose) {\n    // v1 -> v2\n    newStreams[PRIMARY_POSE_STREAM] = vehiclePose;\n  }\n\n  return result;\n}\n\nfunction parseStateUpdates(stateUpdates, timestamp, convertPrimitive) {\n  const {STREAM_BLACKLIST} = getXVIZConfig();\n\n  const newStreams = {};\n  const primitives = {};\n  const variables = {};\n  const futures = {};\n\n  for (const stateUpdate of stateUpdates) {\n    Object.assign(primitives, stateUpdate.primitives);\n    Object.assign(variables, stateUpdate.variables);\n    Object.assign(futures, stateUpdate.futures);\n  }\n\n  Object.keys(primitives)\n    .filter(streamName => !STREAM_BLACKLIST.has(streamName))\n    .forEach(primitive => {\n      newStreams[primitive] = parseStreamPrimitive(\n        primitives[primitive],\n        primitive,\n        timestamp,\n        convertPrimitive\n      );\n    });\n\n  Object.keys(variables)\n    .filter(streamName => !STREAM_BLACKLIST.has(streamName))\n    .forEach(variable => {\n      newStreams[variable] = parseStreamVariable(variables[variable], variable, timestamp);\n    });\n\n  Object.keys(futures)\n    .filter(streamName => !STREAM_BLACKLIST.has(streamName))\n    .forEach(future => {\n      newStreams[future] = parseStreamFutures(futures[future], future, timestamp, convertPrimitive);\n    });\n\n  return newStreams;\n}\n"],"file":"parse-timeslice-data-v1.js"}