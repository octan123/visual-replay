{"version":3,"sources":["../../../src/parsers/xviz-v2-common.js"],"names":["getXVIZConfig","PrimitiveTypes","parseVersionString","versionString","versionSplit","split","major","minor","patch","field","shift","Number","parseInt","getPrimitiveData","primitiveObject","currentMajorVersion","Array","length","type","primitives","keys","Object","includes","singularType","slice","unFlattenVertices","vertices","result","i","push","ensureUnFlattenedVertices","isArray"],"mappings":"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","sourcesContent":["// Copyright (c) 2019 Uber Technologies, Inc.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport {getXVIZConfig} from '../config/xviz-config';\n\nconst PrimitiveTypes = [\n  'circles',\n  'images',\n  'points',\n  'polygons',\n  'polylines',\n  'stadiums',\n  'texts'\n];\n\nexport function parseVersionString(versionString) {\n  const versionSplit = versionString.split('.');\n  let major = null;\n  let minor = null;\n  let patch = null;\n\n  let field = versionSplit.shift();\n  if (field) {\n    major = Number.parseInt(field, 10);\n  }\n\n  field = versionSplit.shift();\n  if (field) {\n    minor = Number.parseInt(field, 10);\n  }\n\n  field = versionSplit.shift();\n  if (field) {\n    patch = Number.parseInt(field, 10);\n  }\n\n  return {major, minor, patch};\n}\n\n/**\n * Primitives in v2 are a map with the 'type' as the key.\n * This function validates the type and returns underlying array\n *\n */\nexport function getPrimitiveData(primitiveObject) {\n  const {currentMajorVersion} = getXVIZConfig();\n\n  if (currentMajorVersion === 1) {\n    if (primitiveObject instanceof Array) {\n      if (primitiveObject.length === 0) {\n        // The empty array implies 'no data' for this object, which is distinct\n        // from 'absence of data' which would happen if there was not primitive entry at all\n        return {type: null, primitives: primitiveObject};\n      } else if (primitiveObject.length > 0) {\n        // This is populated primitive data\n        return {type: primitiveObject[0].type, primitives: primitiveObject};\n      }\n    }\n  }\n\n  if (currentMajorVersion === 2) {\n    // Primitives have the type as the first key\n    const keys = Object.keys(primitiveObject);\n\n    for (const type of keys) {\n      if (PrimitiveTypes.includes(type)) {\n        // Types in v2 are the plural form, but lookup in xviz-primitives-2.js\n        // uses singular, ie points -> point\n        const singularType = type.slice(0, -1);\n        return {type: singularType, primitives: primitiveObject[type]};\n      }\n    }\n  }\n\n  // TODO(twojtasz): Cleanup data flow as downstream expects an object rather than an error.\n  return {};\n}\n\n/**\n *  Turns arrays from [1, 2, 3, 4, 5, 6] to [[1, 2, 3], [4, 5, 6]]. The array\n *  must have a length a multiple of 3.\n */\nexport function unFlattenVertices(vertices) {\n  const result = [];\n  for (let i = 0; i < vertices.length; i = i + 3) {\n    result.push([vertices[i], vertices[i + 1], vertices[i + 2]]);\n  }\n\n  return result;\n}\n\n/**\n *  Unflattens an array only if it's already flat. Only works on arrays with a\n *  length that is a multiple of 3.\n */\nexport function ensureUnFlattenedVertices(vertices) {\n  if (vertices.length > 0 && !Array.isArray(vertices[0])) {\n    return unFlattenVertices(vertices);\n  }\n\n  return vertices;\n}\n"],"file":"xviz-v2-common.js"}