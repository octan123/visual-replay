{"version":3,"sources":["../../../src/parsers/parse-log-metadata.js"],"names":["getXVIZConfig","setXVIZConfig","parseVersionString","parseLogMetadata","data","supportedVersions","versionString","version","currentMajorVersion","undefined","major","Error","includes","parseLogMetadataV1","parseLogMetadataV2","originalStreams","streams","STREAM_BLACKLIST","Object","keys","forEach","streamName","has","getTimestamps","logStartTime","logEndTime","eventStartTime","eventEndTime","metadata","logInfo","log_info","styles","collectStreamStyles","start_time","end_time","info","Number","isFinite","log_start_time","log_end_time","metadataStreams","internalStylesheet","streamId","streamMetadata","streamStylesheet","stream_style","push","name","style","style_classes","length"],"mappings":"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","sourcesContent":["// Copyright (c) 2019 Uber Technologies, Inc.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport {getXVIZConfig, setXVIZConfig} from '../config/xviz-config';\nimport {parseVersionString} from './xviz-v2-common';\n\n// Post-processes log metadata\nexport function parseLogMetadata(data) {\n  const {supportedVersions} = getXVIZConfig();\n  const {version: versionString} = data;\n\n  let currentMajorVersion = null;\n  if (versionString === undefined) {\n    currentMajorVersion = 1;\n  } else {\n    const {major} = parseVersionString(versionString);\n    currentMajorVersion = major;\n  }\n\n  if (!currentMajorVersion) {\n    throw new Error('Unable to detect the XVIZ version.');\n  } else {\n    setXVIZConfig({currentMajorVersion});\n  }\n\n  if (supportedVersions && !supportedVersions.includes(currentMajorVersion)) {\n    throw new Error(\n      `XVIZ version ${currentMajorVersion} is not supported.  Currently supported versions are ${supportedVersions}.`\n    );\n  }\n\n  return currentMajorVersion === 1 ? parseLogMetadataV1(data) : parseLogMetadataV2(data);\n}\n\nexport function parseLogMetadataV1(data) {\n  // streams is the map from stream names (ie streams) to the url resource\n  const originalStreams = data.streams || [];\n\n  // Use XVIZ configuration to filter out unwanted / blacklisted streams\n  const {STREAM_BLACKLIST} = getXVIZConfig();\n  const streams = {};\n  Object.keys(originalStreams).forEach(streamName => {\n    if (!STREAM_BLACKLIST.has(streamName)) {\n      streams[streamName] = originalStreams[streamName];\n    }\n  });\n\n  const {logStartTime, logEndTime, eventStartTime, eventEndTime} = getTimestamps(data);\n\n  const metadata = {\n    ...data,\n\n    streams,\n\n    logStartTime,\n    logEndTime,\n\n    eventStartTime,\n    eventEndTime\n  };\n\n  return metadata;\n}\n\nexport function parseLogMetadataV2(data) {\n  // streams is the map from stream names (ie streams) to the url resource\n  const originalStreams = data.streams;\n\n  // Use XVIZ configuration to filter out unwanted / blacklisted streams\n  const {STREAM_BLACKLIST} = getXVIZConfig();\n  const streams = {};\n  if (originalStreams) {\n    Object.keys(originalStreams).forEach(streamName => {\n      if (!STREAM_BLACKLIST.has(streamName)) {\n        streams[streamName] = originalStreams[streamName];\n      }\n    });\n  }\n\n  const logInfo = data.log_info || {};\n  const {logStartTime, logEndTime, eventStartTime, eventEndTime} = getTimestamps(logInfo);\n  const styles = collectStreamStyles(streams);\n\n  const metadata = {\n    ...data,\n\n    streams, // Overrides entry from 'data'\n\n    logStartTime,\n    logEndTime,\n\n    start_time: eventStartTime, // eslint-disable-line camelcase\n    end_time: eventEndTime, // eslint-disable-line camelcase\n\n    // TODO: i don't think these are ever used\n    eventStartTime,\n    eventEndTime,\n\n    styles\n  };\n\n  return metadata;\n}\n\nfunction getTimestamps(info) {\n  const logStartTime = Number.isFinite(info.log_start_time) ? info.log_start_time : null;\n  const logEndTime = Number.isFinite(info.log_end_time) ? info.log_end_time : null;\n  // Fallback to complete log time if we don't have a specific playback time range\n  const eventStartTime = Number.isFinite(info.start_time) ? info.start_time : logStartTime;\n  const eventEndTime = Number.isFinite(info.end_time) ? info.end_time : logEndTime;\n\n  return {logStartTime, logEndTime, eventStartTime, eventEndTime};\n}\n\n/**\n * Convert V2 stylesheet data to the internal representation\n */\nfunction collectStreamStyles(metadataStreams) {\n  const internalStylesheet = {};\n  Object.keys(metadataStreams).forEach(streamId => {\n    const streamMetadata = metadataStreams[streamId];\n    const streamStylesheet = [];\n    if (streamMetadata.stream_style) {\n      streamStylesheet.push({\n        name: '*',\n        style: streamMetadata.stream_style\n      });\n    }\n\n    if (streamMetadata.style_classes) {\n      streamStylesheet.push(...streamMetadata.style_classes);\n    }\n\n    if (streamStylesheet.length !== 0) {\n      internalStylesheet[streamId] = streamStylesheet;\n    }\n  });\n\n  return internalStylesheet;\n}\n"],"file":"parse-log-metadata.js"}