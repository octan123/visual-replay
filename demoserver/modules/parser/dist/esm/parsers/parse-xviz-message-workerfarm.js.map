{"version":3,"sources":["../../../src/parsers/parse-xviz-message-workerfarm.js"],"names":["WorkerFarm","getXVIZConfig","subscribeXVIZConfigChange","workerFarm","getWorkerFarm","id","destroyWorkerFarm","Object","keys","forEach","destroy","initializeWorkerFarm","worker","maxConcurrency","capacity","xvizConfig","preProcessPrimitive","workerURL","blob","Blob","streamDataWorker","type","URL","createObjectURL","initialMessage","updateWorkerXVIZVersion","broadcast"],"mappings":";;;;;;AAeA,SAAQA,UAAR,QAAyB,uBAAzB;AACA,SAAQC,aAAR,EAAuBC,yBAAvB,QAAuD,uBAAvD;;AAGA,IAAMC,UAAU,GAAG,EAAnB;AAEA,OAAO,SAASC,aAAT,GAAuC;AAAA,MAAhBC,EAAgB,uEAAX,SAAW;AAC5C,SAAOF,UAAU,CAACE,EAAD,CAAjB;AACD;AAGD,OAAO,SAASC,iBAAT,GAA6B;AAClCC,EAAAA,MAAM,CAACC,IAAP,CAAYL,UAAZ,EAAwBM,OAAxB,CAAgC,UAAAJ,EAAE,EAAI;AACpC,QAAIF,UAAU,CAACE,EAAD,CAAd,EAAoB;AAClBF,MAAAA,UAAU,CAACE,EAAD,CAAV,CAAeK,OAAf;AACA,aAAOP,UAAU,CAACE,EAAD,CAAjB;AACD;AACF,GALD;AAMD;AAED,OAAO,SAASM,oBAAT,OAKJ;AAAA,MAJDC,MAIC,QAJDA,MAIC;AAAA,iCAHDC,cAGC;AAAA,MAHDA,cAGC,oCAHgB,CAGhB;AAAA,2BAFDC,QAEC;AAAA,MAFDA,QAEC,8BAFU,IAEV;AAAA,qBADDT,EACC;AAAA,MADDA,EACC,wBADI,SACJ;;AACD,MAAI,CAACF,UAAU,CAACE,EAAD,CAAf,EAAqB;AACnB,QAAMU,UAAU,qBAAOd,aAAa,EAApB,CAAhB;;AACA,WAAOc,UAAU,CAACC,mBAAlB;AACA,QAAIC,SAAJ;;AAEA,QAAI,OAAOL,MAAP,KAAkB,QAAtB,EAAgC;AAE9BK,MAAAA,SAAS,GAAGL,MAAZ;AACD,KAHD,MAGO;AAEL,UAAMM,IAAI,GAAG,IAAIC,IAAJ,CAAS,CAACC,gBAAD,CAAT,EAA6B;AAACC,QAAAA,IAAI,EAAE;AAAP,OAA7B,CAAb;AACAJ,MAAAA,SAAS,GAAGK,GAAG,CAACC,eAAJ,CAAoBL,IAApB,CAAZ;AACD;;AAEDf,IAAAA,UAAU,CAACE,EAAD,CAAV,GAAiB,IAAIL,UAAJ,CAAe;AAC9BK,MAAAA,EAAE,EAAFA,EAD8B;AAE9BY,MAAAA,SAAS,EAATA,SAF8B;AAG9BJ,MAAAA,cAAc,EAAdA,cAH8B;AAI9BC,MAAAA,QAAQ,EAARA,QAJ8B;AAK9BU,MAAAA,cAAc,EAAE;AAACT,QAAAA,UAAU,EAAVA;AAAD;AALc,KAAf,CAAjB;AAOD;AACF;AAED,OAAO,SAASU,uBAAT,GAAmC;AACxClB,EAAAA,MAAM,CAACC,IAAP,CAAYL,UAAZ,EAAwBM,OAAxB,CAAgC,UAAAJ,EAAE,EAAI;AACpC,QAAIF,UAAU,CAACE,EAAD,CAAd,EAAoB;AAClB,UAAMU,UAAU,qBAAOd,aAAa,EAApB,CAAhB;;AACA,aAAOc,UAAU,CAACC,mBAAlB;AAEAb,MAAAA,UAAU,CAACE,EAAD,CAAV,CAAeqB,SAAf,CAAyB;AAACX,QAAAA,UAAU,EAAVA;AAAD,OAAzB;AACD;AACF,GAPD;AAQD;AAIDb,yBAAyB,CAACuB,uBAAD,CAAzB","sourcesContent":["// Copyright (c) 2019 Uber Technologies, Inc.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n/* global Blob, URL */\nimport {WorkerFarm} from '../utils/worker-utils';\nimport {getXVIZConfig, subscribeXVIZConfigChange} from '../config/xviz-config';\nimport streamDataWorker from '../../dist/workers/stream-data.worker.js';\n\nconst workerFarm = {};\n\nexport function getWorkerFarm(id = 'default') {\n  return workerFarm[id];\n}\n\n// Mainly for testing\nexport function destroyWorkerFarm() {\n  Object.keys(workerFarm).forEach(id => {\n    if (workerFarm[id]) {\n      workerFarm[id].destroy();\n      delete workerFarm[id];\n    }\n  });\n}\n\nexport function initializeWorkerFarm({\n  worker,\n  maxConcurrency = 4,\n  capacity = null,\n  id = 'default'\n}) {\n  if (!workerFarm[id]) {\n    const xvizConfig = {...getXVIZConfig()};\n    delete xvizConfig.preProcessPrimitive;\n    let workerURL;\n\n    if (typeof worker === 'string') {\n      // worker is an URL\n      workerURL = worker;\n    } else {\n      // use default worker\n      const blob = new Blob([streamDataWorker], {type: 'application/javascript'});\n      workerURL = URL.createObjectURL(blob);\n    }\n\n    workerFarm[id] = new WorkerFarm({\n      id,\n      workerURL,\n      maxConcurrency,\n      capacity,\n      initialMessage: {xvizConfig}\n    });\n  }\n}\n\nexport function updateWorkerXVIZVersion() {\n  Object.keys(workerFarm).forEach(id => {\n    if (workerFarm[id]) {\n      const xvizConfig = {...getXVIZConfig()};\n      delete xvizConfig.preProcessPrimitive;\n\n      workerFarm[id].broadcast({xvizConfig});\n    }\n  });\n}\n\n// Subscribe to XVIZConfig changes so we can\n// update WebWorkers to adapt to XVIZ version changes\nsubscribeXVIZConfigChange(updateWorkerXVIZVersion);\n"],"file":"parse-xviz-message-workerfarm.js"}