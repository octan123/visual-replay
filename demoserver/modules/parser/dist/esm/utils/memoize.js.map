{"version":3,"sources":["../../../src/utils/memoize.js"],"names":["isEqual","a","b","Array","isArray","len","length","i","memoize","compute","cachedArgs","cachedResult","args","needsRecompute","some"],"mappings":"AAcA,SAASA,OAAT,CAAiBC,CAAjB,EAAoBC,CAApB,EAAuB;AACrB,MAAID,CAAC,KAAKC,CAAV,EAAa;AACX,WAAO,IAAP;AACD;;AACD,MAAIC,KAAK,CAACC,OAAN,CAAcH,CAAd,CAAJ,EAAsB;AAGpB,QAAMI,GAAG,GAAGJ,CAAC,CAACK,MAAd;;AACA,QAAI,CAACJ,CAAD,IAAMA,CAAC,CAACI,MAAF,KAAaD,GAAvB,EAA4B;AAC1B,aAAO,KAAP;AACD;;AAED,SAAK,IAAIE,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGF,GAApB,EAAyBE,CAAC,EAA1B,EAA8B;AAC5B,UAAIN,CAAC,CAACM,CAAD,CAAD,KAASL,CAAC,CAACK,CAAD,CAAd,EAAmB;AACjB,eAAO,KAAP;AACD;AACF;;AACD,WAAO,IAAP;AACD;;AACD,SAAO,KAAP;AACD;;AAOD,eAAe,SAASC,OAAT,CAAiBC,OAAjB,EAA0B;AACvC,MAAIC,UAAU,GAAG,IAAjB;AACA,MAAIC,YAAY,GAAG,IAAnB;AAEA,SAAO,YAAa;AAAA,sCAATC,IAAS;AAATA,MAAAA,IAAS;AAAA;;AAClB,QAAMC,cAAc,GAClB,CAACH,UAAD,IACAE,IAAI,CAACN,MAAL,KAAgBI,UAAU,CAACJ,MAD3B,IAEAM,IAAI,CAACE,IAAL,CAAU,UAACb,CAAD,EAAIM,CAAJ;AAAA,aAAU,CAACP,OAAO,CAACC,CAAD,EAAIS,UAAU,CAACH,CAAD,CAAd,CAAlB;AAAA,KAAV,CAHF;;AAKA,QAAIM,cAAJ,EAAoB;AAClBF,MAAAA,YAAY,GAAGF,OAAO,MAAP,SAAWG,IAAX,CAAf;AACAF,MAAAA,UAAU,GAAGE,IAAb;AACD;;AACD,WAAOD,YAAP;AACD,GAXD;AAYD","sourcesContent":["// Copyright (c) 2019 Uber Technologies, Inc.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nfunction isEqual(a, b) {\n  if (a === b) {\n    return true;\n  }\n  if (Array.isArray(a)) {\n    // Special treatment for arrays: compare 1-level deep\n    // This is to support equality of matrix/coordinate props\n    const len = a.length;\n    if (!b || b.length !== len) {\n      return false;\n    }\n\n    for (let i = 0; i < len; i++) {\n      if (a[i] !== b[i]) {\n        return false;\n      }\n    }\n    return true;\n  }\n  return false;\n}\n\n/**\n * Speed up consecutive function calls by caching the result of calls with identical input\n * https://en.wikipedia.org/wiki/Memoization\n * @param {function} compute - the function to be memoized\n */\nexport default function memoize(compute) {\n  let cachedArgs = null;\n  let cachedResult = null;\n\n  return (...args) => {\n    const needsRecompute =\n      !cachedArgs ||\n      args.length !== cachedArgs.length ||\n      args.some((a, i) => !isEqual(a, cachedArgs[i]));\n\n    if (needsRecompute) {\n      cachedResult = compute(...args);\n      cachedArgs = args;\n    }\n    return cachedResult;\n  };\n}\n"],"file":"memoize.js"}