{"version":3,"sources":["../../../src/utils/worker-utils.js"],"names":["getTransferList","object","recursive","transfers","transfersSet","Set","ArrayBuffer","add","buffer","key","undefined","Array","from","WorkerThread","constructor","url","metadata","worker","Worker","isBusy","process","data","Promise","resolve","reject","onmessage","e","onerror","err","postMessage","terminate","WorkerFarm","workerURL","maxConcurrency","debug","initialMessage","capacity","id","workers","queue","dropped","i","name","broadcast","destroy","forEach","getAvailableWorker","find","count","length","next","shift","job","message","backlog","then","onResult","catch","onError","push"],"mappings":"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","sourcesContent":["// Copyright (c) 2019 Uber Technologies, Inc.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n/* global Worker */\n\nexport function getTransferList(object, recursive = true, transfers) {\n  // Make sure that items in the transfer list is unique\n  const transfersSet = transfers || new Set();\n\n  if (!object) {\n    // ignore\n  } else if (object instanceof ArrayBuffer) {\n    transfersSet.add(object);\n  } else if (object.buffer && object.buffer instanceof ArrayBuffer) {\n    // Typed array\n    transfersSet.add(object.buffer);\n  } else if (recursive && typeof object === 'object') {\n    for (const key in object) {\n      // Avoid perf hit - only go one level deep\n      getTransferList(object[key], false, transfersSet);\n    }\n  }\n\n  // If transfers is defined, is internal recursive call\n  // Otherwise it's called by the user\n  return transfers === undefined ? Array.from(transfersSet) : null;\n}\n\n/**\n * A worker in the WorkerFarm\n */\nclass WorkerThread {\n  constructor({url, metadata}) {\n    this.worker = new Worker(url);\n    this.isBusy = false;\n    this.metadata = metadata;\n  }\n\n  process(data) {\n    const {worker} = this;\n\n    return new Promise((resolve, reject) => {\n      worker.onmessage = e => {\n        this.isBusy = false;\n        // console.log(e.data._size, `${Date.now() - e.data._sentAt}ms`);\n        resolve(e.data);\n      };\n\n      worker.onerror = err => {\n        this.isBusy = false;\n        reject(err);\n      };\n\n      this.isBusy = true;\n      worker.postMessage(data, getTransferList(data));\n    });\n  }\n\n  terminate() {\n    this.worker.terminate();\n    this.worker = null;\n  }\n}\n\n/**\n * Process multiple data messages with a fleet of workers\n */\nexport class WorkerFarm {\n  /**\n   * @param workerURL {function | string} - worker function\n   * @param maxConcurrency {number} - max count of workers\n   */\n  constructor({\n    workerURL,\n    maxConcurrency = 1,\n    debug = () => {},\n    initialMessage = null,\n    capacity = null,\n    id = 'default'\n  }) {\n    this.id = id;\n    this.workerURL = workerURL;\n    this.workers = [];\n    this.queue = [];\n    this.debug = debug;\n    this.capacity = capacity;\n    this.dropped = 0;\n\n    for (let i = 0; i < maxConcurrency; i++) {\n      this.workers[i] = new WorkerThread({\n        url: this.workerURL,\n        metadata: {name: `${i}/${maxConcurrency}`}\n      });\n    }\n\n    if (initialMessage) {\n      this.broadcast(initialMessage);\n    }\n  }\n\n  destroy() {\n    this.workers.forEach(worker => worker.terminate());\n  }\n\n  getAvailableWorker() {\n    return this.workers.find(worker => !worker.isBusy);\n  }\n\n  broadcast(data) {\n    const count = this.workers.length;\n    // queue in reverse order as bias worker searching in getAvailableWorker()\n    for (let i = count - 1; i >= 0; i--) {\n      this.workers[i].worker.postMessage(data, getTransferList(data));\n    }\n  }\n\n  next() {\n    const {queue} = this;\n\n    // Drop the oldest data if we are beyond our capacity\n    while (this.capacity && queue.length > this.capacity) {\n      queue.shift();\n      this.dropped++;\n    }\n\n    // Queue data\n    while (queue.length) {\n      const worker = this.getAvailableWorker();\n      if (!worker) {\n        break;\n      }\n      const job = queue.shift();\n\n      this.debug({\n        id: this.id,\n        message: 'processing',\n        worker: worker.metadata.name,\n        backlog: queue.length,\n        dropped: this.dropped\n      });\n\n      worker\n        .process(job.data)\n        .then(job.onResult)\n        .catch(job.onError)\n        .then(() => {\n          this.debug({\n            id: this.id,\n            message: 'waiting',\n            worker: worker.metadata.name,\n            backlog: queue.length,\n            dropped: this.dropped\n          });\n\n          this.next();\n        });\n    }\n  }\n\n  process(data, onResult, onError) {\n    this.queue.push({data, onResult, onError});\n    this.next();\n  }\n}\n"],"file":"worker-utils.js"}