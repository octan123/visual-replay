{"version":3,"sources":["../../../src/styles/stylesheet.js"],"names":["XVIZStyleProperty","SELECTOR_REGEX","OPERATOR_REGEX","NULL_VALIDATOR","Stylesheet","constructor","data","rules","slice","reverse","map","rule","selectors","validate","_parseSelector","name","properties","_parseProperties","forEach","key","Object","keys","p","push","getProperty","propertyName","state","inlineProp","base","style","hasOwnProperty","undefined","formatValue","match","find","getValue","getPropertyDefault","value","getDefault","getPropertyDependencies","attributes","selector","split","_getValidator","operator","object","classes","includes","selectorString","length","validators","every","result"],"mappings":"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","sourcesContent":["// Copyright (c) 2019 Uber Technologies, Inc.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport XVIZStyleProperty from './xviz-style-property';\n\nconst SELECTOR_REGEX = /\\S+/g;\nconst OPERATOR_REGEX = /([=:~\\*\\^]+)/;\nconst NULL_VALIDATOR = () => true;\n\n/* Parser for single stylesheet */\nexport default class Stylesheet {\n  constructor(data = []) {\n    const rules = data\n      .slice()\n      // Newer rules override older ones\n      .reverse()\n      .map(rule => {\n        const {selectors, validate} = this._parseSelector(rule.name || '*');\n        const properties = this._parseProperties(rule);\n        return {selectors, validate, properties};\n      });\n\n    this.properties = {};\n    rules.forEach(rule => {\n      for (const key of Object.keys(rule.properties)) {\n        let p = this.properties[key];\n        if (!p) {\n          p = [];\n          this.properties[key] = p;\n        }\n        p.push(rule);\n      }\n    });\n\n    this.rules = rules;\n  }\n\n  // Public methods\n\n  /**\n   * get style by property name for an object\n   * @param {String} propertyName - name of the style\n   * @param {Object} state - state descriptor of the object, used to match selectors\n   * @returns {Number|String|Array} style property value\n   */\n  getProperty(propertyName, state = {}) {\n    // inline style override any generic rules\n    const inlineProp =\n      state.base &&\n      state.base.style &&\n      state.base.style.hasOwnProperty(propertyName) &&\n      state.base.style[propertyName];\n    if (inlineProp !== undefined && inlineProp !== null && inlineProp !== false) {\n      return XVIZStyleProperty.formatValue(propertyName, inlineProp);\n    }\n\n    const rules = this.properties[propertyName];\n    const match = rules && rules.find(rule => rule.validate(state));\n    return match ? match.properties[propertyName].getValue(state) : null;\n  }\n\n  /**\n   * get default style by property name\n   * @param {String} propertyName - name of the style\n   * @returns {Number|String|Array} style property default value\n   */\n  getPropertyDefault(propertyName) {\n    const value = XVIZStyleProperty.getDefault(propertyName);\n    if (typeof value === 'function') {\n      return value(this);\n    }\n    return value;\n  }\n\n  /**\n   * get a list of attribute names that a property depends on.\n   * @param {String} propertyName - name of the style\n   * @returns {Array} - attribute names\n   */\n  getPropertyDependencies(propertyName) {\n    const attributes = {};\n    const rules = this.properties[propertyName];\n\n    if (!rules) {\n      return [];\n    }\n\n    rules.forEach(rule => {\n      rule.selectors.forEach(selector => {\n        if (selector !== '*') {\n          const [name] = selector.split(OPERATOR_REGEX);\n          attributes[name] = 1;\n        }\n      });\n    });\n\n    return Object.keys(attributes);\n  }\n\n  // Private methods\n\n  // Returns a function that checks if an object matches the given selector expressions\n  _getValidator(selector) {\n    if (selector === '*') {\n      return NULL_VALIDATOR;\n    }\n    const [name, operator, value] = selector.split(OPERATOR_REGEX);\n\n    switch (operator) {\n      case '=':\n        return object => object && object[name] === value;\n      default: {\n        return object => {\n          const classes = object && object.base && object.base.classes;\n          return object && ((classes && classes.includes(name)) || object[name]);\n        };\n      }\n    }\n  }\n\n  // Parses a selectorString (space-separated selector expressions)\n  _parseSelector(selectorString) {\n    const selectors = selectorString.match(SELECTOR_REGEX);\n    let validate;\n\n    // Special case handling\n    // Better perf than Array.every\n    if (selectors.length === 0 || selectors.includes('*')) {\n      validate = NULL_VALIDATOR;\n    } else if (selectors.length === 1) {\n      const match = this._getValidator(selectors[0]);\n      validate = object => match(object) || match(object.state);\n    } else {\n      const validators = selectors.map(this._getValidator);\n      validate = object => validators.every(match => match(object) || match(object.state));\n    }\n    return {selectors, validate};\n  }\n\n  // Parses property values\n  _parseProperties(properties) {\n    const result = {};\n\n    for (const key of Object.keys(properties.style)) {\n      result[key] = new XVIZStyleProperty(key, properties.style[key]);\n    }\n    return result;\n  }\n}\n"],"file":"stylesheet.js"}