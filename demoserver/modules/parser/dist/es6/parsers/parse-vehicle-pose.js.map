{"version":3,"sources":["../../../src/parsers/parse-vehicle-pose.js"],"names":["_Pose","Pose","addMetersToLngLat","noop","parseVehiclePose","vehiclePose","opts","onData","onDone","postProcessVehiclePose","context","map","filter","Boolean","getTransformsFromPose","longitude","latitude","altitude","origin","Number","isFinite","pose","vehicleRelativeTransform","getTransformationMatrix","trackPosition","transformVector","heading","yaw","Math","PI"],"mappings":";;;;;;AAcA,SAAQA,KAAK,IAAIC,IAAjB,QAA4B,SAA5B;AACA,SAAQC,iBAAR,QAAgC,2BAAhC;;AAEA,SAASC,IAAT,GAAgB,CAAE;;AAOlB,OAAO,SAASC,gBAAT,CAA0BC,WAA1B,EAAuCC,IAAI,GAAG,EAA9C,EAAkD;AAEvD,QAAM;AAACC,IAAAA,MAAM,GAAGJ,IAAV;AAAgBK,IAAAA,MAAM,GAAGL,IAAzB;AAA+BM,IAAAA;AAA/B,MAAyDH,IAA/D;AACA,QAAMI,OAAO,GAAGH,MAAM,CAACD,IAAD,CAAN,IAAgBA,IAAI,CAACI,OAArC;;AAEA,MAAID,sBAAJ,EAA4B;AAC1BJ,IAAAA,WAAW,GAAGA,WAAW,CACtBM,GADW,CACPF,sBADO,EAGXG,MAHW,CAGJC,OAHI,CAAd;AAID;;AAEDL,EAAAA,MAAM,iCAAKF,IAAL;AAAWI,IAAAA;AAAX,KAAN;AAEA,SAAOL,WAAP;AACD;AAED,OAAO,SAASS,qBAAT,CAA+BT,WAA/B,EAA4C;AACjD,QAAM;AAACU,IAAAA,SAAD;AAAYC,IAAAA,QAAZ;AAAsBC,IAAAA,QAAQ,GAAG;AAAjC,MAAsCZ,WAA5C;AAEA,QAAMa,MAAM,GACVC,MAAM,CAACC,QAAP,CAAgBf,WAAW,CAACU,SAA5B,KAA0CI,MAAM,CAACC,QAAP,CAAgBf,WAAW,CAACW,QAA5B,CAA1C,GACI,CAACD,SAAD,EAAYC,QAAZ,EAAsBC,QAAtB,CADJ,GAEI,IAHN;AAIA,QAAMI,IAAI,GAAG,IAAIpB,IAAJ,CAASI,WAAT,CAAb;AAEA,QAAMiB,wBAAwB,GAAGD,IAAI,CAACE,uBAAL,EAAjC;AAIA,QAAMC,aAAa,GAAGtB,iBAAiB,CACrCgB,MAAM,IAAI,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,CAD2B,EAErCI,wBAAwB,CAACG,eAAzB,CAAyC,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,CAAzC,CAFqC,CAAvC;AAKA,SAAO;AACLP,IAAAA,MADK;AAELI,IAAAA,wBAFK;AAGLE,IAAAA,aAHK;AAILE,IAAAA,OAAO,EAAGL,IAAI,CAACM,GAAL,GAAWC,IAAI,CAACC,EAAjB,GAAuB;AAJ3B,GAAP;AAMD","sourcesContent":["// Copyright (c) 2019 Uber Technologies, Inc.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport {_Pose as Pose} from 'math.gl';\nimport {addMetersToLngLat} from 'viewport-mercator-project';\n\nfunction noop() {}\n\n/**\n * Post-processes vehicle pose\n * covered by the trip in this log.\n * @param {Object} vehiclePose\n */\nexport function parseVehiclePose(vehiclePose, opts = {}) {\n  // Callbacks to enable instrumentation\n  const {onData = noop, onDone = noop, postProcessVehiclePose} = opts;\n  const context = onData(opts) || opts.context;\n\n  if (postProcessVehiclePose) {\n    vehiclePose = vehiclePose\n      .map(postProcessVehiclePose)\n      // Remove invalid poses.\n      .filter(Boolean);\n  }\n\n  onDone({...opts, context});\n\n  return vehiclePose;\n}\n\nexport function getTransformsFromPose(vehiclePose) {\n  const {longitude, latitude, altitude = 0} = vehiclePose;\n\n  const origin =\n    Number.isFinite(vehiclePose.longitude) && Number.isFinite(vehiclePose.latitude)\n      ? [longitude, latitude, altitude]\n      : null;\n  const pose = new Pose(vehiclePose);\n\n  const vehicleRelativeTransform = pose.getTransformationMatrix();\n\n  // If map_origin is not specified, use a faux position of [0, 0, 0]\n  // deck.gl needs a lon/lat position to target the camera\n  const trackPosition = addMetersToLngLat(\n    origin || [0, 0, 0],\n    vehicleRelativeTransform.transformVector([0, 0, 0])\n  );\n\n  return {\n    origin,\n    vehicleRelativeTransform,\n    trackPosition,\n    heading: (pose.yaw / Math.PI) * 180\n  };\n}\n"],"file":"parse-vehicle-pose.js"}