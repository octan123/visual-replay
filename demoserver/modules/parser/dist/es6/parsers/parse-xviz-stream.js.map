{"version":3,"sources":["../../../src/parsers/parse-xviz-stream.js"],"names":["getXVIZConfig","PRIMITIVE_CAT","normalizeXVIZPrimitive","XVIZObject","isMainThread","log","getPrimitiveData","XVIZPrimitiveSettingsV1","XVIZPrimitiveSettingsV2","createPrimitiveMap","result","key","SCALAR_TYPE","doubles","int32s","bools","strings","parseXVIZStream","data","convertPrimitive","primitives","ui_primitives","variables","futures","streamName","Object","keys","map","datum","parseStreamPrimitive","timestamp","parseStreamVariable","parseStreamFutures","parseStreamUIPrimitives","time","OBJECT_STREAM","preProcessPrimitive","DYNAMIC_STREAM_METADATA","PRIMITIVE_SETTINGS","currentMajorVersion","primitiveData","Array","isArray","type","primType","objects","primitiveMap","category","objectIndex","length","object","LOOKAHEAD","push","j","primitive","id","observe","vertices","joinFeatureVerticesToTypedArrays","features","pointCloud","joinObjectPointCloudsToTypedArrays","points","positions","colors","ids","__metadata","primitive_type","parseStreamFuturesV1","parseStreamFuturesV2","lookAheads","forEach","future","filter","Boolean","timestamps","future_set","futureIndex","normalizedPrimitive","parseStreamVariableV1","parseStreamVariableV2","scalar_type","variable","values","v","i","entry","base","valueData","getVariableData","object_id","parseStreamTimeSeries","seriesArray","streamBlackList","parseStreamTimeSeriesV2","error","valuesObject","timeSeriesStreams","timeSeriesEntry","streams","entryIndex","has","tsStream","warn","getVertexCount","Number","isFinite","getColorStride","vertexCount","stride","feature","Float64Array","count","set","p","subarray","DEFAULT_COLOR","numInstances","vertexColorStride","Float32Array","Uint8ClampedArray","Uint32Array","vertexPositions","vertexColors","colorStride","color","isColorFlattenedArray","isPositionFlattenedArray","fill","vertex","components","assign"],"mappings":"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","sourcesContent":["// Copyright (c) 2019 Uber Technologies, Inc.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport {getXVIZConfig} from '../config/xviz-config';\nimport {PRIMITIVE_CAT, normalizeXVIZPrimitive} from './parse-xviz-primitive';\nimport XVIZObject from '../objects/xviz-object';\nimport {isMainThread} from '../utils/globals';\nimport log from '../utils/log';\nimport {getPrimitiveData} from './xviz-v2-common';\n\nimport XVIZPrimitiveSettingsV1 from './xviz-primitives-v1';\nimport XVIZPrimitiveSettingsV2 from './xviz-primitives-v2';\n\nfunction createPrimitiveMap() {\n  const result = {};\n  for (const key in PRIMITIVE_CAT) {\n    result[PRIMITIVE_CAT[key]] = [];\n  }\n  return result;\n}\n\nconst SCALAR_TYPE = {\n  doubles: 'FLOAT',\n  int32s: 'INT32',\n  bools: 'BOOL',\n  strings: 'STRING'\n};\n\n/* eslint-disable max-depth, max-statements, complexity, camelcase */\n// Handle stream-sliced data, via the ETL flow.\nexport function parseXVIZStream(data, convertPrimitive) {\n  // data is an array of objects\n  // Each object is [{primitives, variables, timestamp},...]\n  // Each object represents a timestamp and array of objects\n\n  // V1 has a no-data entry that results in setting all top-level types to an\n  // empty array. See the test cases.\n  //\n  // Usually only one of these fields is valid and thus only one is normally\n  // iterated below.\n  const {primitives, ui_primitives, variables, futures} = data[0];\n\n  // At this point, we either have one or the other.\n  // TODO(twojtasz): BUG: there is an assumption that\n  // streamNames will be unique.  Need to put in a detection if\n  // that is violated.\n  if (primitives) {\n    const streamName = Object.keys(primitives)[0];\n    return data.map(datum =>\n      parseStreamPrimitive(\n        datum.primitives[streamName],\n        streamName,\n        datum.timestamp,\n        convertPrimitive\n      )\n    );\n  } else if (variables) {\n    const streamName = Object.keys(variables)[0];\n    return data.map(datum =>\n      parseStreamVariable(datum.variables[streamName], streamName, datum.timestamp)\n    );\n  } else if (futures) {\n    const streamName = Object.keys(futures)[0];\n    return data.map(datum =>\n      parseStreamFutures(datum.futures[streamName], streamName, datum.timestamp, convertPrimitive)\n    );\n  } else if (ui_primitives) {\n    const streamName = Object.keys(ui_primitives)[0];\n    return data.map(datum =>\n      parseStreamUIPrimitives(datum.ui_primitives[streamName], streamName, datum.timestamp)\n    );\n  }\n\n  return {};\n}\n\n/* Processes an individual primitive time sample and converts the\n * data to UI elements.\n */\nexport function parseStreamPrimitive(primitives, streamName, time, convertPrimitive) {\n  const {OBJECT_STREAM, preProcessPrimitive, DYNAMIC_STREAM_METADATA} = getXVIZConfig();\n  const PRIMITIVE_SETTINGS =\n    getXVIZConfig().currentMajorVersion === 1 ? XVIZPrimitiveSettingsV1 : XVIZPrimitiveSettingsV2;\n\n  const primitiveData = getPrimitiveData(primitives);\n\n  if (!primitiveData || !Array.isArray(primitiveData.primitives)) {\n    return {};\n  }\n\n  const {type: primType, primitives: objects} = primitiveData;\n\n  const primitiveMap = createPrimitiveMap();\n\n  let category = null;\n  // Primitives are an array of XVIZ objects\n  for (let objectIndex = 0; objectIndex < objects.length; objectIndex++) {\n    const object = objects[objectIndex];\n\n    // array of primitives\n    if (object && Array.isArray(object)) {\n      category = PRIMITIVE_CAT.LOOKAHEAD;\n      primitiveMap[category].push([]);\n\n      for (let j = 0; j < object.length; j++) {\n        // Apply custom XVIZ pre processing to this primitive\n        preProcessPrimitive({primitive: object[j], streamName, time});\n\n        // process each primitive\n        const primitive = normalizeXVIZPrimitive(\n          PRIMITIVE_SETTINGS,\n          object[j],\n          objectIndex,\n          streamName,\n          primType,\n          time,\n          convertPrimitive\n        );\n        if (primitive) {\n          primitiveMap[category][objectIndex].push(primitive);\n        }\n      }\n    } else {\n      // single primitive\n\n      // Apply custom XVIZ postprocessing to this primitive\n      preProcessPrimitive({primitive: object, streamName, time});\n\n      // normalize primitive\n      const primitive = normalizeXVIZPrimitive(\n        PRIMITIVE_SETTINGS,\n        object,\n        objectIndex,\n        streamName,\n        primType,\n        time,\n        convertPrimitive\n      );\n\n      // Allow for v1 inline type to override primitive type\n      category = PRIMITIVE_SETTINGS[object.type || primType].category;\n      if (primitive) {\n        primitiveMap[category].push(primitive);\n\n        if (\n          isMainThread &&\n          // OBJECT_STREAM is deprecated, only keeping for backward compatibility\n          (streamName === OBJECT_STREAM ||\n            (!OBJECT_STREAM && primitive.id && category === 'features'))\n        ) {\n          XVIZObject.observe(primitive.id, time);\n        }\n      }\n    }\n  }\n\n  primitiveMap.vertices = joinFeatureVerticesToTypedArrays(primitiveMap.features);\n  const pointCloud = joinObjectPointCloudsToTypedArrays(primitiveMap.pointCloud);\n  if (pointCloud) {\n    primitiveMap.features.push({\n      type: pointCloud.type,\n      points: pointCloud.positions,\n      colors: pointCloud.colors,\n      ids: pointCloud.ids\n    });\n  }\n  // Backward compatibility\n  primitiveMap.pointCloud = pointCloud;\n  primitiveMap.time = time;\n\n  if (DYNAMIC_STREAM_METADATA) {\n    primitiveMap.__metadata = {\n      category: 'PRIMITIVE',\n      primitive_type: primType\n    };\n  }\n\n  return primitiveMap;\n}\n\n/* Processes the futures and converts the\n * data to UI elements.\n */\nexport function parseStreamFutures(objects, streamName, time, convertPrimitive) {\n  const {currentMajorVersion, DYNAMIC_STREAM_METADATA} = getXVIZConfig();\n\n  const result =\n    currentMajorVersion === 1\n      ? parseStreamFuturesV1(objects, streamName, time, convertPrimitive)\n      : parseStreamFuturesV2(objects, streamName, time, convertPrimitive);\n\n  if (DYNAMIC_STREAM_METADATA) {\n    result.__metadata = {\n      category: 'FUTURE_INSTANCE',\n      primitive_type: result.lookAheads[0][0] && result.lookAheads[0][0].type\n    };\n  }\n\n  return result;\n}\n\nexport function parseStreamFuturesV1(objects, streamName, time, convertPrimitive) {\n  const futures = [];\n  // objects = array of objects\n  // [{timestamp, primitives[]}, ...]\n\n  // Futures are an array of array of primitives and\n  // the objectIndex is used to find the timestamp associated\n  // with the set of primitives.\n  objects.forEach((object, objectIndex) => {\n    const {primitives} = object;\n\n    const future = primitives\n      .map(primitive =>\n        normalizeXVIZPrimitive(\n          XVIZPrimitiveSettingsV1,\n          primitive,\n          objectIndex,\n          streamName,\n          primitive.type,\n          time,\n          convertPrimitive\n        )\n      )\n      .filter(Boolean);\n\n    futures.push(future);\n  });\n\n  return {\n    time,\n    lookAheads: futures\n  };\n}\n\nexport function parseStreamFuturesV2(objects, streamName, time, convertPrimitive) {\n  const futures = [];\n\n  // objects = {\n  //   timestamps: [1, 2, 3],\n  //   primitives: [\n  //    { <type>: [ <objects for ts[1]> ] },\n  //    { <type>: [ <objects for ts[2]> ] },\n  //    { <type>: [ <objects for ts[3]> ] }\n  //   ]\n  // }\n\n  const timestamps = objects.timestamps;\n  objects.primitives.forEach((future_set, futureIndex) => {\n    // Get the underlying primitive array\n    const data = getPrimitiveData(future_set);\n\n    const future = data.primitives\n      .map(primitive => {\n        const normalizedPrimitive = normalizeXVIZPrimitive(\n          XVIZPrimitiveSettingsV2,\n          primitive,\n          futureIndex,\n          streamName,\n          data.type,\n          time,\n          convertPrimitive\n        );\n\n        normalizedPrimitive.timestamp = timestamps[futureIndex];\n        return normalizedPrimitive;\n      })\n      .filter(Boolean);\n\n    futures.push(future);\n  });\n\n  return {\n    time,\n    lookAheads: futures\n  };\n}\n\n/* Processes an individual variable time sample and converts the\n * data to UI elements.\n */\nexport function parseStreamVariable(objects, streamName, time) {\n  const {currentMajorVersion, DYNAMIC_STREAM_METADATA} = getXVIZConfig();\n\n  const result =\n    currentMajorVersion === 1\n      ? parseStreamVariableV1(objects, streamName, time)\n      : parseStreamVariableV2(objects, streamName, time);\n\n  if (DYNAMIC_STREAM_METADATA) {\n    result.__metadata = {\n      category: 'VARIABLE',\n      scalar_type: Array.isArray(result.variable) && result.variable[0] && result.variable[0].type\n    };\n  }\n\n  return result;\n}\n\nexport function parseStreamVariableV1(objects, streamName, time) {\n  if (Array.isArray(objects)) {\n    return {time};\n  }\n\n  let variable;\n  const {timestamps, values} = objects;\n  if (values.length === 1) {\n    variable = values[0];\n  } else if (timestamps) {\n    variable = values.map((v, i) => [timestamps[i], v]);\n  } else {\n    variable = values;\n  }\n\n  const entry = {\n    time,\n    variable\n  };\n\n  return entry;\n}\n\nexport function parseStreamVariableV2(objects, streamName, time) {\n  if (Array.isArray(objects)) {\n    return {time};\n  }\n\n  const variables = objects.variables;\n  if (!variables || !Array.isArray(variables)) {\n    return {};\n  }\n\n  const result = {time};\n\n  result.variable = variables\n    .map(entry => {\n      const {base, values} = entry;\n\n      const valueData = getVariableData(values);\n      if (!valueData || !valueData.values) {\n        return null;\n      }\n\n      if (base && base.object_id) {\n        valueData.id = base.object_id;\n      }\n\n      return valueData;\n    })\n    .filter(Boolean);\n\n  return result;\n}\n\n/* Processes a time_series sample and converts the\n * data to UI elements.\n */\nexport function parseStreamTimeSeries(seriesArray, streamBlackList) {\n  const {currentMajorVersion} = getXVIZConfig();\n\n  if (currentMajorVersion === 2) {\n    return parseStreamTimeSeriesV2(seriesArray, streamBlackList);\n  }\n\n  log.error(`Invalid time_series data in XVIZ version ${currentMajorVersion}`)();\n  return null;\n}\n\nfunction getVariableData(valuesObject) {\n  // Primitives have the type as the first key\n  for (const key in valuesObject) {\n    if (key in SCALAR_TYPE) {\n      return {type: SCALAR_TYPE[key], values: valuesObject[key]};\n    }\n  }\n\n  // TODO(twojtasz): a more informative error path that doesn't abort processing\n  return null;\n}\n\nfunction parseStreamTimeSeriesV2(seriesArray, streamBlackList) {\n  if (!Array.isArray(seriesArray)) {\n    return {};\n  }\n  const {DYNAMIC_STREAM_METADATA} = getXVIZConfig();\n\n  const timeSeriesStreams = {};\n  seriesArray.forEach(timeSeriesEntry => {\n    const {timestamp, streams, values, object_id} = timeSeriesEntry;\n    const valueData = getVariableData(values);\n\n    if (!valueData || valueData.values.length !== streams.length) {\n      return null;\n    }\n\n    valueData.values.forEach((variable, entryIndex) => {\n      const streamName = streams[entryIndex];\n\n      if (!streamBlackList.has(streamName)) {\n        const entry = {time: timestamp, variable};\n        if (object_id) {\n          entry.id = object_id;\n        }\n\n        const tsStream = timeSeriesStreams[streamName];\n\n        if (tsStream) {\n          // a duplicate entry is seen, leave the first entry.\n          log.warn(`Unexpected time_series duplicate: ${streamName}`)();\n        } else {\n          timeSeriesStreams[streamName] = entry;\n        }\n\n        if (DYNAMIC_STREAM_METADATA) {\n          entry.__metadata = {\n            category: 'TIME_SERIES',\n            scalar_type: valueData.type\n          };\n        }\n      }\n    });\n\n    // eslint consistent-return warning\n    // This for loop we do not need to return any value\n    return timeSeriesStreams;\n  });\n\n  return timeSeriesStreams;\n}\n\nfunction getVertexCount(vertices) {\n  return Number.isFinite(vertices[0]) ? vertices.length / 3 : vertices.length;\n}\n\nfunction getColorStride(colors, vertexCount) {\n  if (colors) {\n    if (colors.length / 4 === vertexCount) {\n      return 4;\n    }\n    if (colors.length / 3 === vertexCount) {\n      return 3;\n    }\n    let stride;\n    if (Array.isArray(colors[0])) {\n      stride = colors[0].length;\n    } else {\n      stride = colors.length;\n    }\n    if (stride === 3 || stride === 4) {\n      return stride;\n    }\n    log.error('Unknown point color format');\n  }\n  return 0;\n}\n\n// Create typed arrays from vertices to save storage & transfer time\nfunction joinFeatureVerticesToTypedArrays(features) {\n  let vertexCount = 0;\n  for (const feature of features) {\n    if (feature.vertices) {\n      vertexCount += getVertexCount(feature.vertices);\n    }\n  }\n\n  if (vertexCount === 0) {\n    return null;\n  }\n\n  const vertices = new Float64Array(vertexCount * 3);\n  let i = 0;\n\n  for (const feature of features) {\n    if (feature.vertices) {\n      const count = getVertexCount(feature.vertices);\n      if (Number.isFinite(feature.vertices[0])) {\n        vertices.set(feature.vertices, i);\n        i += count * 3;\n      } else {\n        for (const p of feature.vertices) {\n          vertices.set(p, i);\n          i += 3;\n        }\n      }\n      feature.vertices = vertices.subarray(i - count * 3, i);\n    }\n  }\n\n  return vertices;\n}\n\nconst DEFAULT_COLOR = [0, 0, 0, 255];\n\n// Joins a set of point clouds extracted from objects into a single point cloud\n// generates typed arrays that can be displayed efficiently by deck.gl\nfunction joinObjectPointCloudsToTypedArrays(objects) {\n  if (objects.length === 0) {\n    return null;\n  }\n\n  let numInstances = 0;\n  for (const object of objects) {\n    numInstances += getVertexCount(object.vertices);\n  }\n\n  let vertexColorStride = null;\n\n  const positions = new Float32Array(numInstances * 3);\n  const colors = new Uint8ClampedArray(numInstances * 4);\n\n  // Store object ids to enable recoloring.\n  // NOTE: Not a vertex attribute, ids are just efficiently stored as as 32 bit integers...\n  const ids = new Uint32Array(numInstances);\n\n  let i = 0;\n  objects.forEach(object => {\n    const vertexPositions = object.vertices;\n    // object.color is V1 and should be removed when deprecated\n    const vertexColors = object.colors;\n    const vertexCount = getVertexCount(vertexPositions);\n\n    if (vertexCount === 0) {\n      return;\n    }\n\n    // Setup for per-point color\n    const colorStride = getColorStride(vertexColors || object.color, vertexCount);\n    if (vertexColorStride !== null && vertexColorStride !== colorStride) {\n      log.error('Inconsistent point color format');\n    }\n    vertexColorStride = colorStride;\n\n    const isColorFlattenedArray =\n      vertexColors && vertexColors.length === vertexCount * vertexColorStride;\n    if (isColorFlattenedArray) {\n      colors.set(vertexColors, i * vertexColorStride);\n    }\n\n    const isPositionFlattenedArray = vertexPositions.length === vertexCount * 3;\n    if (isPositionFlattenedArray) {\n      positions.set(vertexPositions, i * 3);\n    }\n\n    if (Number.isFinite(object.id)) {\n      // v1 object ids\n      ids.fill(object.id, i, i + vertexCount);\n    }\n\n    if (isPositionFlattenedArray && (isColorFlattenedArray || !vertexColorStride)) {\n      // both positions and colors are populated\n      return;\n    }\n\n    let color = object.color || DEFAULT_COLOR;\n    for (let j = 0; j < vertexCount; j++, i++) {\n      if (!isPositionFlattenedArray) {\n        const vertex = vertexPositions[j];\n        positions[i * 3 + 0] = vertex[0];\n        positions[i * 3 + 1] = vertex[1];\n        positions[i * 3 + 2] = vertex[2];\n      }\n\n      if (!isColorFlattenedArray && vertexColorStride) {\n        if (vertexColors) {\n          color = vertexColors[j];\n        }\n        colors[i * vertexColorStride + 0] = color[0];\n        colors[i * vertexColorStride + 1] = color[1];\n        colors[i * vertexColorStride + 2] = color[2];\n        if (vertexColorStride === 4) {\n          colors[i * vertexColorStride + 3] = color[3] || 255;\n        }\n      }\n    }\n  });\n\n  return {\n    type: objects[0].type,\n    numInstances,\n    positions,\n    colors: vertexColorStride ? colors.subarray(0, vertexColorStride * numInstances) : null,\n    ids\n  };\n}\n\nexport function parseStreamUIPrimitives(components, streamName, time) {\n  const result = Object.assign({time}, components);\n\n  if (getXVIZConfig().DYNAMIC_STREAM_METADATA) {\n    result.__metadata = {\n      category: 'UI_PRIMITIVE'\n    };\n  }\n\n  return result;\n}\n"],"file":"parse-xviz-stream.js"}