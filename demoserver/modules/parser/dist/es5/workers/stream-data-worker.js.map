{"version":3,"sources":["../../../src/workers/stream-data-worker.js"],"names":["config","self","onResult","message","transfers","Set","type","XVIZ_MESSAGE_TYPE","TIMESLICE","streamName","streams","stream","pointCloud","vertices","images","length","forEach","image","VIDEO_FRAME","imageData","postMessage","Array","from","onError","error","onmessage","e","data","xvizConfig","opts"],"mappings":";;;;;;;AAeA;;AACA;;AACA;;AACA;;AACA;;eAEe,kBAAAA,MAAM;AAAA,SAAI,UAAAC,IAAI,EAAI;AAC/B,mCAAcD,MAAd;;AAEA,aAASE,QAAT,CAAkBC,OAAlB,EAA2B;AACzB,UAAMC,SAAS,GAAG,IAAIC,GAAJ,EAAlB;;AAEA,cAAQF,OAAO,CAACG,IAAhB;AACE,aAAKC,6BAAkBC,SAAvB;AACE,eAAK,IAAMC,UAAX,IAAyBN,OAAO,CAACO,OAAjC,EAA0C;AACxC,gBAAMC,MAAM,GAAGR,OAAO,CAACO,OAAR,CAAgBD,UAAhB,CAAf;;AACA,gBAAIE,MAAJ,EAAY;AACV,gDAAgBA,MAAM,CAACC,UAAvB,EAAmC,IAAnC,EAAyCR,SAAzC;AACA,gDAAgBO,MAAM,CAACE,QAAvB,EAAiC,KAAjC,EAAwCT,SAAxC;;AACA,kBAAIO,MAAM,CAACG,MAAP,IAAiBH,MAAM,CAACG,MAAP,CAAcC,MAAnC,EAA2C;AACzCJ,gBAAAA,MAAM,CAACG,MAAP,CAAcE,OAAd,CAAsB,UAAAC,KAAK;AAAA,yBAAI,kCAAgBA,KAAhB,EAAuB,IAAvB,EAA6Bb,SAA7B,CAAJ;AAAA,iBAA3B;AACD;AACF;AACF;;AACD;;AAEF,aAAKG,6BAAkBW,WAAvB;AAEE,4CAAgBf,OAAO,CAACgB,SAAxB,EAAmC,KAAnC,EAA0Cf,SAA1C;AACA;;AAEF;AAnBF;;AAsBAD,MAAAA,OAAO,GAAG,6BAAaA,OAAb,CAAV;AAYAF,MAAAA,IAAI,CAACmB,WAAL,CAAiBjB,OAAjB,EAA0BkB,KAAK,CAACC,IAAN,CAAWlB,SAAX,CAA1B;AACD;;AAED,aAASmB,OAAT,CAAiBC,KAAjB,EAAwB;AACtB,YAAMA,KAAN;AACD;;AAEDvB,IAAAA,IAAI,CAACwB,SAAL,GAAiB,UAAAC,CAAC,EAAI;AAIpB,UAAIA,CAAC,CAACC,IAAF,IAAUD,CAAC,CAACC,IAAF,CAAOC,UAArB,EAAiC;AAC/B,uCAAcF,CAAC,CAACC,IAAF,CAAOC,UAArB;AACD,OAFD,MAEO,IAAIF,CAAC,CAACC,IAAN,EAAY;AACjB,YAAID,CAAC,CAACC,IAAF,CAAOE,IAAX,EAAiB;AAEf,0DAAqBH,CAAC,CAACC,IAAF,CAAOA,IAA5B,EAAkCzB,QAAlC,EAA4CqB,OAA5C,EAAqDG,CAAC,CAACC,IAAF,CAAOE,IAA5D;AACD,SAHD,MAGO;AAEL,0DAAqBH,CAAC,CAACC,IAAvB,EAA6BzB,QAA7B,EAAuCqB,OAAvC;AACD;AACF;AACF,KAfD;AAgBD,GA/DoB;AAAA,C","sourcesContent":["// Copyright (c) 2019 Uber Technologies, Inc.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n/* eslint-disable max-depth */\n\nimport {setXVIZConfig} from '../config/xviz-config';\nimport {parseXVIZMessageSync} from '../parsers/parse-xviz-message-sync';\nimport {preSerialize} from '../parsers/serialize';\nimport {getTransferList} from '../utils/worker-utils';\nimport {XVIZ_MESSAGE_TYPE} from '../constants';\n\nexport default config => self => {\n  setXVIZConfig(config);\n\n  function onResult(message) {\n    const transfers = new Set();\n\n    switch (message.type) {\n      case XVIZ_MESSAGE_TYPE.TIMESLICE:\n        for (const streamName in message.streams) {\n          const stream = message.streams[streamName];\n          if (stream) {\n            getTransferList(stream.pointCloud, true, transfers);\n            getTransferList(stream.vertices, false, transfers);\n            if (stream.images && stream.images.length) {\n              stream.images.forEach(image => getTransferList(image, true, transfers));\n            }\n          }\n        }\n        break;\n\n      case XVIZ_MESSAGE_TYPE.VIDEO_FRAME:\n        // v1 video stream\n        getTransferList(message.imageData, false, transfers);\n        break;\n\n      default:\n    }\n\n    message = preSerialize(message);\n\n    /* uncomment for debug */\n    // let size = 0;\n    // for (const item of transfers) {\n    //   size += item.byteLength;\n    // }\n    // message._size = {\n    //   arraybuffer: size\n    // };\n    // message._sentAt = Date.now();\n\n    self.postMessage(message, Array.from(transfers));\n  }\n\n  function onError(error) {\n    throw error;\n  }\n\n  self.onmessage = e => {\n    // The WorkerFarm will \"broadcast\" the version to the workers\n    // to make sure they properly respond in the event a v1 log is read\n    // then a v2 during the same session\n    if (e.data && e.data.xvizConfig) {\n      setXVIZConfig(e.data.xvizConfig);\n    } else if (e.data) {\n      if (e.data.opts) {\n        // Support explicit message type with non-enveloped protobuf\n        parseXVIZMessageSync(e.data.data, onResult, onError, e.data.opts);\n      } else {\n        // Normal flow where we handle message type determination\n        parseXVIZMessageSync(e.data, onResult, onError);\n      }\n    }\n  };\n};\n"],"file":"stream-data-worker.js"}